{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "withoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "linkedWithoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "withoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "linkedWithoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "withoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "linkedWithoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "6e610d1bb67d711ced410c354ad16b0e99b9f5f7bfc17b7b1763ba032c021026",
          "withoutMetadata": "6e610d1bb67d711ced410c354ad16b0e99b9f5f7bfc17b7b1763ba032c021026",
          "linkedWithoutMetadata": "6e610d1bb67d711ced410c354ad16b0e99b9f5f7bfc17b7b1763ba032c021026"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)3047",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)5999",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)3047": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)5999": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "withoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "linkedWithoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "withoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "linkedWithoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "withoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "linkedWithoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)5864",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)5864": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "withoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "linkedWithoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "f9e27b3321408a09c43eff5e4192ebc810cba5dd578bb1788419d4c8bb182645",
          "withoutMetadata": "f9e27b3321408a09c43eff5e4192ebc810cba5dd578bb1788419d4c8bb182645",
          "linkedWithoutMetadata": "f9e27b3321408a09c43eff5e4192ebc810cba5dd578bb1788419d4c8bb182645"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "aead8236fe4ec2612ecce550b0300dd4480e20613e281eef089187f620161243",
          "withoutMetadata": "aead8236fe4ec2612ecce550b0300dd4480e20613e281eef089187f620161243",
          "linkedWithoutMetadata": "aead8236fe4ec2612ecce550b0300dd4480e20613e281eef089187f620161243"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "381282c8fc1e8bca04800f059ecb6f97acf75ac5a52ee24f6efd3f878fb1e4f5",
          "withoutMetadata": "381282c8fc1e8bca04800f059ecb6f97acf75ac5a52ee24f6efd3f878fb1e4f5",
          "linkedWithoutMetadata": "381282c8fc1e8bca04800f059ecb6f97acf75ac5a52ee24f6efd3f878fb1e4f5"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "d46c638a291cc445b51815668661000c28ae7489b2ee4b8c5998f2bab5873dbd",
          "withoutMetadata": "d46c638a291cc445b51815668661000c28ae7489b2ee4b8c5998f2bab5873dbd",
          "linkedWithoutMetadata": "d46c638a291cc445b51815668661000c28ae7489b2ee4b8c5998f2bab5873dbd"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "9c63f419d14960f96512e59004ee74baa190c80486a7ac7bf3353f82ff955951",
          "withoutMetadata": "9c63f419d14960f96512e59004ee74baa190c80486a7ac7bf3353f82ff955951",
          "linkedWithoutMetadata": "9c63f419d14960f96512e59004ee74baa190c80486a7ac7bf3353f82ff955951"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "3d02e41d8352840b860197ab0f8c144bccffb51a610c5496c3fc4fc580c9dd23",
          "withoutMetadata": "3d02e41d8352840b860197ab0f8c144bccffb51a610c5496c3fc4fc580c9dd23",
          "linkedWithoutMetadata": "3d02e41d8352840b860197ab0f8c144bccffb51a610c5496c3fc4fc580c9dd23"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "1c2fac3642bab1e94776aedbdd9b2da7cbd5a33c9c52da65f87f5837b547a6e9",
          "withoutMetadata": "1c2fac3642bab1e94776aedbdd9b2da7cbd5a33c9c52da65f87f5837b547a6e9",
          "linkedWithoutMetadata": "1c2fac3642bab1e94776aedbdd9b2da7cbd5a33c9c52da65f87f5837b547a6e9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd",
          "withoutMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd",
          "linkedWithoutMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8",
          "withoutMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8",
          "linkedWithoutMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "withoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "linkedWithoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "withoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "linkedWithoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202",
          "withoutMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202",
          "linkedWithoutMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "withoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "linkedWithoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "8bf423400db639d5c74f4683cdceab1e79d560a0544a526ac7836a1c821ce364",
          "withoutMetadata": "8bf423400db639d5c74f4683cdceab1e79d560a0544a526ac7836a1c821ce364",
          "linkedWithoutMetadata": "8bf423400db639d5c74f4683cdceab1e79d560a0544a526ac7836a1c821ce364"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "a9525f946c805aa52bddda35976446aa6676363b3530af90432827499fb2d40f",
          "withoutMetadata": "a9525f946c805aa52bddda35976446aa6676363b3530af90432827499fb2d40f",
          "linkedWithoutMetadata": "a9525f946c805aa52bddda35976446aa6676363b3530af90432827499fb2d40f"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10738",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11853",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10738": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11853": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21",
          "withoutMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21",
          "linkedWithoutMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "759512013ba74d5f61a8ea056d6f19bad9d2829bd92949ccba6ecba6d793b753",
          "withoutMetadata": "759512013ba74d5f61a8ea056d6f19bad9d2829bd92949ccba6ecba6d793b753",
          "linkedWithoutMetadata": "759512013ba74d5f61a8ea056d6f19bad9d2829bd92949ccba6ecba6d793b753"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "b57b2f8a3f29b72d48ad116037b48575153689f55cb21142135bd37f324d6d4b",
          "withoutMetadata": "b57b2f8a3f29b72d48ad116037b48575153689f55cb21142135bd37f324d6d4b",
          "linkedWithoutMetadata": "b57b2f8a3f29b72d48ad116037b48575153689f55cb21142135bd37f324d6d4b"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "f6929ffbd2a9ae15b441acdf36ddef91d9898e1908d74ff23e625e4002757241",
          "withoutMetadata": "f6929ffbd2a9ae15b441acdf36ddef91d9898e1908d74ff23e625e4002757241",
          "linkedWithoutMetadata": "f6929ffbd2a9ae15b441acdf36ddef91d9898e1908d74ff23e625e4002757241"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11853",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19160",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11853": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19160": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "c1b2cc4f8edb497f0147a89e382d961f9024224f2ee90c67b3adfaa77c7334fa",
          "withoutMetadata": "c1b2cc4f8edb497f0147a89e382d961f9024224f2ee90c67b3adfaa77c7334fa",
          "linkedWithoutMetadata": "c1b2cc4f8edb497f0147a89e382d961f9024224f2ee90c67b3adfaa77c7334fa"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11853",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11288_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11288_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11853": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11288_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "e71768ddca23fd927503bb03368bb43fb5d28348a97679ea5d26e2d3e001e881",
          "withoutMetadata": "e71768ddca23fd927503bb03368bb43fb5d28348a97679ea5d26e2d3e001e881",
          "linkedWithoutMetadata": "e71768ddca23fd927503bb03368bb43fb5d28348a97679ea5d26e2d3e001e881"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0",
          "withoutMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0",
          "linkedWithoutMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c",
          "withoutMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c",
          "linkedWithoutMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1",
          "withoutMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1",
          "linkedWithoutMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603",
          "withoutMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603",
          "linkedWithoutMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "adb144bb8923d35c4d96b32d735cc596ffb755653c152ab87a9b8fb665fca586",
          "withoutMetadata": "adb144bb8923d35c4d96b32d735cc596ffb755653c152ab87a9b8fb665fca586",
          "linkedWithoutMetadata": "adb144bb8923d35c4d96b32d735cc596ffb755653c152ab87a9b8fb665fca586"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb",
          "withoutMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb",
          "linkedWithoutMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "678b9afd6545bcc22bf557d9fc030b0562b6b046ad003329bdfd9a38aaebf22c",
          "withoutMetadata": "678b9afd6545bcc22bf557d9fc030b0562b6b046ad003329bdfd9a38aaebf22c",
          "linkedWithoutMetadata": "678b9afd6545bcc22bf557d9fc030b0562b6b046ad003329bdfd9a38aaebf22c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "8b0c83adaaf78a4382fc40bea6821f79dd668f39aa28cdedb88e2e87f5f74aaf",
          "withoutMetadata": "8b0c83adaaf78a4382fc40bea6821f79dd668f39aa28cdedb88e2e87f5f74aaf",
          "linkedWithoutMetadata": "8b0c83adaaf78a4382fc40bea6821f79dd668f39aa28cdedb88e2e87f5f74aaf"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "withoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "linkedWithoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "withoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "linkedWithoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "withoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "linkedWithoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19025",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19025": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "8b0b614921a2966e7fb6b47952abe0ead04595c1c7ac7ec79804c6fbc2a670e7",
          "withoutMetadata": "8b0b614921a2966e7fb6b47952abe0ead04595c1c7ac7ec79804c6fbc2a670e7",
          "linkedWithoutMetadata": "8b0b614921a2966e7fb6b47952abe0ead04595c1c7ac7ec79804c6fbc2a670e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "withoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "linkedWithoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "withoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "linkedWithoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "withoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "linkedWithoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "withoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "linkedWithoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "ccedecff40d630b460c9c17f99b86364bb56eea422e09a43da1dc6a42c82ef41",
          "withoutMetadata": "ccedecff40d630b460c9c17f99b86364bb56eea422e09a43da1dc6a42c82ef41",
          "linkedWithoutMetadata": "ccedecff40d630b460c9c17f99b86364bb56eea422e09a43da1dc6a42c82ef41"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)3041",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)5993",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)3041": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)5993": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "withoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "linkedWithoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "withoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "linkedWithoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "withoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "linkedWithoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)5858",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)5858": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "withoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "linkedWithoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "12d699c574df5164c1910cc09e4916810bc77dfd19473d4e752a59d362b2436c",
          "withoutMetadata": "12d699c574df5164c1910cc09e4916810bc77dfd19473d4e752a59d362b2436c",
          "linkedWithoutMetadata": "12d699c574df5164c1910cc09e4916810bc77dfd19473d4e752a59d362b2436c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)12_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "withoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "linkedWithoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "withoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "linkedWithoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "withoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "linkedWithoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "withoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "linkedWithoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "withoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "linkedWithoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "withoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "linkedWithoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "withoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "linkedWithoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "3bb2a7085aaa07d98c67248f422967f7a480d72663e10d329a1896c614b5d20f",
          "withoutMetadata": "3bb2a7085aaa07d98c67248f422967f7a480d72663e10d329a1896c614b5d20f",
          "linkedWithoutMetadata": "3bb2a7085aaa07d98c67248f422967f7a480d72663e10d329a1896c614b5d20f"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "withoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "linkedWithoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "fbcd3c8990a201c6f2808af107093331521b6d82b59fd68ffab23dfe213377fb",
          "withoutMetadata": "fbcd3c8990a201c6f2808af107093331521b6d82b59fd68ffab23dfe213377fb",
          "linkedWithoutMetadata": "fbcd3c8990a201c6f2808af107093331521b6d82b59fd68ffab23dfe213377fb"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "477c17cf081b12cdc00e62803e4224907e3d4b0cc01a083bcd3c8bec5c9010ef",
          "withoutMetadata": "477c17cf081b12cdc00e62803e4224907e3d4b0cc01a083bcd3c8bec5c9010ef",
          "linkedWithoutMetadata": "477c17cf081b12cdc00e62803e4224907e3d4b0cc01a083bcd3c8bec5c9010ef"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "8ddcb0c21f8255a74593dde10cce70f7afacc5736a90d743a23df1720b17fcef",
          "withoutMetadata": "8ddcb0c21f8255a74593dde10cce70f7afacc5736a90d743a23df1720b17fcef",
          "linkedWithoutMetadata": "8ddcb0c21f8255a74593dde10cce70f7afacc5736a90d743a23df1720b17fcef"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "653193bb04b7e28c629707a437e2b62aadf4ceac3fd679ce72fc10b8822aa943",
          "withoutMetadata": "653193bb04b7e28c629707a437e2b62aadf4ceac3fd679ce72fc10b8822aa943",
          "linkedWithoutMetadata": "653193bb04b7e28c629707a437e2b62aadf4ceac3fd679ce72fc10b8822aa943"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "f338ba5821e6be44fac01174f84d98e4fb48d6e263159013420c8f06119f4d15",
          "withoutMetadata": "f338ba5821e6be44fac01174f84d98e4fb48d6e263159013420c8f06119f4d15",
          "linkedWithoutMetadata": "f338ba5821e6be44fac01174f84d98e4fb48d6e263159013420c8f06119f4d15"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "37fc82e5a28f4c38e2e4ec75b1d2d0988b70878d29168afd0b0f201941e94a15",
          "withoutMetadata": "37fc82e5a28f4c38e2e4ec75b1d2d0988b70878d29168afd0b0f201941e94a15",
          "linkedWithoutMetadata": "37fc82e5a28f4c38e2e4ec75b1d2d0988b70878d29168afd0b0f201941e94a15"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "d32100d5c8206933ddb0f8fc1c89c7a86faa9f95795a9f6274736828cd80cedb",
          "withoutMetadata": "d32100d5c8206933ddb0f8fc1c89c7a86faa9f95795a9f6274736828cd80cedb",
          "linkedWithoutMetadata": "d32100d5c8206933ddb0f8fc1c89c7a86faa9f95795a9f6274736828cd80cedb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1eb05d9c6ca150ec44cca5d8c3948064efe15a0ea6185b331bcb7a664023943f",
          "withoutMetadata": "1eb05d9c6ca150ec44cca5d8c3948064efe15a0ea6185b331bcb7a664023943f",
          "linkedWithoutMetadata": "1eb05d9c6ca150ec44cca5d8c3948064efe15a0ea6185b331bcb7a664023943f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "567616f0b4f328d9291782b37bc41be186b4c54741731ffcaa8309d9e8c0141a",
          "withoutMetadata": "567616f0b4f328d9291782b37bc41be186b4c54741731ffcaa8309d9e8c0141a",
          "linkedWithoutMetadata": "567616f0b4f328d9291782b37bc41be186b4c54741731ffcaa8309d9e8c0141a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "withoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "linkedWithoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "withoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "linkedWithoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "b46b65d6e32ebb91df639cecf7378b09c4fd5e130924d3cebd12e4205877fa3f",
          "withoutMetadata": "b46b65d6e32ebb91df639cecf7378b09c4fd5e130924d3cebd12e4205877fa3f",
          "linkedWithoutMetadata": "b46b65d6e32ebb91df639cecf7378b09c4fd5e130924d3cebd12e4205877fa3f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "withoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "linkedWithoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "1549b770b3e0a7dc15fd282d67cab0531775dc333f5145d9aea92cca6a4469b2",
          "withoutMetadata": "1549b770b3e0a7dc15fd282d67cab0531775dc333f5145d9aea92cca6a4469b2",
          "linkedWithoutMetadata": "1549b770b3e0a7dc15fd282d67cab0531775dc333f5145d9aea92cca6a4469b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "89190244d619729306e5bba6d3fd088c79d0aa8af53f61c33105ba1f3daf8a0e",
          "withoutMetadata": "89190244d619729306e5bba6d3fd088c79d0aa8af53f61c33105ba1f3daf8a0e",
          "linkedWithoutMetadata": "89190244d619729306e5bba6d3fd088c79d0aa8af53f61c33105ba1f3daf8a0e"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "08c51eda7f7d52ea71c66bb391ddadd7a2d5453c6b754739cd2de6d097d9502f",
          "withoutMetadata": "08c51eda7f7d52ea71c66bb391ddadd7a2d5453c6b754739cd2de6d097d9502f",
          "linkedWithoutMetadata": "08c51eda7f7d52ea71c66bb391ddadd7a2d5453c6b754739cd2de6d097d9502f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "3c83670d70a505b4a5c8a5e8db8cfca87e5b3c1f594b2713396a3cd61be76e0f",
          "withoutMetadata": "3c83670d70a505b4a5c8a5e8db8cfca87e5b3c1f594b2713396a3cd61be76e0f",
          "linkedWithoutMetadata": "3c83670d70a505b4a5c8a5e8db8cfca87e5b3c1f594b2713396a3cd61be76e0f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "0994c93789c95f981a7bb4cf4bc064406bc1df9d04bfab31d2d2edd7842d88a6",
          "withoutMetadata": "0994c93789c95f981a7bb4cf4bc064406bc1df9d04bfab31d2d2edd7842d88a6",
          "linkedWithoutMetadata": "0994c93789c95f981a7bb4cf4bc064406bc1df9d04bfab31d2d2edd7842d88a6"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "babfb1d62263a7a0da236d9f9283a7762aed39ecbbe4517f0c4953260feb24f9",
          "withoutMetadata": "babfb1d62263a7a0da236d9f9283a7762aed39ecbbe4517f0c4953260feb24f9",
          "linkedWithoutMetadata": "babfb1d62263a7a0da236d9f9283a7762aed39ecbbe4517f0c4953260feb24f9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19165",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19165": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "bec8afc3788f25501ea97dcd8b5fb3195c6a8633329c20b0c868e38e24bbf4f7",
          "withoutMetadata": "bec8afc3788f25501ea97dcd8b5fb3195c6a8633329c20b0c868e38e24bbf4f7",
          "linkedWithoutMetadata": "bec8afc3788f25501ea97dcd8b5fb3195c6a8633329c20b0c868e38e24bbf4f7"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "withoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "linkedWithoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "withoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "linkedWithoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "withoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "linkedWithoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "withoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "linkedWithoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "withoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "linkedWithoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "19bd431507bf04ac2fd05d96ff8d39952591a775814f4864cfa361683c57c45f",
          "withoutMetadata": "19bd431507bf04ac2fd05d96ff8d39952591a775814f4864cfa361683c57c45f",
          "linkedWithoutMetadata": "19bd431507bf04ac2fd05d96ff8d39952591a775814f4864cfa361683c57c45f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "withoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "linkedWithoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "withoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "linkedWithoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "54cd370f7e2000391020b4e5155a770405f7f45af15ac46b28995cce662e2e8c",
          "withoutMetadata": "54cd370f7e2000391020b4e5155a770405f7f45af15ac46b28995cce662e2e8c",
          "linkedWithoutMetadata": "54cd370f7e2000391020b4e5155a770405f7f45af15ac46b28995cce662e2e8c"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "withoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "linkedWithoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "withoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "linkedWithoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "withoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "linkedWithoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19030",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19030": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "c5d37d53367bdff0fcc6fceaff868774e7c61b022e8108097ee6b6756493cc93",
          "withoutMetadata": "c5d37d53367bdff0fcc6fceaff868774e7c61b022e8108097ee6b6756493cc93",
          "linkedWithoutMetadata": "c5d37d53367bdff0fcc6fceaff868774e7c61b022e8108097ee6b6756493cc93"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "withoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "linkedWithoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "2a180e2fc3502f5bed96da856ffd47d4e1ffe959330a8e073de218792f51daa1",
          "withoutMetadata": "2a180e2fc3502f5bed96da856ffd47d4e1ffe959330a8e073de218792f51daa1",
          "linkedWithoutMetadata": "2a180e2fc3502f5bed96da856ffd47d4e1ffe959330a8e073de218792f51daa1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)12_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "52358a30de26dc944fdfa3d83dcfa8257850059c625c48b19f1d42e1c3628af4",
          "withoutMetadata": "52358a30de26dc944fdfa3d83dcfa8257850059c625c48b19f1d42e1c3628af4",
          "linkedWithoutMetadata": "52358a30de26dc944fdfa3d83dcfa8257850059c625c48b19f1d42e1c3628af4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "withoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "linkedWithoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "withoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "linkedWithoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "withoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "linkedWithoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "withoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "linkedWithoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "withoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "linkedWithoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "withoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "linkedWithoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "0e9eeaaea4f519c4b81f0c87882b361f9ed071b8fca7d39d55c34f5d80b6f264",
          "withoutMetadata": "0e9eeaaea4f519c4b81f0c87882b361f9ed071b8fca7d39d55c34f5d80b6f264",
          "linkedWithoutMetadata": "0e9eeaaea4f519c4b81f0c87882b361f9ed071b8fca7d39d55c34f5d80b6f264"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "withoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "linkedWithoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "a49cd051b2ec7ac7a39107904c9ff77072fcaef7fff0d23a393dd17c61682111",
          "withoutMetadata": "a49cd051b2ec7ac7a39107904c9ff77072fcaef7fff0d23a393dd17c61682111",
          "linkedWithoutMetadata": "a49cd051b2ec7ac7a39107904c9ff77072fcaef7fff0d23a393dd17c61682111"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "533e822f385068361222dd8608668b7642f58cb52e51ecb65005f78f46c552ac",
          "withoutMetadata": "533e822f385068361222dd8608668b7642f58cb52e51ecb65005f78f46c552ac",
          "linkedWithoutMetadata": "533e822f385068361222dd8608668b7642f58cb52e51ecb65005f78f46c552ac"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "14b1b145f67c21e78dd5fc9faf5572b3733aa8d09b2f685a6257a18b8515ac38",
          "withoutMetadata": "14b1b145f67c21e78dd5fc9faf5572b3733aa8d09b2f685a6257a18b8515ac38",
          "linkedWithoutMetadata": "14b1b145f67c21e78dd5fc9faf5572b3733aa8d09b2f685a6257a18b8515ac38"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "fbe8f5ffa6bc58b65df9e8d3e0b3350bb854358c1384871225cc40c1a30150d8",
          "withoutMetadata": "fbe8f5ffa6bc58b65df9e8d3e0b3350bb854358c1384871225cc40c1a30150d8",
          "linkedWithoutMetadata": "fbe8f5ffa6bc58b65df9e8d3e0b3350bb854358c1384871225cc40c1a30150d8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "668092af79cd5a99594b0786b2f0c186322330500dbefd3666032ddb12249fb2",
          "withoutMetadata": "668092af79cd5a99594b0786b2f0c186322330500dbefd3666032ddb12249fb2",
          "linkedWithoutMetadata": "668092af79cd5a99594b0786b2f0c186322330500dbefd3666032ddb12249fb2"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "0e5ed68f310e0ec1b46308718783102465622d5e53920a21a310ceea115951d8",
          "withoutMetadata": "0e5ed68f310e0ec1b46308718783102465622d5e53920a21a310ceea115951d8",
          "linkedWithoutMetadata": "0e5ed68f310e0ec1b46308718783102465622d5e53920a21a310ceea115951d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "743d3ace9eb156fececf8b97a40e3bd5546a59b66af31a43bda53ed19ed5341b",
          "withoutMetadata": "743d3ace9eb156fececf8b97a40e3bd5546a59b66af31a43bda53ed19ed5341b",
          "linkedWithoutMetadata": "743d3ace9eb156fececf8b97a40e3bd5546a59b66af31a43bda53ed19ed5341b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "eef05ff5973603ffba048a03db42798c205131bf3bcf24b6df25002ed6633152",
          "withoutMetadata": "eef05ff5973603ffba048a03db42798c205131bf3bcf24b6df25002ed6633152",
          "linkedWithoutMetadata": "eef05ff5973603ffba048a03db42798c205131bf3bcf24b6df25002ed6633152"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6d5010e677883d42b3dd796803e645ea9b135b828df5165ac185ee3a8554f5c9",
          "withoutMetadata": "6d5010e677883d42b3dd796803e645ea9b135b828df5165ac185ee3a8554f5c9",
          "linkedWithoutMetadata": "6d5010e677883d42b3dd796803e645ea9b135b828df5165ac185ee3a8554f5c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "2f5e83f510768be8e1ee2f5e9bbe5305963f3030f52b6d2c3808fd4bdb22d509",
          "withoutMetadata": "2f5e83f510768be8e1ee2f5e9bbe5305963f3030f52b6d2c3808fd4bdb22d509",
          "linkedWithoutMetadata": "2f5e83f510768be8e1ee2f5e9bbe5305963f3030f52b6d2c3808fd4bdb22d509"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec51bf0920d7160f9f825eac9be1e92d091b0628eb4f3dd853c767784b4c2ec1",
          "withoutMetadata": "ec51bf0920d7160f9f825eac9be1e92d091b0628eb4f3dd853c767784b4c2ec1",
          "linkedWithoutMetadata": "ec51bf0920d7160f9f825eac9be1e92d091b0628eb4f3dd853c767784b4c2ec1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "8f9b76fd35d070aea38dcb81d8bc3f05c34ef7e9f822147300cd18d6cfc33b59",
          "withoutMetadata": "8f9b76fd35d070aea38dcb81d8bc3f05c34ef7e9f822147300cd18d6cfc33b59",
          "linkedWithoutMetadata": "8f9b76fd35d070aea38dcb81d8bc3f05c34ef7e9f822147300cd18d6cfc33b59"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "5b0d2c1798b2e4a11ce0d039ec946095906efc230338fc69e1eeb6feedd51559",
          "withoutMetadata": "5b0d2c1798b2e4a11ce0d039ec946095906efc230338fc69e1eeb6feedd51559",
          "linkedWithoutMetadata": "5b0d2c1798b2e4a11ce0d039ec946095906efc230338fc69e1eeb6feedd51559"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "0f9cfbef5a2049fa4f9021a8151c089f44be4bf73763e8e9238ca4de12b9d536",
          "withoutMetadata": "0f9cfbef5a2049fa4f9021a8151c089f44be4bf73763e8e9238ca4de12b9d536",
          "linkedWithoutMetadata": "0f9cfbef5a2049fa4f9021a8151c089f44be4bf73763e8e9238ca4de12b9d536"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "4cfeca13d8a319850eaa6e641b9099d1ac309385fd0e1d2206b5f08f58dc7623",
          "withoutMetadata": "4cfeca13d8a319850eaa6e641b9099d1ac309385fd0e1d2206b5f08f58dc7623",
          "linkedWithoutMetadata": "4cfeca13d8a319850eaa6e641b9099d1ac309385fd0e1d2206b5f08f58dc7623"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "30fd96550827116546532b2f46eef7d69affcb5c55e80792f61d40eec6cef0dd",
          "withoutMetadata": "30fd96550827116546532b2f46eef7d69affcb5c55e80792f61d40eec6cef0dd",
          "linkedWithoutMetadata": "30fd96550827116546532b2f46eef7d69affcb5c55e80792f61d40eec6cef0dd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "700fb9369af388c8845307973942522720b28b0ad332cd2cdbc798148c1a086c",
          "withoutMetadata": "700fb9369af388c8845307973942522720b28b0ad332cd2cdbc798148c1a086c",
          "linkedWithoutMetadata": "700fb9369af388c8845307973942522720b28b0ad332cd2cdbc798148c1a086c"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "52eb83ad3b3a7afc800733125cd771ecd86b4c569a7731a81a9e79ee424038da",
          "withoutMetadata": "52eb83ad3b3a7afc800733125cd771ecd86b4c569a7731a81a9e79ee424038da",
          "linkedWithoutMetadata": "52eb83ad3b3a7afc800733125cd771ecd86b4c569a7731a81a9e79ee424038da"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "7502afc376bcab812fcfcf74e2055ebb5698325748ecbe0bf85541a2749a02d6",
          "withoutMetadata": "7502afc376bcab812fcfcf74e2055ebb5698325748ecbe0bf85541a2749a02d6",
          "linkedWithoutMetadata": "7502afc376bcab812fcfcf74e2055ebb5698325748ecbe0bf85541a2749a02d6"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19170",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19170": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "65e6a0106be54dcb3dffbb33c282c910d2cd77433cf1f78964de567fcfd19eea",
          "withoutMetadata": "65e6a0106be54dcb3dffbb33c282c910d2cd77433cf1f78964de567fcfd19eea",
          "linkedWithoutMetadata": "65e6a0106be54dcb3dffbb33c282c910d2cd77433cf1f78964de567fcfd19eea"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "7ffab7cda1a5329a3da175c6a0d9064db5f5e1bdb99a3058a2e4e7ce4772337b",
          "withoutMetadata": "7ffab7cda1a5329a3da175c6a0d9064db5f5e1bdb99a3058a2e4e7ce4772337b",
          "linkedWithoutMetadata": "7ffab7cda1a5329a3da175c6a0d9064db5f5e1bdb99a3058a2e4e7ce4772337b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "withoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "linkedWithoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "withoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "linkedWithoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "withoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "linkedWithoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "withoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "linkedWithoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "1e10a933c4dd47956fe108f7e0dc3771a8ac74e8d9691bbfcf3e8d1bac914c73",
          "withoutMetadata": "1e10a933c4dd47956fe108f7e0dc3771a8ac74e8d9691bbfcf3e8d1bac914c73",
          "linkedWithoutMetadata": "1e10a933c4dd47956fe108f7e0dc3771a8ac74e8d9691bbfcf3e8d1bac914c73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "withoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "linkedWithoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "withoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "linkedWithoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "2b973b14651d520a9362544b382dd8159010dc24b7cde0b83ed2882dca32b7ef",
          "withoutMetadata": "2b973b14651d520a9362544b382dd8159010dc24b7cde0b83ed2882dca32b7ef",
          "linkedWithoutMetadata": "2b973b14651d520a9362544b382dd8159010dc24b7cde0b83ed2882dca32b7ef"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "db2085365aba0f7b1e3059bf8d55f2cdc8d6a336f0b669b74b2ff9504e3c65ff",
          "withoutMetadata": "db2085365aba0f7b1e3059bf8d55f2cdc8d6a336f0b669b74b2ff9504e3c65ff",
          "linkedWithoutMetadata": "db2085365aba0f7b1e3059bf8d55f2cdc8d6a336f0b669b74b2ff9504e3c65ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "a48e629aa1275d3b218b81700da0ee52fb32c863997e27b2de3c7de9abda2b22",
          "withoutMetadata": "a48e629aa1275d3b218b81700da0ee52fb32c863997e27b2de3c7de9abda2b22",
          "linkedWithoutMetadata": "a48e629aa1275d3b218b81700da0ee52fb32c863997e27b2de3c7de9abda2b22"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "f8dc87d7afccc03d5b084bdb298d8d52628648f3418a1d9696f8676c04a6381b",
          "withoutMetadata": "f8dc87d7afccc03d5b084bdb298d8d52628648f3418a1d9696f8676c04a6381b",
          "linkedWithoutMetadata": "f8dc87d7afccc03d5b084bdb298d8d52628648f3418a1d9696f8676c04a6381b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19035",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19035": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "522ae54bbf81aada25ca33fa602b99abd392617329a47bb2686d9d6137f299a8",
          "withoutMetadata": "522ae54bbf81aada25ca33fa602b99abd392617329a47bb2686d9d6137f299a8",
          "linkedWithoutMetadata": "522ae54bbf81aada25ca33fa602b99abd392617329a47bb2686d9d6137f299a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "withoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "linkedWithoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "c849f0dcb493404292f4f17cfd4f8db5cbec7ff1ebe286659339b9497e317388",
          "withoutMetadata": "c849f0dcb493404292f4f17cfd4f8db5cbec7ff1ebe286659339b9497e317388",
          "linkedWithoutMetadata": "c849f0dcb493404292f4f17cfd4f8db5cbec7ff1ebe286659339b9497e317388"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)12_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "ba22c3ff683ee32443cc7039267c64534f0f9e599c5b60b1d04bbed3f3fbbf2e",
          "withoutMetadata": "ba22c3ff683ee32443cc7039267c64534f0f9e599c5b60b1d04bbed3f3fbbf2e",
          "linkedWithoutMetadata": "ba22c3ff683ee32443cc7039267c64534f0f9e599c5b60b1d04bbed3f3fbbf2e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "withoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "linkedWithoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "withoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "linkedWithoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "withoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "linkedWithoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "withoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "linkedWithoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "withoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "linkedWithoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "withoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "linkedWithoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "cf6da2900cba269b789866b37ddc97593b5bd7d01bcb401b70af3650f6957cee",
          "withoutMetadata": "cf6da2900cba269b789866b37ddc97593b5bd7d01bcb401b70af3650f6957cee",
          "linkedWithoutMetadata": "cf6da2900cba269b789866b37ddc97593b5bd7d01bcb401b70af3650f6957cee"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "withoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "linkedWithoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "0710adccd6186c508b3337d7143b4b3676a411badb522a15680b50d553b3b280",
          "withoutMetadata": "0710adccd6186c508b3337d7143b4b3676a411badb522a15680b50d553b3b280",
          "linkedWithoutMetadata": "0710adccd6186c508b3337d7143b4b3676a411badb522a15680b50d553b3b280"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "927aa28e79593d46bc8a38916e88b25e91cde0654b7b3f93b503480c5df768c8",
          "withoutMetadata": "927aa28e79593d46bc8a38916e88b25e91cde0654b7b3f93b503480c5df768c8",
          "linkedWithoutMetadata": "927aa28e79593d46bc8a38916e88b25e91cde0654b7b3f93b503480c5df768c8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "52bd137a7612d59219f9127f090e8b543d1349b0dba17e6476bd28d2c139a4ef",
          "withoutMetadata": "52bd137a7612d59219f9127f090e8b543d1349b0dba17e6476bd28d2c139a4ef",
          "linkedWithoutMetadata": "52bd137a7612d59219f9127f090e8b543d1349b0dba17e6476bd28d2c139a4ef"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4dadc566b524f3b8fc1999b2f5585fe31c311e59431fdd3efda53415f9b4b766",
          "withoutMetadata": "4dadc566b524f3b8fc1999b2f5585fe31c311e59431fdd3efda53415f9b4b766",
          "linkedWithoutMetadata": "4dadc566b524f3b8fc1999b2f5585fe31c311e59431fdd3efda53415f9b4b766"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "847d7b56ab607bf2df6f9e69c7c731e65814a5ca9137e4dcd80179b657966f9e",
          "withoutMetadata": "847d7b56ab607bf2df6f9e69c7c731e65814a5ca9137e4dcd80179b657966f9e",
          "linkedWithoutMetadata": "847d7b56ab607bf2df6f9e69c7c731e65814a5ca9137e4dcd80179b657966f9e"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "ed43d693d6a2d13d434d29b7c77b2a251887b7b78fb30fb9c7bf396838b95e8d",
          "withoutMetadata": "ed43d693d6a2d13d434d29b7c77b2a251887b7b78fb30fb9c7bf396838b95e8d",
          "linkedWithoutMetadata": "ed43d693d6a2d13d434d29b7c77b2a251887b7b78fb30fb9c7bf396838b95e8d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "ae8c5e2fc06e12c838668b2d2ea5e626956fd76e63aaa32fb25f4bdb772ef0b9",
          "withoutMetadata": "ae8c5e2fc06e12c838668b2d2ea5e626956fd76e63aaa32fb25f4bdb772ef0b9",
          "linkedWithoutMetadata": "ae8c5e2fc06e12c838668b2d2ea5e626956fd76e63aaa32fb25f4bdb772ef0b9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "10db1687118500a3ec4dfb6e05dad345de42973a375bb3d132d3aa672dfc7b27",
          "withoutMetadata": "10db1687118500a3ec4dfb6e05dad345de42973a375bb3d132d3aa672dfc7b27",
          "linkedWithoutMetadata": "10db1687118500a3ec4dfb6e05dad345de42973a375bb3d132d3aa672dfc7b27"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "515c830f11581c656ff241a05f9860cd349a382362bfa89f0d10ed5cc6d910b1",
          "withoutMetadata": "515c830f11581c656ff241a05f9860cd349a382362bfa89f0d10ed5cc6d910b1",
          "linkedWithoutMetadata": "515c830f11581c656ff241a05f9860cd349a382362bfa89f0d10ed5cc6d910b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "12a997715372c977a84503f3d648cc870a1f69f10a603076c9f21b8dd4b42ed8",
          "withoutMetadata": "12a997715372c977a84503f3d648cc870a1f69f10a603076c9f21b8dd4b42ed8",
          "linkedWithoutMetadata": "12a997715372c977a84503f3d648cc870a1f69f10a603076c9f21b8dd4b42ed8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "bebfe0cf8af24d35753eb9ea3263b3e2d2cbb10001284ea48c091ff92a4f5bc1",
          "withoutMetadata": "bebfe0cf8af24d35753eb9ea3263b3e2d2cbb10001284ea48c091ff92a4f5bc1",
          "linkedWithoutMetadata": "bebfe0cf8af24d35753eb9ea3263b3e2d2cbb10001284ea48c091ff92a4f5bc1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "4d3c89e086da114952b7c939c29b97acedbad2e8913983677bf007476d8f89a2",
          "withoutMetadata": "4d3c89e086da114952b7c939c29b97acedbad2e8913983677bf007476d8f89a2",
          "linkedWithoutMetadata": "4d3c89e086da114952b7c939c29b97acedbad2e8913983677bf007476d8f89a2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "1094e707e064a77c8c38fd68eb37173187285193d143130179f031e608c28b11",
          "withoutMetadata": "1094e707e064a77c8c38fd68eb37173187285193d143130179f031e608c28b11",
          "linkedWithoutMetadata": "1094e707e064a77c8c38fd68eb37173187285193d143130179f031e608c28b11"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "f70bc225e4c0871d106f023949bd8ac5803e02d38717aa249c3e0e528eb18b2e",
          "withoutMetadata": "f70bc225e4c0871d106f023949bd8ac5803e02d38717aa249c3e0e528eb18b2e",
          "linkedWithoutMetadata": "f70bc225e4c0871d106f023949bd8ac5803e02d38717aa249c3e0e528eb18b2e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "fcc34dd3f255262fe78c0522218047a13af5c49c93d7bbb703c72ba2b3c0c163",
          "withoutMetadata": "fcc34dd3f255262fe78c0522218047a13af5c49c93d7bbb703c72ba2b3c0c163",
          "linkedWithoutMetadata": "fcc34dd3f255262fe78c0522218047a13af5c49c93d7bbb703c72ba2b3c0c163"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "45fa643382659cb24b5d7fc9b5e9c04a715686c69bc7b1bdc9dcaf7a4d77afa0",
          "withoutMetadata": "45fa643382659cb24b5d7fc9b5e9c04a715686c69bc7b1bdc9dcaf7a4d77afa0",
          "linkedWithoutMetadata": "45fa643382659cb24b5d7fc9b5e9c04a715686c69bc7b1bdc9dcaf7a4d77afa0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "11b0b1a57bdde15590430e6494064ce55c5fc51a51618d6eba0e454a0f941b06",
          "withoutMetadata": "11b0b1a57bdde15590430e6494064ce55c5fc51a51618d6eba0e454a0f941b06",
          "linkedWithoutMetadata": "11b0b1a57bdde15590430e6494064ce55c5fc51a51618d6eba0e454a0f941b06"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "f34e61cd1ba2ec82951fec8c5853b4eabf390567a28df9551f6ac3940e592633",
          "withoutMetadata": "f34e61cd1ba2ec82951fec8c5853b4eabf390567a28df9551f6ac3940e592633",
          "linkedWithoutMetadata": "f34e61cd1ba2ec82951fec8c5853b4eabf390567a28df9551f6ac3940e592633"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "5b6ecd574680290761a23f8a411e360c77aae3803b261c8fc7d894cc9ecd1370",
          "withoutMetadata": "5b6ecd574680290761a23f8a411e360c77aae3803b261c8fc7d894cc9ecd1370",
          "linkedWithoutMetadata": "5b6ecd574680290761a23f8a411e360c77aae3803b261c8fc7d894cc9ecd1370"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19170",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19170": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "34e02621f83a906d8f2b65fb71bae1e01249daef7341c8cb8f6d1f4bf33ec8ae",
          "withoutMetadata": "34e02621f83a906d8f2b65fb71bae1e01249daef7341c8cb8f6d1f4bf33ec8ae",
          "linkedWithoutMetadata": "34e02621f83a906d8f2b65fb71bae1e01249daef7341c8cb8f6d1f4bf33ec8ae"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "16a47f24ee374d5270428e69a3ad3bc925dfc761c07d7a15b4a90ad823daa8e2",
          "withoutMetadata": "16a47f24ee374d5270428e69a3ad3bc925dfc761c07d7a15b4a90ad823daa8e2",
          "linkedWithoutMetadata": "16a47f24ee374d5270428e69a3ad3bc925dfc761c07d7a15b4a90ad823daa8e2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "withoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "linkedWithoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "withoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "linkedWithoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "withoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "linkedWithoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "withoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "linkedWithoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "225f69651a5d33e5c6bf34c274a73eafa74b3ae9b8656a865186f9fd0743bb3c",
          "withoutMetadata": "225f69651a5d33e5c6bf34c274a73eafa74b3ae9b8656a865186f9fd0743bb3c",
          "linkedWithoutMetadata": "225f69651a5d33e5c6bf34c274a73eafa74b3ae9b8656a865186f9fd0743bb3c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "withoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "linkedWithoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "withoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "linkedWithoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "dbb61400f62bfe38959fef9b7639ec55b325025ce141ba2f35ce252a9a2beb7f",
          "withoutMetadata": "dbb61400f62bfe38959fef9b7639ec55b325025ce141ba2f35ce252a9a2beb7f",
          "linkedWithoutMetadata": "dbb61400f62bfe38959fef9b7639ec55b325025ce141ba2f35ce252a9a2beb7f"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "1f7cfca7739481b0dda1ccdc8d21d2fd3f6334cb130f99dc7964bba030d7322b",
          "withoutMetadata": "1f7cfca7739481b0dda1ccdc8d21d2fd3f6334cb130f99dc7964bba030d7322b",
          "linkedWithoutMetadata": "1f7cfca7739481b0dda1ccdc8d21d2fd3f6334cb130f99dc7964bba030d7322b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "81163243e6e3c6294d2b3f3b97b28092ef88a5b38100abf9eb0059981cd6b544",
          "withoutMetadata": "81163243e6e3c6294d2b3f3b97b28092ef88a5b38100abf9eb0059981cd6b544",
          "linkedWithoutMetadata": "81163243e6e3c6294d2b3f3b97b28092ef88a5b38100abf9eb0059981cd6b544"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "76207e21fe5b4c49479b5e9389403d2c03a336917eb6e8792b3fce6f2d9e2947",
          "withoutMetadata": "76207e21fe5b4c49479b5e9389403d2c03a336917eb6e8792b3fce6f2d9e2947",
          "linkedWithoutMetadata": "76207e21fe5b4c49479b5e9389403d2c03a336917eb6e8792b3fce6f2d9e2947"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19035",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19035": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "a82309266cf6fd516fa7936072a1617fef5e84774ded0089cf72ec97616cf4be",
          "withoutMetadata": "a82309266cf6fd516fa7936072a1617fef5e84774ded0089cf72ec97616cf4be",
          "linkedWithoutMetadata": "a82309266cf6fd516fa7936072a1617fef5e84774ded0089cf72ec97616cf4be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "withoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "linkedWithoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "ac7e6c0433957bc658a90ff2e215ba4e9e449143a9c7e714507ffb09f644c847",
          "withoutMetadata": "ac7e6c0433957bc658a90ff2e215ba4e9e449143a9c7e714507ffb09f644c847",
          "linkedWithoutMetadata": "ac7e6c0433957bc658a90ff2e215ba4e9e449143a9c7e714507ffb09f644c847"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "a514322f1639bc4b0521469e10e8dd9e284213a8788d25246b9955dfc4a282f8",
          "withoutMetadata": "a514322f1639bc4b0521469e10e8dd9e284213a8788d25246b9955dfc4a282f8",
          "linkedWithoutMetadata": "a514322f1639bc4b0521469e10e8dd9e284213a8788d25246b9955dfc4a282f8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "1d0c9bd8cfa041e3917040270eed70ba2650ec847f559a04b81e309eeb2251eb",
          "withoutMetadata": "1d0c9bd8cfa041e3917040270eed70ba2650ec847f559a04b81e309eeb2251eb",
          "linkedWithoutMetadata": "1d0c9bd8cfa041e3917040270eed70ba2650ec847f559a04b81e309eeb2251eb"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "78bd3de320cfc6475cba81b745516bc69373cdadee83f96f74347e5d6dce9dc9",
          "withoutMetadata": "78bd3de320cfc6475cba81b745516bc69373cdadee83f96f74347e5d6dce9dc9",
          "linkedWithoutMetadata": "78bd3de320cfc6475cba81b745516bc69373cdadee83f96f74347e5d6dce9dc9"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "129eca0b34578371e0808c816677a27e68d9819d862f480e372a98decfda58a4",
          "withoutMetadata": "129eca0b34578371e0808c816677a27e68d9819d862f480e372a98decfda58a4",
          "linkedWithoutMetadata": "129eca0b34578371e0808c816677a27e68d9819d862f480e372a98decfda58a4"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "f41de9c960fd88725b28484d2882c608d253cf260329d7da7448de0ed99e16b5",
          "withoutMetadata": "f41de9c960fd88725b28484d2882c608d253cf260329d7da7448de0ed99e16b5",
          "linkedWithoutMetadata": "f41de9c960fd88725b28484d2882c608d253cf260329d7da7448de0ed99e16b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "be935565ca117b6e01764b7ce535db17dd1a3d2cff52171e2e82bb1eb939f788",
          "withoutMetadata": "be935565ca117b6e01764b7ce535db17dd1a3d2cff52171e2e82bb1eb939f788",
          "linkedWithoutMetadata": "be935565ca117b6e01764b7ce535db17dd1a3d2cff52171e2e82bb1eb939f788"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1fba65b62b7f848468255d674549926e4f471e31c57dc38a57204627c5442429",
          "withoutMetadata": "1fba65b62b7f848468255d674549926e4f471e31c57dc38a57204627c5442429",
          "linkedWithoutMetadata": "1fba65b62b7f848468255d674549926e4f471e31c57dc38a57204627c5442429"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0b1e6e3fc5e107fb580a728d258341854f5dbf140b46573d7ec00827644fd0e6",
          "withoutMetadata": "0b1e6e3fc5e107fb580a728d258341854f5dbf140b46573d7ec00827644fd0e6",
          "linkedWithoutMetadata": "0b1e6e3fc5e107fb580a728d258341854f5dbf140b46573d7ec00827644fd0e6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "dc857da215ab19569e7c951b18fa0b5b96415e353a33378c7357cecc91f310c3",
          "withoutMetadata": "dc857da215ab19569e7c951b18fa0b5b96415e353a33378c7357cecc91f310c3",
          "linkedWithoutMetadata": "dc857da215ab19569e7c951b18fa0b5b96415e353a33378c7357cecc91f310c3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "0c8032689c89b7b3ce4d74698be2cb3160b61765a856d12e655bdcac1e757f83",
          "withoutMetadata": "0c8032689c89b7b3ce4d74698be2cb3160b61765a856d12e655bdcac1e757f83",
          "linkedWithoutMetadata": "0c8032689c89b7b3ce4d74698be2cb3160b61765a856d12e655bdcac1e757f83"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "92e90ce2ebc518dbb08f142c34e3762786e9fa343d4642305a03547eb2d385a0",
          "withoutMetadata": "92e90ce2ebc518dbb08f142c34e3762786e9fa343d4642305a03547eb2d385a0",
          "linkedWithoutMetadata": "92e90ce2ebc518dbb08f142c34e3762786e9fa343d4642305a03547eb2d385a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "a71c2b670659aa057781bb4e908933fbcad2f0449d07342636da8a9886bebc6c",
          "withoutMetadata": "a71c2b670659aa057781bb4e908933fbcad2f0449d07342636da8a9886bebc6c",
          "linkedWithoutMetadata": "a71c2b670659aa057781bb4e908933fbcad2f0449d07342636da8a9886bebc6c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "84f921fc81e578586dd06c084d2cd3efa338d2f38a1ba1abcd1d7ad2b9e11c15",
          "withoutMetadata": "84f921fc81e578586dd06c084d2cd3efa338d2f38a1ba1abcd1d7ad2b9e11c15",
          "linkedWithoutMetadata": "84f921fc81e578586dd06c084d2cd3efa338d2f38a1ba1abcd1d7ad2b9e11c15"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "713b9e53aad5b9cfc76131e2bb021be5b4f818e5a52cdbb83f6e07c42c8284aa",
          "withoutMetadata": "713b9e53aad5b9cfc76131e2bb021be5b4f818e5a52cdbb83f6e07c42c8284aa",
          "linkedWithoutMetadata": "713b9e53aad5b9cfc76131e2bb021be5b4f818e5a52cdbb83f6e07c42c8284aa"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "f9b7c25a237c9994064e1ff7504b51da3294b691a3b45fd931b267f1aba2680b",
          "withoutMetadata": "f9b7c25a237c9994064e1ff7504b51da3294b691a3b45fd931b267f1aba2680b",
          "linkedWithoutMetadata": "f9b7c25a237c9994064e1ff7504b51da3294b691a3b45fd931b267f1aba2680b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "7d6c9934d7c4859c831ec234ab72ad33cf2895577df043554c0d2406a67e7eff",
          "withoutMetadata": "7d6c9934d7c4859c831ec234ab72ad33cf2895577df043554c0d2406a67e7eff",
          "linkedWithoutMetadata": "7d6c9934d7c4859c831ec234ab72ad33cf2895577df043554c0d2406a67e7eff"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "e496651af5675bb3209b7ccbd52078bc48e44cbb8315f5d3dacf52dd421db361",
          "withoutMetadata": "e496651af5675bb3209b7ccbd52078bc48e44cbb8315f5d3dacf52dd421db361",
          "linkedWithoutMetadata": "e496651af5675bb3209b7ccbd52078bc48e44cbb8315f5d3dacf52dd421db361"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "b8efd4d80abf9adc1ec7d03b072acab0657d3bbbf40e903b4c5bdfac32e3d285",
          "withoutMetadata": "b8efd4d80abf9adc1ec7d03b072acab0657d3bbbf40e903b4c5bdfac32e3d285",
          "linkedWithoutMetadata": "b8efd4d80abf9adc1ec7d03b072acab0657d3bbbf40e903b4c5bdfac32e3d285"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19170",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19170": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "d876b48112bfed7581289bb919c335df42593bfe4912a7f452d9512fa0402a84",
          "withoutMetadata": "d876b48112bfed7581289bb919c335df42593bfe4912a7f452d9512fa0402a84",
          "linkedWithoutMetadata": "d876b48112bfed7581289bb919c335df42593bfe4912a7f452d9512fa0402a84"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "8481950e5acc67792d672555e46b98e40ea67bea3a7e0cb30f2f9d6f75be5b2a",
          "withoutMetadata": "8481950e5acc67792d672555e46b98e40ea67bea3a7e0cb30f2f9d6f75be5b2a",
          "linkedWithoutMetadata": "8481950e5acc67792d672555e46b98e40ea67bea3a7e0cb30f2f9d6f75be5b2a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "5c55c9e04e4ce8caa8a0c9c85afc6633ce5ea4c303b55e8bf18d4fc3abf9fc9c",
          "withoutMetadata": "5c55c9e04e4ce8caa8a0c9c85afc6633ce5ea4c303b55e8bf18d4fc3abf9fc9c",
          "linkedWithoutMetadata": "5c55c9e04e4ce8caa8a0c9c85afc6633ce5ea4c303b55e8bf18d4fc3abf9fc9c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "885b74a88c82f4796d64235258d4ab014d765b960c07c27078d9c3e9ee3eb7b5",
          "withoutMetadata": "885b74a88c82f4796d64235258d4ab014d765b960c07c27078d9c3e9ee3eb7b5",
          "linkedWithoutMetadata": "885b74a88c82f4796d64235258d4ab014d765b960c07c27078d9c3e9ee3eb7b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "100f81aeecebd66276c299a39de6dd14a35af899a574c7500c454784b4f27d31",
          "withoutMetadata": "100f81aeecebd66276c299a39de6dd14a35af899a574c7500c454784b4f27d31",
          "linkedWithoutMetadata": "100f81aeecebd66276c299a39de6dd14a35af899a574c7500c454784b4f27d31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "4ef307f33e839aa5a86a6c2b066da6e4689195a2be1018d48d1d0f64472fe401",
          "withoutMetadata": "4ef307f33e839aa5a86a6c2b066da6e4689195a2be1018d48d1d0f64472fe401",
          "linkedWithoutMetadata": "4ef307f33e839aa5a86a6c2b066da6e4689195a2be1018d48d1d0f64472fe401"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "73d4b30486d6861250f5a62180f65ff54495979be5f4f4073cb8c0ebe1a247c0",
          "withoutMetadata": "73d4b30486d6861250f5a62180f65ff54495979be5f4f4073cb8c0ebe1a247c0",
          "linkedWithoutMetadata": "73d4b30486d6861250f5a62180f65ff54495979be5f4f4073cb8c0ebe1a247c0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "c1a6d125b3ad9d8f0d84c91881c476c593acdb8c98c11745d5712b37be0b38e5",
          "withoutMetadata": "c1a6d125b3ad9d8f0d84c91881c476c593acdb8c98c11745d5712b37be0b38e5",
          "linkedWithoutMetadata": "c1a6d125b3ad9d8f0d84c91881c476c593acdb8c98c11745d5712b37be0b38e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "da5b86fa53bfc88f45b27e20c2e8acd83c206fbe218784d024ec5829de9261be",
          "withoutMetadata": "da5b86fa53bfc88f45b27e20c2e8acd83c206fbe218784d024ec5829de9261be",
          "linkedWithoutMetadata": "da5b86fa53bfc88f45b27e20c2e8acd83c206fbe218784d024ec5829de9261be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "50b5a707d0d3a4343e671bc204a6f512fe64b3ef39f1f3a669b063bdfde73040",
          "withoutMetadata": "50b5a707d0d3a4343e671bc204a6f512fe64b3ef39f1f3a669b063bdfde73040",
          "linkedWithoutMetadata": "50b5a707d0d3a4343e671bc204a6f512fe64b3ef39f1f3a669b063bdfde73040"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "569be4d8a8cf230068064e09586bb72810a9121ef435efad88cfa02b245343c7",
          "withoutMetadata": "569be4d8a8cf230068064e09586bb72810a9121ef435efad88cfa02b245343c7",
          "linkedWithoutMetadata": "569be4d8a8cf230068064e09586bb72810a9121ef435efad88cfa02b245343c7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "4b6f793df2646a91f222066a8352d59f5aae1103b6a4e23c7be0850f72edc50b",
          "withoutMetadata": "4b6f793df2646a91f222066a8352d59f5aae1103b6a4e23c7be0850f72edc50b",
          "linkedWithoutMetadata": "4b6f793df2646a91f222066a8352d59f5aae1103b6a4e23c7be0850f72edc50b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "e7ba52d32c1fb30761b6980e710b1cf9ff6d7729034da03203c9ab98c29a1b11",
          "withoutMetadata": "e7ba52d32c1fb30761b6980e710b1cf9ff6d7729034da03203c9ab98c29a1b11",
          "linkedWithoutMetadata": "e7ba52d32c1fb30761b6980e710b1cf9ff6d7729034da03203c9ab98c29a1b11"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19035",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19035": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "89fcebbc7824b161948803f2213af53c9545f614125a1f413b0819c32fd7250c",
          "withoutMetadata": "89fcebbc7824b161948803f2213af53c9545f614125a1f413b0819c32fd7250c",
          "linkedWithoutMetadata": "89fcebbc7824b161948803f2213af53c9545f614125a1f413b0819c32fd7250c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "96079867502464858bfed5f5dfbef291a9bfcc7c0271e95ca579773b35004708",
          "withoutMetadata": "96079867502464858bfed5f5dfbef291a9bfcc7c0271e95ca579773b35004708",
          "linkedWithoutMetadata": "96079867502464858bfed5f5dfbef291a9bfcc7c0271e95ca579773b35004708"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}