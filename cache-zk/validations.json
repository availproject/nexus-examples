{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "withoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "linkedWithoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "withoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "linkedWithoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "withoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "linkedWithoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "0dd1d67d927c8931517632ec1768818469fd1f0ab210aa644c322c8bff8d1486",
          "withoutMetadata": "0dd1d67d927c8931517632ec1768818469fd1f0ab210aa644c322c8bff8d1486",
          "linkedWithoutMetadata": "0dd1d67d927c8931517632ec1768818469fd1f0ab210aa644c322c8bff8d1486"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "getLockedNFT(uint256)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,uint256,address,address,address,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes,uint256)",
          "withdrawNFT(uint256,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)11403",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockedNFTs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(LockedNFT)3269_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(INexusMailbox)11403": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(LockedNFT)3269_storage)": {
              "label": "mapping(uint256 => struct LockedNFT)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockedNFT)3269_storage": {
              "label": "struct LockedNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "paymentReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "paymentFrom",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "nftReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "withoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "linkedWithoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "withoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "linkedWithoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "withoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "linkedWithoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "withoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "linkedWithoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "a658b7f15746c90ade08fe1d733dc1a3b636c740ba717133f55275fb24f2faa4",
          "withoutMetadata": "a658b7f15746c90ade08fe1d733dc1a3b636c740ba717133f55275fb24f2faa4",
          "linkedWithoutMetadata": "a658b7f15746c90ade08fe1d733dc1a3b636c740ba717133f55275fb24f2faa4"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "getLockedNFT(uint256)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,uint256,address,address,address,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes,uint256)",
          "withdrawNFT(uint256,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)11403",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockedNFTs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(LockedNFT)3269_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(INexusMailbox)11403": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(LockedNFT)3269_storage)": {
              "label": "mapping(uint256 => struct LockedNFT)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockedNFT)3269_storage": {
              "label": "struct LockedNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "paymentReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "paymentFrom",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "nftReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "withoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "linkedWithoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "9d6f0a1daec0ea02bf4eb9e2c01564a87c175b43dfa9dac3f6dfca27ac5ad700",
          "withoutMetadata": "9d6f0a1daec0ea02bf4eb9e2c01564a87c175b43dfa9dac3f6dfca27ac5ad700",
          "linkedWithoutMetadata": "9d6f0a1daec0ea02bf4eb9e2c01564a87c175b43dfa9dac3f6dfca27ac5ad700"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "getStorageLocationForReceipt(bytes32)",
          "pay(address,uint256,uint256,address)",
          "getCurrentNonce(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)347",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "accountNonce",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)347": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "89aba0b78637d110437e854865ced174e628121230eacb793b5ae08607c1e5c1",
          "withoutMetadata": "89aba0b78637d110437e854865ced174e628121230eacb793b5ae08607c1e5c1",
          "linkedWithoutMetadata": "89aba0b78637d110437e854865ced174e628121230eacb793b5ae08607c1e5c1"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "408b16aabad944104d92b9a31be3a533826a13124efa953b255c575ea60806df",
          "withoutMetadata": "408b16aabad944104d92b9a31be3a533826a13124efa953b255c575ea60806df",
          "linkedWithoutMetadata": "408b16aabad944104d92b9a31be3a533826a13124efa953b255c575ea60806df"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "d4a1b85af56593aae0787a67fc74967976e89d2fbd8338cf7719aa37267234a9",
          "withoutMetadata": "d4a1b85af56593aae0787a67fc74967976e89d2fbd8338cf7719aa37267234a9",
          "linkedWithoutMetadata": "d4a1b85af56593aae0787a67fc74967976e89d2fbd8338cf7719aa37267234a9"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "17e94de44da27b012d24b06bd22b378787f2e4a822a2bd6574b751eb85f3703d",
          "withoutMetadata": "17e94de44da27b012d24b06bd22b378787f2e4a822a2bd6574b751eb85f3703d",
          "linkedWithoutMetadata": "17e94de44da27b012d24b06bd22b378787f2e4a822a2bd6574b751eb85f3703d"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "f14f20d153b22d8e9a7d39339acabb52149fdc61ca88029aa78ad329fc1d0dba",
          "withoutMetadata": "f14f20d153b22d8e9a7d39339acabb52149fdc61ca88029aa78ad329fc1d0dba",
          "linkedWithoutMetadata": "f14f20d153b22d8e9a7d39339acabb52149fdc61ca88029aa78ad329fc1d0dba"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "e218dc94bc6366f3f0a7ae292d0c9d3fef650aa7e174e45971d026822d1339d8",
          "withoutMetadata": "e218dc94bc6366f3f0a7ae292d0c9d3fef650aa7e174e45971d026822d1339d8",
          "linkedWithoutMetadata": "e218dc94bc6366f3f0a7ae292d0c9d3fef650aa7e174e45971d026822d1339d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e934a57cb61cfd430697bdafbd1f065cb9dbaaee155029fdcb96bd13a728edd3",
          "withoutMetadata": "e934a57cb61cfd430697bdafbd1f065cb9dbaaee155029fdcb96bd13a728edd3",
          "linkedWithoutMetadata": "e934a57cb61cfd430697bdafbd1f065cb9dbaaee155029fdcb96bd13a728edd3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1",
          "withoutMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1",
          "linkedWithoutMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034",
          "withoutMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034",
          "linkedWithoutMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "withoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "linkedWithoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "withoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "linkedWithoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e",
          "withoutMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e",
          "linkedWithoutMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "withoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "linkedWithoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/bridge/NexusBridge.sol:19",
        "version": {
          "withMetadata": "fff2dce649132907db1dded90a6bfef5937aea7f914e1f2e06cc522e674bd9fe",
          "withoutMetadata": "fff2dce649132907db1dded90a6bfef5937aea7f914e1f2e06cc522e674bd9fe",
          "linkedWithoutMetadata": "fff2dce649132907db1dded90a6bfef5937aea7f914e1f2e06cc522e674bd9fe"
        },
        "inherit": [
          "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:30"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:32"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:34"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:36"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10680",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:38"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)21265",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:39"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)21805",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:40"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:41"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:43"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:44"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)21805": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10680": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)21265": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899",
          "withoutMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899",
          "linkedWithoutMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "4d5424f31a61c5e6dac0058d63850a9c9db9cd2fb04092bbae3b3d8eb5c84371",
          "withoutMetadata": "4d5424f31a61c5e6dac0058d63850a9c9db9cd2fb04092bbae3b3d8eb5c84371",
          "linkedWithoutMetadata": "4d5424f31a61c5e6dac0058d63850a9c9db9cd2fb04092bbae3b3d8eb5c84371"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "b1ca756ae56c7f638e914e0fb10b097b970473810f879f132acdd5a62a33c631",
          "withoutMetadata": "b1ca756ae56c7f638e914e0fb10b097b970473810f879f132acdd5a62a33c631",
          "linkedWithoutMetadata": "b1ca756ae56c7f638e914e0fb10b097b970473810f879f132acdd5a62a33c631"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "a03c8742bf1e5bf23e1ece37031d643774b4c8843208f245b6b623b89f33946c",
          "withoutMetadata": "a03c8742bf1e5bf23e1ece37031d643774b4c8843208f245b6b623b89f33946c",
          "linkedWithoutMetadata": "a03c8742bf1e5bf23e1ece37031d643774b4c8843208f245b6b623b89f33946c"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "getLockedNFT(uint256)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,uint256,address,address,address,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes,uint256)",
          "withdrawNFT(uint256,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)21224",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockedNFTs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(LockedNFT)11663_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(INexusMailbox)21224": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(LockedNFT)11663_storage)": {
              "label": "mapping(uint256 => struct LockedNFT)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockedNFT)11663_storage": {
              "label": "struct LockedNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "paymentReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "paymentFrom",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "nftReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "5cf376a50909081d9c13ad2a339566f7ace1cd043158d84c7de42d652e857768",
          "withoutMetadata": "5cf376a50909081d9c13ad2a339566f7ace1cd043158d84c7de42d652e857768",
          "linkedWithoutMetadata": "5cf376a50909081d9c13ad2a339566f7ace1cd043158d84c7de42d652e857768"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "getStorageLocationForReceipt(bytes32)",
          "pay(address,uint256,uint256,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)21224",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            }
          ],
          "types": {
            "t_contract(INexusMailbox)21224": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/Token.sol:Token": {
        "src": "contracts/zknft-mailbox/Token.sol:7",
        "version": {
          "withMetadata": "f94be27792e5b9bf66b94f96d04c748e6663a526588865e2e5c257e4abf82ebd",
          "withoutMetadata": "f94be27792e5b9bf66b94f96d04c748e6663a526588865e2e5c257e4abf82ebd",
          "linkedWithoutMetadata": "f94be27792e5b9bf66b94f96d04c748e6663a526588865e2e5c257e4abf82ebd"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/zknft-mailbox/Token.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:21",
        "version": {
          "withMetadata": "010d96ac33c02f2e496795b90b8f2ba949ad0451b229a3bae20dc0768c04ea7e",
          "withoutMetadata": "010d96ac33c02f2e496795b90b8f2ba949ad0451b229a3bae20dc0768c04ea7e",
          "linkedWithoutMetadata": "010d96ac33c02f2e496795b90b8f2ba949ad0451b229a3bae20dc0768c04ea7e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,bytes32,bytes32[],uint256,uint64))",
          "verifyPayment((uint64,address,bytes32,bytes32[],uint256,uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:22"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:23"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:25"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)21265",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:26"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)28429",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)21265": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)28429": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/zknft/NftPayment.sol:9",
        "version": {
          "withMetadata": "851d290fd0833f51712baf7a0b9f4cc8d15a369bfb02e1b4895cc8bf0b65ff3e",
          "withoutMetadata": "851d290fd0833f51712baf7a0b9f4cc8d15a369bfb02e1b4895cc8bf0b65ff3e",
          "linkedWithoutMetadata": "851d290fd0833f51712baf7a0b9f4cc8d15a369bfb02e1b4895cc8bf0b65ff3e"
        },
        "inherit": [
          "nexus/verification/ethereum/Verifier.sol:EthereumVerifier",
          "nexus/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/zknft/NftPayment.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/zknft/NftPayment.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)21265",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:10"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:12"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:15"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:20"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PaymentReceipt)11955_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PaymentReceipt)11955_storage)dyn_storage": {
              "label": "struct NFTPayment.PaymentReceipt[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)21265": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PaymentReceipt)11955_storage": {
              "label": "struct NFTPayment.PaymentReceipt",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/Payment.sol:Payment": {
        "src": "contracts/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "withoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "linkedWithoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusMailbox.sol:NexusMailbox": {
        "src": "nexus/NexusMailbox.sol:10",
        "version": {
          "withMetadata": "2c4703d9cba159c03326313a51fda18be1d792573e8f96e03188a659aaebb346",
          "withoutMetadata": "2c4703d9cba159c03326313a51fda18be1d792573e8f96e03188a659aaebb346",
          "linkedWithoutMetadata": "2c4703d9cba159c03326313a51fda18be1d792573e8f96e03188a659aaebb346"
        },
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "nexus/interfaces/INexusMailbox.sol:INexusMailbox"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes32)",
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)",
          "addOrUpdateWrapper(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "messages",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:15"
            },
            {
              "label": "verifierWrappers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21291)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:16"
            },
            {
              "label": "verifiedReceipts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(MailboxMessage)21182_storage)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:17"
            },
            {
              "label": "nexusAppID",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(INexusVerifierWrapper)21291": {
              "label": "contract INexusVerifierWrapper",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21291)": {
              "label": "mapping(bytes32 => contract INexusVerifierWrapper)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(MailboxMessage)21182_storage)": {
              "label": "mapping(bytes32 => struct MailboxMessage)",
              "numberOfBytes": "32"
            },
            "t_struct(MailboxMessage)21182_storage": {
              "label": "struct MailboxMessage",
              "members": [
                {
                  "label": "nexusAppIDFrom",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nexusAppIDTo",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusProofManager.sol:NexusProofManager": {
        "src": "nexus/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "b85c7e0687ce65a3dcd1488be95377def647ec8a434096747a64fbc898e0ea40",
          "withoutMetadata": "b85c7e0687ce65a3dcd1488be95377def647ec8a434096747a64fbc898e0ea40",
          "linkedWithoutMetadata": "b85c7e0687ce65a3dcd1488be95377def647ec8a434096747a64fbc898e0ea40"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "nexus/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)20931_storage)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)20931_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)20931_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusReceiver.sol:INexusReceiver": {
        "src": "nexus/interfaces/INexusReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onNexusMessage(bytes32,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusVerifierWrapper.sol:INexusVerifierWrapper": {
        "src": "nexus/interfaces/INexusVerifierWrapper.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "parseAndVerify(uint256,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "nexus/lib/JellyfishMerkleTreeVerifier.sol:4",
        "version": {
          "withMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee",
          "withoutMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee",
          "linkedWithoutMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "nexus/verification/ethereum/StorageProof.sol:7",
        "version": {
          "withMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c",
          "withoutMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c",
          "linkedWithoutMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "nexus/verification/ethereum/Verifier.sol:7",
        "version": {
          "withMetadata": "da0c4e9818f900c4c1e878b76bf7bc1c4271fffbbfa38dfa9de905cd2fe99502",
          "withoutMetadata": "da0c4e9818f900c4c1e878b76bf7bc1c4271fffbbfa38dfa9de905cd2fe99502",
          "linkedWithoutMetadata": "da0c4e9818f900c4c1e878b76bf7bc1c4271fffbbfa38dfa9de905cd2fe99502"
        },
        "inherit": [
          "nexus/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "nexus/verification/ethereum/Verifier.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "nexus/verification/ethereum/Verifier.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77",
          "withoutMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77",
          "linkedWithoutMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:11",
        "version": {
          "withMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d",
          "withoutMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d",
          "linkedWithoutMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14",
          "withoutMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14",
          "linkedWithoutMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:10",
        "version": {
          "withMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586",
          "withoutMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586",
          "linkedWithoutMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40",
          "withoutMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40",
          "linkedWithoutMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "withoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "linkedWithoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "withoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "linkedWithoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:23",
        "version": {
          "withMetadata": "8be08f15398f8a398b14c20fb657324f89f6c8d437d05735d529c32098b11d96",
          "withoutMetadata": "8be08f15398f8a398b14c20fb657324f89f6c8d437d05735d529c32098b11d96",
          "linkedWithoutMetadata": "8be08f15398f8a398b14c20fb657324f89f6c8d437d05735d529c32098b11d96"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,bytes32,bytes32[],uint64),uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)28333",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:25"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)28333": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      }
    }
  ]
}