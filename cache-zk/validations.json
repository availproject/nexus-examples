{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "withoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "linkedWithoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "withoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "linkedWithoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "withoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "linkedWithoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:21",
        "version": {
          "withMetadata": "010d96ac33c02f2e496795b90b8f2ba949ad0451b229a3bae20dc0768c04ea7e",
          "withoutMetadata": "010d96ac33c02f2e496795b90b8f2ba949ad0451b229a3bae20dc0768c04ea7e",
          "linkedWithoutMetadata": "010d96ac33c02f2e496795b90b8f2ba949ad0451b229a3bae20dc0768c04ea7e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,bytes32,bytes32[],uint256,uint64))",
          "verifyPayment((uint64,address,bytes32,bytes32[],uint256,uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:22"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:23"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:25"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11127",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:26"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)14040",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11127": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)14040": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "withoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "linkedWithoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "withoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "linkedWithoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "withoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "linkedWithoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:23",
        "version": {
          "withMetadata": "8be08f15398f8a398b14c20fb657324f89f6c8d437d05735d529c32098b11d96",
          "withoutMetadata": "8be08f15398f8a398b14c20fb657324f89f6c8d437d05735d529c32098b11d96",
          "linkedWithoutMetadata": "8be08f15398f8a398b14c20fb657324f89f6c8d437d05735d529c32098b11d96"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,bytes32,bytes32[],uint64),uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)13944",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:25"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)13944": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1",
          "withoutMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1",
          "linkedWithoutMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034",
          "withoutMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034",
          "linkedWithoutMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "withoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "linkedWithoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "withoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "linkedWithoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e",
          "withoutMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e",
          "linkedWithoutMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "withoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "linkedWithoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/bridge/NexusBridge.sol:19",
        "version": {
          "withMetadata": "fff2dce649132907db1dded90a6bfef5937aea7f914e1f2e06cc522e674bd9fe",
          "withoutMetadata": "fff2dce649132907db1dded90a6bfef5937aea7f914e1f2e06cc522e674bd9fe",
          "linkedWithoutMetadata": "fff2dce649132907db1dded90a6bfef5937aea7f914e1f2e06cc522e674bd9fe"
        },
        "inherit": [
          "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:30"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:32"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:34"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:36"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)8374",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:38"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)18813",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:39"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)19353",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:40"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:41"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:43"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:44"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)19353": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)8374": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)18813": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899",
          "withoutMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899",
          "linkedWithoutMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "df41882959b12971f4ad95eff4f48bdfd64f91003f5a6c55ae7ab4f8fc69e0af",
          "withoutMetadata": "df41882959b12971f4ad95eff4f48bdfd64f91003f5a6c55ae7ab4f8fc69e0af",
          "linkedWithoutMetadata": "df41882959b12971f4ad95eff4f48bdfd64f91003f5a6c55ae7ab4f8fc69e0af"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,uint256,address,address,address,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes,uint256)",
          "withdrawNFT(uint256,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)18772",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockedNFTs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(LockedNFT)9242_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(INexusMailbox)18772": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(LockedNFT)9242_storage)": {
              "label": "mapping(uint256 => struct LockedNFT)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockedNFT)9242_storage": {
              "label": "struct LockedNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "paymentReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "paymentFrom",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "nftReceiver",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "5d212296959309b413cf6781c9055379fdfcfa33aaa24a833707fe35136de8d2",
          "withoutMetadata": "5d212296959309b413cf6781c9055379fdfcfa33aaa24a833707fe35136de8d2",
          "linkedWithoutMetadata": "5d212296959309b413cf6781c9055379fdfcfa33aaa24a833707fe35136de8d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,address)",
          "getCurrentNonce(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)18772",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "accountNonce",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)18772": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "7ea48533b83ee3bbc8d8c1881f24bfbc3e5c3a742327ba0889997da084db529e",
          "withoutMetadata": "7ea48533b83ee3bbc8d8c1881f24bfbc3e5c3a742327ba0889997da084db529e",
          "linkedWithoutMetadata": "7ea48533b83ee3bbc8d8c1881f24bfbc3e5c3a742327ba0889997da084db529e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)18813",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)25978",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)18813": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)25978": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/zknft/NftPayment.sol:9",
        "version": {
          "withMetadata": "851d290fd0833f51712baf7a0b9f4cc8d15a369bfb02e1b4895cc8bf0b65ff3e",
          "withoutMetadata": "851d290fd0833f51712baf7a0b9f4cc8d15a369bfb02e1b4895cc8bf0b65ff3e",
          "linkedWithoutMetadata": "851d290fd0833f51712baf7a0b9f4cc8d15a369bfb02e1b4895cc8bf0b65ff3e"
        },
        "inherit": [
          "nexus/verification/ethereum/Verifier.sol:EthereumVerifier",
          "nexus/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/zknft/NftPayment.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/zknft/NftPayment.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)18813",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:10"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:12"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:15"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:20"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PaymentReceipt)9506_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PaymentReceipt)9506_storage)dyn_storage": {
              "label": "struct NFTPayment.PaymentReceipt[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)18813": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PaymentReceipt)9506_storage": {
              "label": "struct NFTPayment.PaymentReceipt",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/Payment.sol:Payment": {
        "src": "contracts/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "withoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "linkedWithoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusMailbox.sol:NexusMailbox": {
        "src": "nexus/NexusMailbox.sol:10",
        "version": {
          "withMetadata": "6e900752ccd9803218597c01e57c9fffdc3af0cd1bd6b2812dbe197cb9fe645d",
          "withoutMetadata": "6e900752ccd9803218597c01e57c9fffdc3af0cd1bd6b2812dbe197cb9fe645d",
          "linkedWithoutMetadata": "6e900752ccd9803218597c01e57c9fffdc3af0cd1bd6b2812dbe197cb9fe645d"
        },
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "nexus/interfaces/INexusMailbox.sol:INexusMailbox"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes32)",
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)",
          "addOrUpdateWrapper(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "messages",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:15"
            },
            {
              "label": "verifierWrappers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)18839)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:16"
            },
            {
              "label": "verifiedReceipts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(MailboxMessage)18732_storage)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:17"
            },
            {
              "label": "nexusAppID",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(INexusVerifierWrapper)18839": {
              "label": "contract INexusVerifierWrapper",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)18839)": {
              "label": "mapping(bytes32 => contract INexusVerifierWrapper)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(MailboxMessage)18732_storage)": {
              "label": "mapping(bytes32 => struct MailboxMessage)",
              "numberOfBytes": "32"
            },
            "t_struct(MailboxMessage)18732_storage": {
              "label": "struct MailboxMessage",
              "members": [
                {
                  "label": "nexusAppIDFrom",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nexusAppIDTo",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusProofManager.sol:NexusProofManager": {
        "src": "nexus/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "b85c7e0687ce65a3dcd1488be95377def647ec8a434096747a64fbc898e0ea40",
          "withoutMetadata": "b85c7e0687ce65a3dcd1488be95377def647ec8a434096747a64fbc898e0ea40",
          "linkedWithoutMetadata": "b85c7e0687ce65a3dcd1488be95377def647ec8a434096747a64fbc898e0ea40"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "nexus/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)18481_storage)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)18481_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)18481_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusReceiver.sol:INexusReceiver": {
        "src": "nexus/interfaces/INexusReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onNexusMessage(bytes32,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusVerifierWrapper.sol:INexusVerifierWrapper": {
        "src": "nexus/interfaces/INexusVerifierWrapper.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "parseAndVerify(uint256,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "nexus/lib/JellyfishMerkleTreeVerifier.sol:4",
        "version": {
          "withMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee",
          "withoutMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee",
          "linkedWithoutMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "nexus/verification/ethereum/StorageProof.sol:7",
        "version": {
          "withMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c",
          "withoutMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c",
          "linkedWithoutMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "nexus/verification/ethereum/Verifier.sol:7",
        "version": {
          "withMetadata": "da0c4e9818f900c4c1e878b76bf7bc1c4271fffbbfa38dfa9de905cd2fe99502",
          "withoutMetadata": "da0c4e9818f900c4c1e878b76bf7bc1c4271fffbbfa38dfa9de905cd2fe99502",
          "linkedWithoutMetadata": "da0c4e9818f900c4c1e878b76bf7bc1c4271fffbbfa38dfa9de905cd2fe99502"
        },
        "inherit": [
          "nexus/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "nexus/verification/ethereum/Verifier.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "nexus/verification/ethereum/Verifier.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77",
          "withoutMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77",
          "linkedWithoutMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:11",
        "version": {
          "withMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d",
          "withoutMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d",
          "linkedWithoutMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14",
          "withoutMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14",
          "linkedWithoutMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:10",
        "version": {
          "withMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586",
          "withoutMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586",
          "linkedWithoutMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40",
          "withoutMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40",
          "linkedWithoutMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "withoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "linkedWithoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "withoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "linkedWithoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:24",
        "version": {
          "withMetadata": "7d82adf2baf1f02292d62c157c2b60f3a4a22a143196a6fee0bf1bce90c225db",
          "withoutMetadata": "7d82adf2baf1f02292d62c157c2b60f3a4a22a143196a6fee0bf1bce90c225db",
          "linkedWithoutMetadata": "7d82adf2baf1f02292d62c157c2b60f3a4a22a143196a6fee0bf1bce90c225db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)25881",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:26"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)25881": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "95963703fea8351c53af2a6cb00842e1ff29e42fef7f47cc0f769acd52fa1b72",
          "withoutMetadata": "95963703fea8351c53af2a6cb00842e1ff29e42fef7f47cc0f769acd52fa1b72",
          "linkedWithoutMetadata": "95963703fea8351c53af2a6cb00842e1ff29e42fef7f47cc0f769acd52fa1b72"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,address)",
          "getCurrentNonce(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)316",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "accountNonce",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)316": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "e9b4a6ed7f8e833825d31e4431e63038a91493847b7eb3cef25009f66807f7e1",
          "withoutMetadata": "e9b4a6ed7f8e833825d31e4431e63038a91493847b7eb3cef25009f66807f7e1",
          "linkedWithoutMetadata": "e9b4a6ed7f8e833825d31e4431e63038a91493847b7eb3cef25009f66807f7e1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)312",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "paymentFrom",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(PendingPayment)255_storage)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)312": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(PendingPayment)255_storage)": {
              "label": "mapping(uint256 => struct PendingPayment)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)255_storage": {
              "label": "struct PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "89aba0b78637d110437e854865ced174e628121230eacb793b5ae08607c1e5c1",
          "withoutMetadata": "89aba0b78637d110437e854865ced174e628121230eacb793b5ae08607c1e5c1",
          "linkedWithoutMetadata": "89aba0b78637d110437e854865ced174e628121230eacb793b5ae08607c1e5c1"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "408b16aabad944104d92b9a31be3a533826a13124efa953b255c575ea60806df",
          "withoutMetadata": "408b16aabad944104d92b9a31be3a533826a13124efa953b255c575ea60806df",
          "linkedWithoutMetadata": "408b16aabad944104d92b9a31be3a533826a13124efa953b255c575ea60806df"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "d4a1b85af56593aae0787a67fc74967976e89d2fbd8338cf7719aa37267234a9",
          "withoutMetadata": "d4a1b85af56593aae0787a67fc74967976e89d2fbd8338cf7719aa37267234a9",
          "linkedWithoutMetadata": "d4a1b85af56593aae0787a67fc74967976e89d2fbd8338cf7719aa37267234a9"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "17e94de44da27b012d24b06bd22b378787f2e4a822a2bd6574b751eb85f3703d",
          "withoutMetadata": "17e94de44da27b012d24b06bd22b378787f2e4a822a2bd6574b751eb85f3703d",
          "linkedWithoutMetadata": "17e94de44da27b012d24b06bd22b378787f2e4a822a2bd6574b751eb85f3703d"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "f14f20d153b22d8e9a7d39339acabb52149fdc61ca88029aa78ad329fc1d0dba",
          "withoutMetadata": "f14f20d153b22d8e9a7d39339acabb52149fdc61ca88029aa78ad329fc1d0dba",
          "linkedWithoutMetadata": "f14f20d153b22d8e9a7d39339acabb52149fdc61ca88029aa78ad329fc1d0dba"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "e218dc94bc6366f3f0a7ae292d0c9d3fef650aa7e174e45971d026822d1339d8",
          "withoutMetadata": "e218dc94bc6366f3f0a7ae292d0c9d3fef650aa7e174e45971d026822d1339d8",
          "linkedWithoutMetadata": "e218dc94bc6366f3f0a7ae292d0c9d3fef650aa7e174e45971d026822d1339d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "e934a57cb61cfd430697bdafbd1f065cb9dbaaee155029fdcb96bd13a728edd3",
          "withoutMetadata": "e934a57cb61cfd430697bdafbd1f065cb9dbaaee155029fdcb96bd13a728edd3",
          "linkedWithoutMetadata": "e934a57cb61cfd430697bdafbd1f065cb9dbaaee155029fdcb96bd13a728edd3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1",
          "withoutMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1",
          "linkedWithoutMetadata": "a260257211fb460c50267d481633c14cbba359bb278fcb0a6755c6aeb34279f1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034",
          "withoutMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034",
          "linkedWithoutMetadata": "9de934c1cc54a03257c928e1349cd474c2cc2cdf9cdbad0bbebdb6bf9ebb1034"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "withoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974",
          "linkedWithoutMetadata": "096fc21a5925c47f50b84a1d0b847bcd8ba9327c03acff790e1c97a8fd258974"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "withoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1",
          "linkedWithoutMetadata": "ec88736f48236418d875ccff31dca37d1cf7feeead1b2a1e074004c6a60f81d1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e",
          "withoutMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e",
          "linkedWithoutMetadata": "6a8c3cb3fd4a3b6680d70b65e203fbf2d837a47807f731b8bdd1b40f098cbe9e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "withoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d",
          "linkedWithoutMetadata": "3860c6a192ed8e0e1852b7fff38c3076336b725002f636943ba5c4a1fb2b808d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/bridge/NexusBridge.sol:19",
        "version": {
          "withMetadata": "c3204d64bd25788539b2ab671c86ff3e74f0449fac4f64ffc25e33fea6923c39",
          "withoutMetadata": "c3204d64bd25788539b2ab671c86ff3e74f0449fac4f64ffc25e33fea6923c39",
          "linkedWithoutMetadata": "c3204d64bd25788539b2ab671c86ff3e74f0449fac4f64ffc25e33fea6923c39"
        },
        "inherit": [
          "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:30"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:32"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:34"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:36"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10680",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:38"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)21158",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:39"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)21696",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:40"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:41"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:43"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:44"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)21696": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10680": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)21158": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899",
          "withoutMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899",
          "linkedWithoutMetadata": "15cc15deacda7fbbfef9ec4323401fe90197cc786ad5cd67d5726cd4ec7fd899"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "4d5424f31a61c5e6dac0058d63850a9c9db9cd2fb04092bbae3b3d8eb5c84371",
          "withoutMetadata": "4d5424f31a61c5e6dac0058d63850a9c9db9cd2fb04092bbae3b3d8eb5c84371",
          "linkedWithoutMetadata": "4d5424f31a61c5e6dac0058d63850a9c9db9cd2fb04092bbae3b3d8eb5c84371"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "b1ca756ae56c7f638e914e0fb10b097b970473810f879f132acdd5a62a33c631",
          "withoutMetadata": "b1ca756ae56c7f638e914e0fb10b097b970473810f879f132acdd5a62a33c631",
          "linkedWithoutMetadata": "b1ca756ae56c7f638e914e0fb10b097b970473810f879f132acdd5a62a33c631"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "429133346930b31944d9b8fdcaaeca44a4339b1b16b2bae9b8b15c93004cfb04",
          "withoutMetadata": "429133346930b31944d9b8fdcaaeca44a4339b1b16b2bae9b8b15c93004cfb04",
          "linkedWithoutMetadata": "429133346930b31944d9b8fdcaaeca44a4339b1b16b2bae9b8b15c93004cfb04"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,uint256,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes)",
          "withdrawNFT(bytes32,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)21117",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockNFTMap",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_struct(LockNFT)11578_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusMailbox)21117": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LockNFT)11578_storage)": {
              "label": "mapping(bytes32 => struct LockNFT)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockNFT)11578_storage": {
              "label": "struct LockNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "9c351c5fe01cd977b1dd08cd09feada66ba7dffe54005132a39eb44f02870ae4",
          "withoutMetadata": "9c351c5fe01cd977b1dd08cd09feada66ba7dffe54005132a39eb44f02870ae4",
          "linkedWithoutMetadata": "9c351c5fe01cd977b1dd08cd09feada66ba7dffe54005132a39eb44f02870ae4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)21117",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "paymentFrom",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(PendingPayment)11587_storage)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)21117": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(PendingPayment)11587_storage)": {
              "label": "mapping(uint256 => struct PendingPayment)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11587_storage": {
              "label": "struct PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/Token.sol:Token": {
        "src": "contracts/zknft-mailbox/Token.sol:7",
        "version": {
          "withMetadata": "f94be27792e5b9bf66b94f96d04c748e6663a526588865e2e5c257e4abf82ebd",
          "withoutMetadata": "f94be27792e5b9bf66b94f96d04c748e6663a526588865e2e5c257e4abf82ebd",
          "linkedWithoutMetadata": "f94be27792e5b9bf66b94f96d04c748e6663a526588865e2e5c257e4abf82ebd"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/zknft-mailbox/Token.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "2e781b0bb9c78969c962a37f3421cc5fa29d8d400fe231c4854b77a927667d74",
          "withoutMetadata": "2e781b0bb9c78969c962a37f3421cc5fa29d8d400fe231c4854b77a927667d74",
          "linkedWithoutMetadata": "2e781b0bb9c78969c962a37f3421cc5fa29d8d400fe231c4854b77a927667d74"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)21158",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)28321",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)21158": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)28321": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/zknft/NftPayment.sol:9",
        "version": {
          "withMetadata": "c3cc9b7a0a63189259953aa648aa5564d26fbfa5297b170bb606835516253ae9",
          "withoutMetadata": "c3cc9b7a0a63189259953aa648aa5564d26fbfa5297b170bb606835516253ae9",
          "linkedWithoutMetadata": "c3cc9b7a0a63189259953aa648aa5564d26fbfa5297b170bb606835516253ae9"
        },
        "inherit": [
          "nexus/verification/ethereum/Verifier.sol:EthereumVerifier",
          "nexus/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/zknft/NftPayment.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/zknft/NftPayment.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)21158",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:10"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:12"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:15"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11840_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11840_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)21158": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11840_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/Payment.sol:Payment": {
        "src": "contracts/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "withoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa",
          "linkedWithoutMetadata": "b4ee7549a9141772f69fa0cb52b7fffc47255aafe8191c06a179da6f503c13fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusMailbox.sol:NexusMailbox": {
        "src": "nexus/NexusMailbox.sol:10",
        "version": {
          "withMetadata": "1707d81ca3cfd8ed05691c442d7bd14e8c4767cc7a5e0c6c901aa06862544cb8",
          "withoutMetadata": "1707d81ca3cfd8ed05691c442d7bd14e8c4767cc7a5e0c6c901aa06862544cb8",
          "linkedWithoutMetadata": "1707d81ca3cfd8ed05691c442d7bd14e8c4767cc7a5e0c6c901aa06862544cb8"
        },
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "nexus/interfaces/INexusMailbox.sol:INexusMailbox"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes32)",
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)",
          "addOrUpdateWrapper(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "messages",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:15"
            },
            {
              "label": "verifierWrappers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21182)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:16"
            },
            {
              "label": "verifiedReceipts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(MailboxMessage)21077_storage)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:17"
            },
            {
              "label": "nexusAppId",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(INexusVerifierWrapper)21182": {
              "label": "contract INexusVerifierWrapper",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21182)": {
              "label": "mapping(bytes32 => contract INexusVerifierWrapper)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(MailboxMessage)21077_storage)": {
              "label": "mapping(bytes32 => struct MailboxMessage)",
              "numberOfBytes": "32"
            },
            "t_struct(MailboxMessage)21077_storage": {
              "label": "struct MailboxMessage",
              "members": [
                {
                  "label": "nexusAppIdFrom",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nexusAppIdTo",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusProofManager.sol:NexusProofManager": {
        "src": "nexus/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "7321a82a943bf570ee7cfedac9008bc32914eeeb6a3d73b4a6073441c6e8ad94",
          "withoutMetadata": "7321a82a943bf570ee7cfedac9008bc32914eeeb6a3d73b4a6073441c6e8ad94",
          "linkedWithoutMetadata": "7321a82a943bf570ee7cfedac9008bc32914eeeb6a3d73b4a6073441c6e8ad94"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "nexus/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)20826_storage)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIdToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIdToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)20826_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)20826_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusReceiver.sol:INexusReceiver": {
        "src": "nexus/interfaces/INexusReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onNexusMessage(bytes32,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusVerifierWrapper.sol:INexusVerifierWrapper": {
        "src": "nexus/interfaces/INexusVerifierWrapper.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "parseAndVerify(uint256,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "nexus/lib/JellyfishMerkleTreeVerifier.sol:4",
        "version": {
          "withMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee",
          "withoutMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee",
          "linkedWithoutMetadata": "0e541eb23c8f60ae6472e0640e7633565aeec8d10a99f77cadeac5fd5d3fd5ee"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "nexus/verification/ethereum/StorageProof.sol:7",
        "version": {
          "withMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c",
          "withoutMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c",
          "linkedWithoutMetadata": "a6023b7c75eb8ba06ceee3912e2f5cabda784195c913346459a0339e070c855c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "nexus/verification/ethereum/Verifier.sol:7",
        "version": {
          "withMetadata": "75ccaf4ad2413bf5cd3e2bbd0010c2a487ddfc561b154bbda45f202e2d6de071",
          "withoutMetadata": "75ccaf4ad2413bf5cd3e2bbd0010c2a487ddfc561b154bbda45f202e2d6de071",
          "linkedWithoutMetadata": "75ccaf4ad2413bf5cd3e2bbd0010c2a487ddfc561b154bbda45f202e2d6de071"
        },
        "inherit": [
          "nexus/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "nexus/verification/ethereum/Verifier.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "nexus/verification/ethereum/Verifier.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77",
          "withoutMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77",
          "linkedWithoutMetadata": "84a9339a8e3ec69e68223f4edee76158eb7266d98fe78c733682497770d02c77"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:11",
        "version": {
          "withMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d",
          "withoutMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d",
          "linkedWithoutMetadata": "0e8decd9895a71ce8efdd9f0b2c4d78034f5a1ae16d9721ae15e2e0ec433494d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14",
          "withoutMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14",
          "linkedWithoutMetadata": "be68a7b43d6d5c7cf5099b2ba8dd95c3c24d150afb0a7835c70298760f31dd14"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:10",
        "version": {
          "withMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586",
          "withoutMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586",
          "linkedWithoutMetadata": "2d7f7df796db8ce2e8439e99cdf5933c343c73502091fcd12180a8a700143586"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40",
          "withoutMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40",
          "linkedWithoutMetadata": "8ead49ebf861d289b1da0a771a2c1e17c3695eed1f0d0673751be3aaea543f40"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "withoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d",
          "linkedWithoutMetadata": "eae06b2d74bad116613e2063e1daf19215460defaef191ce6e29565400a7872d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "withoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d",
          "linkedWithoutMetadata": "d4508eaf889c89025bbee916a597f2d16b4d7a0cd24881592e4952bb758b8a4d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:24",
        "version": {
          "withMetadata": "7d82adf2baf1f02292d62c157c2b60f3a4a22a143196a6fee0bf1bce90c225db",
          "withoutMetadata": "7d82adf2baf1f02292d62c157c2b60f3a4a22a143196a6fee0bf1bce90c225db",
          "linkedWithoutMetadata": "7d82adf2baf1f02292d62c157c2b60f3a4a22a143196a6fee0bf1bce90c225db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)28224",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:26"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)28224": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "nexus/NexusMailbox.sol:NexusMailbox": {
        "src": "nexus/NexusMailbox.sol:10",
        "version": {
          "withMetadata": "40136d95a93db3ca22d8667b736aa29d6c4cf02b54e7067acf5cc71d2d223914",
          "withoutMetadata": "40136d95a93db3ca22d8667b736aa29d6c4cf02b54e7067acf5cc71d2d223914",
          "linkedWithoutMetadata": "40136d95a93db3ca22d8667b736aa29d6c4cf02b54e7067acf5cc71d2d223914"
        },
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "nexus/interfaces/INexusMailbox.sol:INexusMailbox"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes32)",
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)",
          "addOrUpdateWrapper(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "messages",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:15"
            },
            {
              "label": "verifierWrappers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)887)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:16"
            },
            {
              "label": "verifiedReceipts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(MailboxMessage)823_storage)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:17"
            },
            {
              "label": "nexusAppId",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(INexusVerifierWrapper)887": {
              "label": "contract INexusVerifierWrapper",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)887)": {
              "label": "mapping(bytes32 => contract INexusVerifierWrapper)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(MailboxMessage)823_storage)": {
              "label": "mapping(bytes32 => struct MailboxMessage)",
              "numberOfBytes": "32"
            },
            "t_struct(MailboxMessage)823_storage": {
              "label": "struct MailboxMessage",
              "members": [
                {
                  "label": "nexusAppIdFrom",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nexusAppIdTo",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusProofManager.sol:NexusProofManager": {
        "src": "nexus/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "00dc0e0faee673e5bc88310e4821ad892c8f17ecd78d120365d78d2724f46f1b",
          "withoutMetadata": "00dc0e0faee673e5bc88310e4821ad892c8f17ecd78d120365d78d2724f46f1b",
          "linkedWithoutMetadata": "00dc0e0faee673e5bc88310e4821ad892c8f17ecd78d120365d78d2724f46f1b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "nexus/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)572_storage)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIdToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIdToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)572_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)572_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusReceiver.sol:INexusReceiver": {
        "src": "nexus/interfaces/INexusReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onNexusMessage(bytes32,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusVerifierWrapper.sol:INexusVerifierWrapper": {
        "src": "nexus/interfaces/INexusVerifierWrapper.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "parseAndVerify(uint256,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "nexus/lib/JellyfishMerkleTreeVerifier.sol:4",
        "version": {
          "withMetadata": "7b39db154475dcabfd45db9daeeaf71d81c683fdf95ae77d535e9e165294c235",
          "withoutMetadata": "7b39db154475dcabfd45db9daeeaf71d81c683fdf95ae77d535e9e165294c235",
          "linkedWithoutMetadata": "7b39db154475dcabfd45db9daeeaf71d81c683fdf95ae77d535e9e165294c235"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/Token.sol:Token": {
        "src": "contracts/zknft-mailbox/Token.sol:7",
        "version": {
          "withMetadata": "040597fbf828d0486a62c221a4ee7ec33782f5d10db1f9a7b373ebc673b259c8",
          "withoutMetadata": "040597fbf828d0486a62c221a4ee7ec33782f5d10db1f9a7b373ebc673b259c8",
          "linkedWithoutMetadata": "040597fbf828d0486a62c221a4ee7ec33782f5d10db1f9a7b373ebc673b259c8"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/zknft-mailbox/Token.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "ba10758c4716e2152976702bfa16c2924f7696724758c856e58f13bebebc18d6",
          "withoutMetadata": "ba10758c4716e2152976702bfa16c2924f7696724758c856e58f13bebebc18d6",
          "linkedWithoutMetadata": "ba10758c4716e2152976702bfa16c2924f7696724758c856e58f13bebebc18d6"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "68583f3a93301daa0c7da858f3771819784b84a5218448d69d92c44ad147e18e",
          "withoutMetadata": "68583f3a93301daa0c7da858f3771819784b84a5218448d69d92c44ad147e18e",
          "linkedWithoutMetadata": "68583f3a93301daa0c7da858f3771819784b84a5218448d69d92c44ad147e18e"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "996a38fc0f1ed494c8fbf28566294678278ff24cbf144cc916d23b56a087c4d8",
          "withoutMetadata": "996a38fc0f1ed494c8fbf28566294678278ff24cbf144cc916d23b56a087c4d8",
          "linkedWithoutMetadata": "996a38fc0f1ed494c8fbf28566294678278ff24cbf144cc916d23b56a087c4d8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "fe905838d0fb3d2475d62d4e98e0e7ab3aa6fcd400bbde2cf3e7faf1275f2671",
          "withoutMetadata": "fe905838d0fb3d2475d62d4e98e0e7ab3aa6fcd400bbde2cf3e7faf1275f2671",
          "linkedWithoutMetadata": "fe905838d0fb3d2475d62d4e98e0e7ab3aa6fcd400bbde2cf3e7faf1275f2671"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "4dbd2609fe56d65a490dab638aee32b7c07b100b6d0d8fb78d05718cf5a74314",
          "withoutMetadata": "4dbd2609fe56d65a490dab638aee32b7c07b100b6d0d8fb78d05718cf5a74314",
          "linkedWithoutMetadata": "4dbd2609fe56d65a490dab638aee32b7c07b100b6d0d8fb78d05718cf5a74314"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "8285a3d147556abff0384c451709d1d38f4a83333a20a1c1792a57dfe492b212",
          "withoutMetadata": "8285a3d147556abff0384c451709d1d38f4a83333a20a1c1792a57dfe492b212",
          "linkedWithoutMetadata": "8285a3d147556abff0384c451709d1d38f4a83333a20a1c1792a57dfe492b212"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "252d6edab1dfc7906d402917c6328893e02f8d01a9fd768ead2ca8ef8fcc05df",
          "withoutMetadata": "252d6edab1dfc7906d402917c6328893e02f8d01a9fd768ead2ca8ef8fcc05df",
          "linkedWithoutMetadata": "252d6edab1dfc7906d402917c6328893e02f8d01a9fd768ead2ca8ef8fcc05df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "49ad30877693c4f68ede403cdcedf03054766ec91724898eaf6a01180fd46dc9",
          "withoutMetadata": "49ad30877693c4f68ede403cdcedf03054766ec91724898eaf6a01180fd46dc9",
          "linkedWithoutMetadata": "49ad30877693c4f68ede403cdcedf03054766ec91724898eaf6a01180fd46dc9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "d2a9abacff0cc780ed8727cbc2805c70dfe153d78c83f62252ef3fd27beb914c",
          "withoutMetadata": "d2a9abacff0cc780ed8727cbc2805c70dfe153d78c83f62252ef3fd27beb914c",
          "linkedWithoutMetadata": "d2a9abacff0cc780ed8727cbc2805c70dfe153d78c83f62252ef3fd27beb914c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "2efcca0dc2a1cebc6199cc8021bb643e5f860c36d10ba293937c7a8ab9e6880c",
          "withoutMetadata": "2efcca0dc2a1cebc6199cc8021bb643e5f860c36d10ba293937c7a8ab9e6880c",
          "linkedWithoutMetadata": "2efcca0dc2a1cebc6199cc8021bb643e5f860c36d10ba293937c7a8ab9e6880c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "f0d7fa327ce9cf15b42753574b2cee41f7bf6fa572b398af2c4d8c18d8da6e86",
          "withoutMetadata": "f0d7fa327ce9cf15b42753574b2cee41f7bf6fa572b398af2c4d8c18d8da6e86",
          "linkedWithoutMetadata": "f0d7fa327ce9cf15b42753574b2cee41f7bf6fa572b398af2c4d8c18d8da6e86"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "43181d706f32c4500f36c062c3d102e48caa9fb1414d1b0d421928056c980ed9",
          "withoutMetadata": "43181d706f32c4500f36c062c3d102e48caa9fb1414d1b0d421928056c980ed9",
          "linkedWithoutMetadata": "43181d706f32c4500f36c062c3d102e48caa9fb1414d1b0d421928056c980ed9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "e4424ee9122cc893d4dd63eda2baee0bd1d069e025a229518745b4a737465470",
          "withoutMetadata": "e4424ee9122cc893d4dd63eda2baee0bd1d069e025a229518745b4a737465470",
          "linkedWithoutMetadata": "e4424ee9122cc893d4dd63eda2baee0bd1d069e025a229518745b4a737465470"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/bridge/NexusBridge.sol:19",
        "version": {
          "withMetadata": "1b22a61f17e066e4bb7a52eda4415823d458d30ba7f6f05d7a1ed73db1835146",
          "withoutMetadata": "1b22a61f17e066e4bb7a52eda4415823d458d30ba7f6f05d7a1ed73db1835146",
          "linkedWithoutMetadata": "1b22a61f17e066e4bb7a52eda4415823d458d30ba7f6f05d7a1ed73db1835146"
        },
        "inherit": [
          "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:30"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:32"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:34"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:36"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10532",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:38"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:39"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)21517",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:40"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:41"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:43"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:44"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)21517": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10532": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "02372b2df279bf20bd3f3f7f12c160f4cf367df2585d12a217352ba9725da498",
          "withoutMetadata": "02372b2df279bf20bd3f3f7f12c160f4cf367df2585d12a217352ba9725da498",
          "linkedWithoutMetadata": "02372b2df279bf20bd3f3f7f12c160f4cf367df2585d12a217352ba9725da498"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "5a1019e700d8624f601b943f8ea51972ec0dc9426e303d1e56db9730b7d88d80",
          "withoutMetadata": "5a1019e700d8624f601b943f8ea51972ec0dc9426e303d1e56db9730b7d88d80",
          "linkedWithoutMetadata": "5a1019e700d8624f601b943f8ea51972ec0dc9426e303d1e56db9730b7d88d80"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "efdcfd6970c533094fda2a3e7f50bb3307d1162ef9af241758bb63ff5c37c6ea",
          "withoutMetadata": "efdcfd6970c533094fda2a3e7f50bb3307d1162ef9af241758bb63ff5c37c6ea",
          "linkedWithoutMetadata": "efdcfd6970c533094fda2a3e7f50bb3307d1162ef9af241758bb63ff5c37c6ea"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "b67be4c3ef8b09300cbd7702b5c04bb7b16df0fab06706800fc789ae0d80b500",
          "withoutMetadata": "b67be4c3ef8b09300cbd7702b5c04bb7b16df0fab06706800fc789ae0d80b500",
          "linkedWithoutMetadata": "b67be4c3ef8b09300cbd7702b5c04bb7b16df0fab06706800fc789ae0d80b500"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes)",
          "withdrawNFT(bytes32,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/zknft-mailbox/NFT.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)20942",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockNFTMap",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_struct(LockNFT)11403_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusMailbox)20942": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LockNFT)11403_storage)": {
              "label": "mapping(bytes32 => struct LockNFT)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockNFT)11403_storage": {
              "label": "struct LockNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "dc6979bb18f1b31efd096653c6b458a01c2bbf4f1673a6509191658e007df0d9",
          "withoutMetadata": "dc6979bb18f1b31efd096653c6b458a01c2bbf4f1673a6509191658e007df0d9",
          "linkedWithoutMetadata": "dc6979bb18f1b31efd096653c6b458a01c2bbf4f1673a6509191658e007df0d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)20942",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "paymentFrom",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(PendingPayment)11412_storage)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)20942": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(PendingPayment)11412_storage)": {
              "label": "mapping(uint256 => struct PendingPayment)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11412_storage": {
              "label": "struct PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "30ac640c13cbd45a9f84921ff24af60a2d5076eee2b21dee2d6f429008aebde1",
          "withoutMetadata": "30ac640c13cbd45a9f84921ff24af60a2d5076eee2b21dee2d6f429008aebde1",
          "linkedWithoutMetadata": "30ac640c13cbd45a9f84921ff24af60a2d5076eee2b21dee2d6f429008aebde1"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)28142",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)28142": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/zknft/NftPayment.sol:9",
        "version": {
          "withMetadata": "b5542908db20354cb97d82eeb498006f40d4ae06551efc7337a895b697415c71",
          "withoutMetadata": "b5542908db20354cb97d82eeb498006f40d4ae06551efc7337a895b697415c71",
          "linkedWithoutMetadata": "b5542908db20354cb97d82eeb498006f40d4ae06551efc7337a895b697415c71"
        },
        "inherit": [
          "nexus/verification/ethereum/Verifier.sol:EthereumVerifier",
          "nexus/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/zknft/NftPayment.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/zknft/NftPayment.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:10"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:12"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:15"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11665_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11665_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11665_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/Payment.sol:Payment": {
        "src": "contracts/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "196ecb38a5671566070f483fbe50a21f6ff9e69c7c95520584ce06c794022f52",
          "withoutMetadata": "196ecb38a5671566070f483fbe50a21f6ff9e69c7c95520584ce06c794022f52",
          "linkedWithoutMetadata": "196ecb38a5671566070f483fbe50a21f6ff9e69c7c95520584ce06c794022f52"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusMailbox.sol:NexusMailbox": {
        "src": "nexus/NexusMailbox.sol:10",
        "version": {
          "withMetadata": "b548517d5461ebabcebd0b8f803a55810e6825bc43bf795dd8a3c02be56ffad9",
          "withoutMetadata": "b548517d5461ebabcebd0b8f803a55810e6825bc43bf795dd8a3c02be56ffad9",
          "linkedWithoutMetadata": "b548517d5461ebabcebd0b8f803a55810e6825bc43bf795dd8a3c02be56ffad9"
        },
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "nexus/interfaces/INexusMailbox.sol:INexusMailbox"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes32)",
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)",
          "addOrUpdateWrapper(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "messages",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:15"
            },
            {
              "label": "verifierWrappers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21003)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:16"
            },
            {
              "label": "verifiedReceipts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(MailboxMessage)20902_storage)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:17"
            },
            {
              "label": "nexusAppId",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(INexusVerifierWrapper)21003": {
              "label": "contract INexusVerifierWrapper",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21003)": {
              "label": "mapping(bytes32 => contract INexusVerifierWrapper)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(MailboxMessage)20902_storage)": {
              "label": "mapping(bytes32 => struct MailboxMessage)",
              "numberOfBytes": "32"
            },
            "t_struct(MailboxMessage)20902_storage": {
              "label": "struct MailboxMessage",
              "members": [
                {
                  "label": "nexusAppIdFrom",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nexusAppIdTo",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusProofManager.sol:NexusProofManager": {
        "src": "nexus/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "12493b81d29a99d155d7e6159d3e246120db0e0bcda21674d0caddbf1f63d745",
          "withoutMetadata": "12493b81d29a99d155d7e6159d3e246120db0e0bcda21674d0caddbf1f63d745",
          "linkedWithoutMetadata": "12493b81d29a99d155d7e6159d3e246120db0e0bcda21674d0caddbf1f63d745"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "nexus/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)20651_storage)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIdToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIdToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)20651_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)20651_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusReceiver.sol:INexusReceiver": {
        "src": "nexus/interfaces/INexusReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "callback(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusVerifierWrapper.sol:INexusVerifierWrapper": {
        "src": "nexus/interfaces/INexusVerifierWrapper.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "parseAndVerify(uint256,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "nexus/lib/JellyfishMerkleTreeVerifier.sol:4",
        "version": {
          "withMetadata": "7b39db154475dcabfd45db9daeeaf71d81c683fdf95ae77d535e9e165294c235",
          "withoutMetadata": "7b39db154475dcabfd45db9daeeaf71d81c683fdf95ae77d535e9e165294c235",
          "linkedWithoutMetadata": "7b39db154475dcabfd45db9daeeaf71d81c683fdf95ae77d535e9e165294c235"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "nexus/verification/ethereum/StorageProof.sol:7",
        "version": {
          "withMetadata": "8f6a83c3f3c6c4ad1487e7a42091f53886e9ab16af1d4f8f39d9adce8ba36ee4",
          "withoutMetadata": "8f6a83c3f3c6c4ad1487e7a42091f53886e9ab16af1d4f8f39d9adce8ba36ee4",
          "linkedWithoutMetadata": "8f6a83c3f3c6c4ad1487e7a42091f53886e9ab16af1d4f8f39d9adce8ba36ee4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "nexus/verification/ethereum/Verifier.sol:7",
        "version": {
          "withMetadata": "2594d0e0761f66221d8555be81009a9e804861ed5b54bf97d7e3bc3003d78530",
          "withoutMetadata": "2594d0e0761f66221d8555be81009a9e804861ed5b54bf97d7e3bc3003d78530",
          "linkedWithoutMetadata": "2594d0e0761f66221d8555be81009a9e804861ed5b54bf97d7e3bc3003d78530"
        },
        "inherit": [
          "nexus/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "nexus/verification/ethereum/Verifier.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "nexus/verification/ethereum/Verifier.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "674813619ca3e9593857f52388491b570527339c370fd3e0a750627e61d98f4c",
          "withoutMetadata": "674813619ca3e9593857f52388491b570527339c370fd3e0a750627e61d98f4c",
          "linkedWithoutMetadata": "674813619ca3e9593857f52388491b570527339c370fd3e0a750627e61d98f4c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:11",
        "version": {
          "withMetadata": "cf13e80c7e3623d9a41943310b149641d4ccb88609a011c62df18871ecb03e58",
          "withoutMetadata": "cf13e80c7e3623d9a41943310b149641d4ccb88609a011c62df18871ecb03e58",
          "linkedWithoutMetadata": "cf13e80c7e3623d9a41943310b149641d4ccb88609a011c62df18871ecb03e58"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "43e0822b1a0afd89d250990b92d6636e89ca1322e607a0ae4cd0a05fe79ac6b8",
          "withoutMetadata": "43e0822b1a0afd89d250990b92d6636e89ca1322e607a0ae4cd0a05fe79ac6b8",
          "linkedWithoutMetadata": "43e0822b1a0afd89d250990b92d6636e89ca1322e607a0ae4cd0a05fe79ac6b8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:10",
        "version": {
          "withMetadata": "ceac6113c65dbbce9bb8198db59928548ea072417cadba35cead38a46983759a",
          "withoutMetadata": "ceac6113c65dbbce9bb8198db59928548ea072417cadba35cead38a46983759a",
          "linkedWithoutMetadata": "ceac6113c65dbbce9bb8198db59928548ea072417cadba35cead38a46983759a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "795d46fd606a030152c6ed7b74b127d7e5be8b65e5c4eb1243340581ae85afae",
          "withoutMetadata": "795d46fd606a030152c6ed7b74b127d7e5be8b65e5c4eb1243340581ae85afae",
          "linkedWithoutMetadata": "795d46fd606a030152c6ed7b74b127d7e5be8b65e5c4eb1243340581ae85afae"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "8b0a03f13f572099d08d478d76123db74168d780cb775611ec39453132cfc08b",
          "withoutMetadata": "8b0a03f13f572099d08d478d76123db74168d780cb775611ec39453132cfc08b",
          "linkedWithoutMetadata": "8b0a03f13f572099d08d478d76123db74168d780cb775611ec39453132cfc08b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "d36355188cb73c0cfb2d35223fa6da636e414b52f62de4ae83061b0e1ea143d2",
          "withoutMetadata": "d36355188cb73c0cfb2d35223fa6da636e414b52f62de4ae83061b0e1ea143d2",
          "linkedWithoutMetadata": "d36355188cb73c0cfb2d35223fa6da636e414b52f62de4ae83061b0e1ea143d2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:24",
        "version": {
          "withMetadata": "57d74fd80ab397d8fef5398ca7a881a7a428e1251a66066a54603c6d58d6da66",
          "withoutMetadata": "57d74fd80ab397d8fef5398ca7a881a7a428e1251a66066a54603c6d58d6da66",
          "linkedWithoutMetadata": "57d74fd80ab397d8fef5398ca7a881a7a428e1251a66066a54603c6d58d6da66"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)28045",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:26"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)28045": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "6c98b88c1ae0cd2f96848cc6045cf2760a8ce5eb18bebeab43d554d23eda8691",
          "withoutMetadata": "6c98b88c1ae0cd2f96848cc6045cf2760a8ce5eb18bebeab43d554d23eda8691",
          "linkedWithoutMetadata": "6c98b88c1ae0cd2f96848cc6045cf2760a8ce5eb18bebeab43d554d23eda8691"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "e1d9131c6c4ee499c19e1ed96e7ddbbabf42b371e531f3e3aa6c37956bc02c55",
          "withoutMetadata": "e1d9131c6c4ee499c19e1ed96e7ddbbabf42b371e531f3e3aa6c37956bc02c55",
          "linkedWithoutMetadata": "e1d9131c6c4ee499c19e1ed96e7ddbbabf42b371e531f3e3aa6c37956bc02c55"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "786639194be1f8a31e4594baf8646e2f6496917bb4c840568176044013c852ca",
          "withoutMetadata": "786639194be1f8a31e4594baf8646e2f6496917bb4c840568176044013c852ca",
          "linkedWithoutMetadata": "786639194be1f8a31e4594baf8646e2f6496917bb4c840568176044013c852ca"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "155d23060d2933dccbc976cadb66a846429f6f7382df9d0da89b6f981c64ac9d",
          "withoutMetadata": "155d23060d2933dccbc976cadb66a846429f6f7382df9d0da89b6f981c64ac9d",
          "linkedWithoutMetadata": "155d23060d2933dccbc976cadb66a846429f6f7382df9d0da89b6f981c64ac9d"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "06303da160eddb4478039dbd8c49fe120ccc22cbf824cd2519a962dbaf901f48",
          "withoutMetadata": "06303da160eddb4478039dbd8c49fe120ccc22cbf824cd2519a962dbaf901f48",
          "linkedWithoutMetadata": "06303da160eddb4478039dbd8c49fe120ccc22cbf824cd2519a962dbaf901f48"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "ec7c8357cdb911ff27e94ac0b8b8bc174087ed4ad80e9dce8e9aba969af33e8d",
          "withoutMetadata": "ec7c8357cdb911ff27e94ac0b8b8bc174087ed4ad80e9dce8e9aba969af33e8d",
          "linkedWithoutMetadata": "ec7c8357cdb911ff27e94ac0b8b8bc174087ed4ad80e9dce8e9aba969af33e8d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "f35d40e8cce5935ba587443337f8206bf3b887a87dda34e24520bcc8de60525f",
          "withoutMetadata": "f35d40e8cce5935ba587443337f8206bf3b887a87dda34e24520bcc8de60525f",
          "linkedWithoutMetadata": "f35d40e8cce5935ba587443337f8206bf3b887a87dda34e24520bcc8de60525f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "97e29dacf99669a13cb33237ba78e5fe4e31e48381e54a1e2a7690659da4afe4",
          "withoutMetadata": "97e29dacf99669a13cb33237ba78e5fe4e31e48381e54a1e2a7690659da4afe4",
          "linkedWithoutMetadata": "97e29dacf99669a13cb33237ba78e5fe4e31e48381e54a1e2a7690659da4afe4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "8cd7dfd074702254507789405f800bf7688faaa306c0a1a897adc6d19c4df111",
          "withoutMetadata": "8cd7dfd074702254507789405f800bf7688faaa306c0a1a897adc6d19c4df111",
          "linkedWithoutMetadata": "8cd7dfd074702254507789405f800bf7688faaa306c0a1a897adc6d19c4df111"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "c539fcb64571442f15eb4ee93ed60db343379c01184b6c4b1f42f03576e69bab",
          "withoutMetadata": "c539fcb64571442f15eb4ee93ed60db343379c01184b6c4b1f42f03576e69bab",
          "linkedWithoutMetadata": "c539fcb64571442f15eb4ee93ed60db343379c01184b6c4b1f42f03576e69bab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "72f4f80a0fe1fb0b7fe150456b843f12dbde27e3333abff688f3d34574cf906b",
          "withoutMetadata": "72f4f80a0fe1fb0b7fe150456b843f12dbde27e3333abff688f3d34574cf906b",
          "linkedWithoutMetadata": "72f4f80a0fe1fb0b7fe150456b843f12dbde27e3333abff688f3d34574cf906b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "27342679e9e7b830b624b2ba1b604b44ef6a76511418d69ea63e7ecfafe4106d",
          "withoutMetadata": "27342679e9e7b830b624b2ba1b604b44ef6a76511418d69ea63e7ecfafe4106d",
          "linkedWithoutMetadata": "27342679e9e7b830b624b2ba1b604b44ef6a76511418d69ea63e7ecfafe4106d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "6a6fb56a452b694f5eedf914e434ed6041819c0fe691ceebe5363f5ab2e33092",
          "withoutMetadata": "6a6fb56a452b694f5eedf914e434ed6041819c0fe691ceebe5363f5ab2e33092",
          "linkedWithoutMetadata": "6a6fb56a452b694f5eedf914e434ed6041819c0fe691ceebe5363f5ab2e33092"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/bridge/NexusBridge.sol:19",
        "version": {
          "withMetadata": "0a83032916d3a619302e2966819220206d7339d0afee5ba26d5f7abd1ee1f40e",
          "withoutMetadata": "0a83032916d3a619302e2966819220206d7339d0afee5ba26d5f7abd1ee1f40e",
          "linkedWithoutMetadata": "0a83032916d3a619302e2966819220206d7339d0afee5ba26d5f7abd1ee1f40e"
        },
        "inherit": [
          "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:30"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:32"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:34"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:36"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10532",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:38"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:39"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)21517",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:40"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:41"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:43"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:44"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)21517": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10532": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "09070e0d6ffebba74e2f0b4664d8542bfefbbef6882714b7b7cae7ea5b86b9f7",
          "withoutMetadata": "09070e0d6ffebba74e2f0b4664d8542bfefbbef6882714b7b7cae7ea5b86b9f7",
          "linkedWithoutMetadata": "09070e0d6ffebba74e2f0b4664d8542bfefbbef6882714b7b7cae7ea5b86b9f7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "421e198b4b03af79a91d4b168d19b890e4c142563519f8eeb5df1df267f9d7cc",
          "withoutMetadata": "421e198b4b03af79a91d4b168d19b890e4c142563519f8eeb5df1df267f9d7cc",
          "linkedWithoutMetadata": "421e198b4b03af79a91d4b168d19b890e4c142563519f8eeb5df1df267f9d7cc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "4384e6dd585f95e31bcbcdf1e400aa6ad6a3f18376eb0682f0a8299cf1555bbf",
          "withoutMetadata": "4384e6dd585f95e31bcbcdf1e400aa6ad6a3f18376eb0682f0a8299cf1555bbf",
          "linkedWithoutMetadata": "4384e6dd585f95e31bcbcdf1e400aa6ad6a3f18376eb0682f0a8299cf1555bbf"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "df52efb7f56695feda80a706462ab577ae8f41eb4fb335195370445991215f35",
          "withoutMetadata": "df52efb7f56695feda80a706462ab577ae8f41eb4fb335195370445991215f35",
          "linkedWithoutMetadata": "df52efb7f56695feda80a706462ab577ae8f41eb4fb335195370445991215f35"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes)",
          "withdrawNFT(bytes32,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/zknft-mailbox/NFT.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)20942",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockNFTMap",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_struct(LockNFT)11403_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusMailbox)20942": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LockNFT)11403_storage)": {
              "label": "mapping(bytes32 => struct LockNFT)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockNFT)11403_storage": {
              "label": "struct LockNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "ffb355fb9b77689dff4da9bfc15554e477d2477833cda10f8ad939067af772b1",
          "withoutMetadata": "ffb355fb9b77689dff4da9bfc15554e477d2477833cda10f8ad939067af772b1",
          "linkedWithoutMetadata": "ffb355fb9b77689dff4da9bfc15554e477d2477833cda10f8ad939067af772b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)20942",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "paymentFrom",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(PendingPayment)11412_storage)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)20942": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(PendingPayment)11412_storage)": {
              "label": "mapping(uint256 => struct PendingPayment)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11412_storage": {
              "label": "struct PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "9e5bb7b04ce6169df4fce0159af8ea50dcbac8f2b72855e922a9ccc6c88c0347",
          "withoutMetadata": "9e5bb7b04ce6169df4fce0159af8ea50dcbac8f2b72855e922a9ccc6c88c0347",
          "linkedWithoutMetadata": "9e5bb7b04ce6169df4fce0159af8ea50dcbac8f2b72855e922a9ccc6c88c0347"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)28142",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)28142": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/zknft/NftPayment.sol:9",
        "version": {
          "withMetadata": "096d958107cd1dad8af6740564c4ce9653c0dd3111f3971b2ec83a5b263546e9",
          "withoutMetadata": "096d958107cd1dad8af6740564c4ce9653c0dd3111f3971b2ec83a5b263546e9",
          "linkedWithoutMetadata": "096d958107cd1dad8af6740564c4ce9653c0dd3111f3971b2ec83a5b263546e9"
        },
        "inherit": [
          "nexus/verification/ethereum/Verifier.sol:EthereumVerifier",
          "nexus/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/zknft/NftPayment.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/zknft/NftPayment.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:10"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:12"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:15"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11665_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11665_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11665_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/Payment.sol:Payment": {
        "src": "contracts/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "5df79de5c8261cd7e54fdd853a019c6bade29841fb2434a9e7272ab2e9f3a89d",
          "withoutMetadata": "5df79de5c8261cd7e54fdd853a019c6bade29841fb2434a9e7272ab2e9f3a89d",
          "linkedWithoutMetadata": "5df79de5c8261cd7e54fdd853a019c6bade29841fb2434a9e7272ab2e9f3a89d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusMailbox.sol:NexusMailbox": {
        "src": "nexus/NexusMailbox.sol:10",
        "version": {
          "withMetadata": "6807a6ef63dea90c8c3ccf5749aa7efa9965794c366f02da791a63d2b41402d9",
          "withoutMetadata": "6807a6ef63dea90c8c3ccf5749aa7efa9965794c366f02da791a63d2b41402d9",
          "linkedWithoutMetadata": "6807a6ef63dea90c8c3ccf5749aa7efa9965794c366f02da791a63d2b41402d9"
        },
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "nexus/interfaces/INexusMailbox.sol:INexusMailbox"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes32)",
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)",
          "addOrUpdateWrapper(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "messages",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:15"
            },
            {
              "label": "verifierWrappers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21003)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:16"
            },
            {
              "label": "verifiedReceipts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(MailboxMessage)20902_storage)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:17"
            },
            {
              "label": "nexusAppId",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(INexusVerifierWrapper)21003": {
              "label": "contract INexusVerifierWrapper",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21003)": {
              "label": "mapping(bytes32 => contract INexusVerifierWrapper)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(MailboxMessage)20902_storage)": {
              "label": "mapping(bytes32 => struct MailboxMessage)",
              "numberOfBytes": "32"
            },
            "t_struct(MailboxMessage)20902_storage": {
              "label": "struct MailboxMessage",
              "members": [
                {
                  "label": "nexusAppIdFrom",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nexusAppIdTo",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusProofManager.sol:NexusProofManager": {
        "src": "nexus/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "23ddd34ec25da1f835d83628143cb471a6bd9729c0a327a9ddf6a9acb8b3199f",
          "withoutMetadata": "23ddd34ec25da1f835d83628143cb471a6bd9729c0a327a9ddf6a9acb8b3199f",
          "linkedWithoutMetadata": "23ddd34ec25da1f835d83628143cb471a6bd9729c0a327a9ddf6a9acb8b3199f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "nexus/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)20651_storage)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIdToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIdToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)20651_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)20651_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusReceiver.sol:INexusReceiver": {
        "src": "nexus/interfaces/INexusReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "callback(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusVerifierWrapper.sol:INexusVerifierWrapper": {
        "src": "nexus/interfaces/INexusVerifierWrapper.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "parseAndVerify(uint256,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "nexus/lib/JellyfishMerkleTreeVerifier.sol:4",
        "version": {
          "withMetadata": "7a44cf797c5da3d18850308818f687db5bd58667e08cedd2a8a52362a0bb5882",
          "withoutMetadata": "7a44cf797c5da3d18850308818f687db5bd58667e08cedd2a8a52362a0bb5882",
          "linkedWithoutMetadata": "7a44cf797c5da3d18850308818f687db5bd58667e08cedd2a8a52362a0bb5882"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "nexus/verification/ethereum/StorageProof.sol:7",
        "version": {
          "withMetadata": "ee9e2d7d6d5085afa6dea2006880abe211a32fb6aeeda82039dcdc8afd9cf42d",
          "withoutMetadata": "ee9e2d7d6d5085afa6dea2006880abe211a32fb6aeeda82039dcdc8afd9cf42d",
          "linkedWithoutMetadata": "ee9e2d7d6d5085afa6dea2006880abe211a32fb6aeeda82039dcdc8afd9cf42d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "nexus/verification/ethereum/Verifier.sol:7",
        "version": {
          "withMetadata": "cedf8999578aa5dff4bc1450064ecfd98f5f844021597699aef586daa505b1a6",
          "withoutMetadata": "cedf8999578aa5dff4bc1450064ecfd98f5f844021597699aef586daa505b1a6",
          "linkedWithoutMetadata": "cedf8999578aa5dff4bc1450064ecfd98f5f844021597699aef586daa505b1a6"
        },
        "inherit": [
          "nexus/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "nexus/verification/ethereum/Verifier.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "nexus/verification/ethereum/Verifier.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "09f502b25fbaed20332129bb1bcdbc9870f6410f3748eab95a4b680e8849bbab",
          "withoutMetadata": "09f502b25fbaed20332129bb1bcdbc9870f6410f3748eab95a4b680e8849bbab",
          "linkedWithoutMetadata": "09f502b25fbaed20332129bb1bcdbc9870f6410f3748eab95a4b680e8849bbab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:11",
        "version": {
          "withMetadata": "3b76283be61c42ec0975f50188053b0f387eaf0dfca240c292c13c2f3a1fae10",
          "withoutMetadata": "3b76283be61c42ec0975f50188053b0f387eaf0dfca240c292c13c2f3a1fae10",
          "linkedWithoutMetadata": "3b76283be61c42ec0975f50188053b0f387eaf0dfca240c292c13c2f3a1fae10"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "0b157cc2f3ec933324e2046b7934ec92879bc6cd28e523fc890cea3954f6a19f",
          "withoutMetadata": "0b157cc2f3ec933324e2046b7934ec92879bc6cd28e523fc890cea3954f6a19f",
          "linkedWithoutMetadata": "0b157cc2f3ec933324e2046b7934ec92879bc6cd28e523fc890cea3954f6a19f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:10",
        "version": {
          "withMetadata": "01427d45f2f2bd3264b8047c9a498379bb36978a5bf4aa90a12d7c793e7d8772",
          "withoutMetadata": "01427d45f2f2bd3264b8047c9a498379bb36978a5bf4aa90a12d7c793e7d8772",
          "linkedWithoutMetadata": "01427d45f2f2bd3264b8047c9a498379bb36978a5bf4aa90a12d7c793e7d8772"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "eb5225855f882fbbd027b83ff0d1fa82b31afc00192503c855b0c11dfbef7d90",
          "withoutMetadata": "eb5225855f882fbbd027b83ff0d1fa82b31afc00192503c855b0c11dfbef7d90",
          "linkedWithoutMetadata": "eb5225855f882fbbd027b83ff0d1fa82b31afc00192503c855b0c11dfbef7d90"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "34d813a8df0f80f5ae35f183c5208c6043f4c27343e37c1922d4c562f46687a0",
          "withoutMetadata": "34d813a8df0f80f5ae35f183c5208c6043f4c27343e37c1922d4c562f46687a0",
          "linkedWithoutMetadata": "34d813a8df0f80f5ae35f183c5208c6043f4c27343e37c1922d4c562f46687a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "757dcad7481086b7aa8935498d95146604f09201771488a96d2ccd63c8747f3b",
          "withoutMetadata": "757dcad7481086b7aa8935498d95146604f09201771488a96d2ccd63c8747f3b",
          "linkedWithoutMetadata": "757dcad7481086b7aa8935498d95146604f09201771488a96d2ccd63c8747f3b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:24",
        "version": {
          "withMetadata": "04159eff6ebfb5feaab7d2965dee086f910254826a6684f66da7a2aa70702486",
          "withoutMetadata": "04159eff6ebfb5feaab7d2965dee086f910254826a6684f66da7a2aa70702486",
          "linkedWithoutMetadata": "04159eff6ebfb5feaab7d2965dee086f910254826a6684f66da7a2aa70702486"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)28045",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:26"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)28045": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "7a28885e5aeb3eecc6c90b149d1fdeed3d5621b96d681cd5323bc434905dd89c",
          "withoutMetadata": "7a28885e5aeb3eecc6c90b149d1fdeed3d5621b96d681cd5323bc434905dd89c",
          "linkedWithoutMetadata": "7a28885e5aeb3eecc6c90b149d1fdeed3d5621b96d681cd5323bc434905dd89c"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "6a99c54e30006eac0deb50d1617912ba86558aeb539b924c05df770b2f97ae05",
          "withoutMetadata": "6a99c54e30006eac0deb50d1617912ba86558aeb539b924c05df770b2f97ae05",
          "linkedWithoutMetadata": "6a99c54e30006eac0deb50d1617912ba86558aeb539b924c05df770b2f97ae05"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "78670d17b6f86ec7e891c4eef9cf95c566074afa4e858761db053936af9cd5fa",
          "withoutMetadata": "78670d17b6f86ec7e891c4eef9cf95c566074afa4e858761db053936af9cd5fa",
          "linkedWithoutMetadata": "78670d17b6f86ec7e891c4eef9cf95c566074afa4e858761db053936af9cd5fa"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "bfefba5fc2f603eacf5dc508b5cd63cdd5f5fc044c1905bdd94f89185f434829",
          "withoutMetadata": "bfefba5fc2f603eacf5dc508b5cd63cdd5f5fc044c1905bdd94f89185f434829",
          "linkedWithoutMetadata": "bfefba5fc2f603eacf5dc508b5cd63cdd5f5fc044c1905bdd94f89185f434829"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "c6a98c57bef89dfed2bdb15e9233428452b196c721e1f71f26ec50a2b6e02f85",
          "withoutMetadata": "c6a98c57bef89dfed2bdb15e9233428452b196c721e1f71f26ec50a2b6e02f85",
          "linkedWithoutMetadata": "c6a98c57bef89dfed2bdb15e9233428452b196c721e1f71f26ec50a2b6e02f85"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "4ca7d11f1da4021b2bfb98a6939afa892a0a5ba7a00b9522c32b09aeb0639a53",
          "withoutMetadata": "4ca7d11f1da4021b2bfb98a6939afa892a0a5ba7a00b9522c32b09aeb0639a53",
          "linkedWithoutMetadata": "4ca7d11f1da4021b2bfb98a6939afa892a0a5ba7a00b9522c32b09aeb0639a53"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "4b311968ea1f0a5899e1924d096b4704b126d1e5dcbe328fe6ca60b6926196d5",
          "withoutMetadata": "4b311968ea1f0a5899e1924d096b4704b126d1e5dcbe328fe6ca60b6926196d5",
          "linkedWithoutMetadata": "4b311968ea1f0a5899e1924d096b4704b126d1e5dcbe328fe6ca60b6926196d5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0075bf8f4176a05bdb31e1adb6bdbcb5725715e6688fb168d1f501fdc8ffc0c0",
          "withoutMetadata": "0075bf8f4176a05bdb31e1adb6bdbcb5725715e6688fb168d1f501fdc8ffc0c0",
          "linkedWithoutMetadata": "0075bf8f4176a05bdb31e1adb6bdbcb5725715e6688fb168d1f501fdc8ffc0c0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9271554048fefd111230ade20b6d8a094672f36ea79e38c88853aa61a52fb7d3",
          "withoutMetadata": "9271554048fefd111230ade20b6d8a094672f36ea79e38c88853aa61a52fb7d3",
          "linkedWithoutMetadata": "9271554048fefd111230ade20b6d8a094672f36ea79e38c88853aa61a52fb7d3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "42bf05c6904a8afa4755bf3c32fcbc9f7dbdfb2f638c8f595f7fbac0edff02e7",
          "withoutMetadata": "42bf05c6904a8afa4755bf3c32fcbc9f7dbdfb2f638c8f595f7fbac0edff02e7",
          "linkedWithoutMetadata": "42bf05c6904a8afa4755bf3c32fcbc9f7dbdfb2f638c8f595f7fbac0edff02e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "598f894ac2fa7794336059d112e229ac7d3bbfc042c2217e894aee19f51c4ef2",
          "withoutMetadata": "598f894ac2fa7794336059d112e229ac7d3bbfc042c2217e894aee19f51c4ef2",
          "linkedWithoutMetadata": "598f894ac2fa7794336059d112e229ac7d3bbfc042c2217e894aee19f51c4ef2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "ab1757e7160548f7391e1cc315c406b0b30f1c7e2c04a80faafff8fe6a36fea5",
          "withoutMetadata": "ab1757e7160548f7391e1cc315c406b0b30f1c7e2c04a80faafff8fe6a36fea5",
          "linkedWithoutMetadata": "ab1757e7160548f7391e1cc315c406b0b30f1c7e2c04a80faafff8fe6a36fea5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "cb96a330ba83016dc726ca735ee7b6b3b5701d7ad7e8a080ec9261dd537ce86c",
          "withoutMetadata": "cb96a330ba83016dc726ca735ee7b6b3b5701d7ad7e8a080ec9261dd537ce86c",
          "linkedWithoutMetadata": "cb96a330ba83016dc726ca735ee7b6b3b5701d7ad7e8a080ec9261dd537ce86c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/bridge/NexusBridge.sol:19",
        "version": {
          "withMetadata": "691f06640865b9ea7b0c3a6bf5199479ea292b0d30cda3b6653dfae83226e71b",
          "withoutMetadata": "691f06640865b9ea7b0c3a6bf5199479ea292b0d30cda3b6653dfae83226e71b",
          "linkedWithoutMetadata": "691f06640865b9ea7b0c3a6bf5199479ea292b0d30cda3b6653dfae83226e71b"
        },
        "inherit": [
          "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:30"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:32"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:34"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:36"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10532",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:38"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:39"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)21517",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:40"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:41"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:43"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:44"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)21517": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10532": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "03759e19b6e27d0e912af3554513a95bc329ffed0a7f1084c868b4d3ea331db0",
          "withoutMetadata": "03759e19b6e27d0e912af3554513a95bc329ffed0a7f1084c868b4d3ea331db0",
          "linkedWithoutMetadata": "03759e19b6e27d0e912af3554513a95bc329ffed0a7f1084c868b4d3ea331db0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "f3af7ce76cb1ce3cc85c1629156fdbeeee2e76ddbda7b99c833fb8b4ee1da68d",
          "withoutMetadata": "f3af7ce76cb1ce3cc85c1629156fdbeeee2e76ddbda7b99c833fb8b4ee1da68d",
          "linkedWithoutMetadata": "f3af7ce76cb1ce3cc85c1629156fdbeeee2e76ddbda7b99c833fb8b4ee1da68d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "46fb0629603a0b66d60cb616c5a10ea072eac0cdd99bf620d618e50faca3f499",
          "withoutMetadata": "46fb0629603a0b66d60cb616c5a10ea072eac0cdd99bf620d618e50faca3f499",
          "linkedWithoutMetadata": "46fb0629603a0b66d60cb616c5a10ea072eac0cdd99bf620d618e50faca3f499"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "edd39e50e85d8bc2686327e19e0647bc02f06610ab6ebafe9cc55948dcdee32b",
          "withoutMetadata": "edd39e50e85d8bc2686327e19e0647bc02f06610ab6ebafe9cc55948dcdee32b",
          "linkedWithoutMetadata": "edd39e50e85d8bc2686327e19e0647bc02f06610ab6ebafe9cc55948dcdee32b"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes)",
          "withdrawNFT(bytes32,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/zknft-mailbox/NFT.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)20942",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockNFTMap",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_struct(LockNFT)11403_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusMailbox)20942": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LockNFT)11403_storage)": {
              "label": "mapping(bytes32 => struct LockNFT)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockNFT)11403_storage": {
              "label": "struct LockNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "a018cb581c0473317bc988385ba533ed4d5094ae0a166ec9197e343f6848e738",
          "withoutMetadata": "a018cb581c0473317bc988385ba533ed4d5094ae0a166ec9197e343f6848e738",
          "linkedWithoutMetadata": "a018cb581c0473317bc988385ba533ed4d5094ae0a166ec9197e343f6848e738"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)20942",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "paymentFrom",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(PendingPayment)11412_storage)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)20942": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(PendingPayment)11412_storage)": {
              "label": "mapping(uint256 => struct PendingPayment)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11412_storage": {
              "label": "struct PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "af1faadd5e1c9248c7fb2cb828cac0e091025a2d20000a1d82a77173c35f6055",
          "withoutMetadata": "af1faadd5e1c9248c7fb2cb828cac0e091025a2d20000a1d82a77173c35f6055",
          "linkedWithoutMetadata": "af1faadd5e1c9248c7fb2cb828cac0e091025a2d20000a1d82a77173c35f6055"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)28142",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)28142": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/zknft/NftPayment.sol:9",
        "version": {
          "withMetadata": "efa58c01f1eb10caf6b7b60422a1d9be0a2904212d1ae08aa4045d3981b085cc",
          "withoutMetadata": "efa58c01f1eb10caf6b7b60422a1d9be0a2904212d1ae08aa4045d3981b085cc",
          "linkedWithoutMetadata": "efa58c01f1eb10caf6b7b60422a1d9be0a2904212d1ae08aa4045d3981b085cc"
        },
        "inherit": [
          "nexus/verification/ethereum/Verifier.sol:EthereumVerifier",
          "nexus/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/zknft/NftPayment.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/zknft/NftPayment.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)20983",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:10"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:12"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:15"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11665_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11665_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20983": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11665_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/Payment.sol:Payment": {
        "src": "contracts/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "3b5deb734f1bb5c6d59994ff5c6ec2b7c906a76385e17da57f3c2114918be2fa",
          "withoutMetadata": "3b5deb734f1bb5c6d59994ff5c6ec2b7c906a76385e17da57f3c2114918be2fa",
          "linkedWithoutMetadata": "3b5deb734f1bb5c6d59994ff5c6ec2b7c906a76385e17da57f3c2114918be2fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusMailbox.sol:NexusMailbox": {
        "src": "nexus/NexusMailbox.sol:10",
        "version": {
          "withMetadata": "51e1e01e486264262f8147beabbda8c3dbb7d296babbfda2021cc95dd5289546",
          "withoutMetadata": "51e1e01e486264262f8147beabbda8c3dbb7d296babbfda2021cc95dd5289546",
          "linkedWithoutMetadata": "51e1e01e486264262f8147beabbda8c3dbb7d296babbfda2021cc95dd5289546"
        },
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable",
          "nexus/interfaces/INexusMailbox.sol:INexusMailbox"
        ],
        "libraries": [],
        "methods": [
          "initialize(bytes32)",
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)",
          "addOrUpdateWrapper(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "messages",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_bytes32)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:15"
            },
            {
              "label": "verifierWrappers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21003)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:16"
            },
            {
              "label": "verifiedReceipts",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(MailboxMessage)20902_storage)",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:17"
            },
            {
              "label": "nexusAppId",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "NexusMailbox",
              "src": "nexus/NexusMailbox.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(INexusVerifierWrapper)21003": {
              "label": "contract INexusVerifierWrapper",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_bytes32)": {
              "label": "mapping(bytes32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_contract(INexusVerifierWrapper)21003)": {
              "label": "mapping(bytes32 => contract INexusVerifierWrapper)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(MailboxMessage)20902_storage)": {
              "label": "mapping(bytes32 => struct MailboxMessage)",
              "numberOfBytes": "32"
            },
            "t_struct(MailboxMessage)20902_storage": {
              "label": "struct MailboxMessage",
              "members": [
                {
                  "label": "nexusAppIdFrom",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nexusAppIdTo",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "to",
                  "type": "t_array(t_address)dyn_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "nexus/NexusProofManager.sol:NexusProofManager": {
        "src": "nexus/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "506e6967c2fa8f00dc9f26959aa1140e7b75686bf440f6fc3aa2faa3ae6a2ec8",
          "withoutMetadata": "506e6967c2fa8f00dc9f26959aa1140e7b75686bf440f6fc3aa2faa3ae6a2ec8",
          "linkedWithoutMetadata": "506e6967c2fa8f00dc9f26959aa1140e7b75686bf440f6fc3aa2faa3ae6a2ec8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "nexus/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)20651_storage)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIdToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIdToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "nexus/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)20651_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)20651_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusReceiver.sol:INexusReceiver": {
        "src": "nexus/interfaces/INexusReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "callback(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusVerifierWrapper.sol:INexusVerifierWrapper": {
        "src": "nexus/interfaces/INexusVerifierWrapper.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "parseAndVerify(uint256,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "nexus/lib/JellyfishMerkleTreeVerifier.sol:4",
        "version": {
          "withMetadata": "f31f139fc9713e16c6cc8c42cdfeed25eb9e480552f08d3df2e2c92dda1acbd4",
          "withoutMetadata": "f31f139fc9713e16c6cc8c42cdfeed25eb9e480552f08d3df2e2c92dda1acbd4",
          "linkedWithoutMetadata": "f31f139fc9713e16c6cc8c42cdfeed25eb9e480552f08d3df2e2c92dda1acbd4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "nexus/verification/ethereum/StorageProof.sol:7",
        "version": {
          "withMetadata": "9b9f5a8299b65c75bbe3728a692133bf7783b32160cbffe42c21f735a16d5e4e",
          "withoutMetadata": "9b9f5a8299b65c75bbe3728a692133bf7783b32160cbffe42c21f735a16d5e4e",
          "linkedWithoutMetadata": "9b9f5a8299b65c75bbe3728a692133bf7783b32160cbffe42c21f735a16d5e4e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "nexus/verification/ethereum/Verifier.sol:7",
        "version": {
          "withMetadata": "59a1d87ef9f81c6e14f492d413d7479c45dea4e790429f869d392527e6db27df",
          "withoutMetadata": "59a1d87ef9f81c6e14f492d413d7479c45dea4e790429f869d392527e6db27df",
          "linkedWithoutMetadata": "59a1d87ef9f81c6e14f492d413d7479c45dea4e790429f869d392527e6db27df"
        },
        "inherit": [
          "nexus/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "nexus/verification/ethereum/Verifier.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "nexus/verification/ethereum/Verifier.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "618d1191e5ebcca1ab9d454ae778ccc61eb1e70466ccce80b88abc47750e4c12",
          "withoutMetadata": "618d1191e5ebcca1ab9d454ae778ccc61eb1e70466ccce80b88abc47750e4c12",
          "linkedWithoutMetadata": "618d1191e5ebcca1ab9d454ae778ccc61eb1e70466ccce80b88abc47750e4c12"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "nexus/verification/ethereum/lib/rlp/Lib_RLPWriter.sol:11",
        "version": {
          "withMetadata": "9b80bf02bbfcdb2f01c0129894cd7535c9145c8a37694bfa5c02c8cafe1cb332",
          "withoutMetadata": "9b80bf02bbfcdb2f01c0129894cd7535c9145c8a37694bfa5c02c8cafe1cb332",
          "linkedWithoutMetadata": "9b80bf02bbfcdb2f01c0129894cd7535c9145c8a37694bfa5c02c8cafe1cb332"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "cad3cd58d5a27a4e564da2011bc2c095697e00ffd1f05f28439f2f9312f8f4b0",
          "withoutMetadata": "cad3cd58d5a27a4e564da2011bc2c095697e00ffd1f05f28439f2f9312f8f4b0",
          "linkedWithoutMetadata": "cad3cd58d5a27a4e564da2011bc2c095697e00ffd1f05f28439f2f9312f8f4b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "nexus/verification/ethereum/lib/trie/Lib_SecureMerkleTrie.sol:10",
        "version": {
          "withMetadata": "b0c293fc64ba87b497dfc3aac4ac51041a7503e1f0e640d6d37c21965ece56ed",
          "withoutMetadata": "b0c293fc64ba87b497dfc3aac4ac51041a7503e1f0e640d6d37c21965ece56ed",
          "linkedWithoutMetadata": "b0c293fc64ba87b497dfc3aac4ac51041a7503e1f0e640d6d37c21965ece56ed"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "nexus/verification/ethereum/lib/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "5b64c13911fb6f8de5dc1d2f43c354ec2936a0f71a0fca83f953cfb004745006",
          "withoutMetadata": "5b64c13911fb6f8de5dc1d2f43c354ec2936a0f71a0fca83f953cfb004745006",
          "linkedWithoutMetadata": "5b64c13911fb6f8de5dc1d2f43c354ec2936a0f71a0fca83f953cfb004745006"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "7b530356ba8669dbdfb5247680e192a36684d18a907a45b30d6f7059228acdb0",
          "withoutMetadata": "7b530356ba8669dbdfb5247680e192a36684d18a907a45b30d6f7059228acdb0",
          "linkedWithoutMetadata": "7b530356ba8669dbdfb5247680e192a36684d18a907a45b30d6f7059228acdb0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "aeaa5ca98b667c80a1a745e5c044b7592af563464770c16c74a1f077d519e5fb",
          "withoutMetadata": "aeaa5ca98b667c80a1a745e5c044b7592af563464770c16c74a1f077d519e5fb",
          "linkedWithoutMetadata": "aeaa5ca98b667c80a1a745e5c044b7592af563464770c16c74a1f077d519e5fb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:24",
        "version": {
          "withMetadata": "ef689b71ec13adbc68d4242db12380a8ec2ecfba57d61b55edf327c3fd627e40",
          "withoutMetadata": "ef689b71ec13adbc68d4242db12380a8ec2ecfba57d61b55edf327c3fd627e40",
          "linkedWithoutMetadata": "ef689b71ec13adbc68d4242db12380a8ec2ecfba57d61b55edf327c3fd627e40"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)28045",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:26"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)28045": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "7a28885e5aeb3eecc6c90b149d1fdeed3d5621b96d681cd5323bc434905dd89c",
          "withoutMetadata": "7a28885e5aeb3eecc6c90b149d1fdeed3d5621b96d681cd5323bc434905dd89c",
          "linkedWithoutMetadata": "7a28885e5aeb3eecc6c90b149d1fdeed3d5621b96d681cd5323bc434905dd89c"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "6a99c54e30006eac0deb50d1617912ba86558aeb539b924c05df770b2f97ae05",
          "withoutMetadata": "6a99c54e30006eac0deb50d1617912ba86558aeb539b924c05df770b2f97ae05",
          "linkedWithoutMetadata": "6a99c54e30006eac0deb50d1617912ba86558aeb539b924c05df770b2f97ae05"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "78670d17b6f86ec7e891c4eef9cf95c566074afa4e858761db053936af9cd5fa",
          "withoutMetadata": "78670d17b6f86ec7e891c4eef9cf95c566074afa4e858761db053936af9cd5fa",
          "linkedWithoutMetadata": "78670d17b6f86ec7e891c4eef9cf95c566074afa4e858761db053936af9cd5fa"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "bfefba5fc2f603eacf5dc508b5cd63cdd5f5fc044c1905bdd94f89185f434829",
          "withoutMetadata": "bfefba5fc2f603eacf5dc508b5cd63cdd5f5fc044c1905bdd94f89185f434829",
          "linkedWithoutMetadata": "bfefba5fc2f603eacf5dc508b5cd63cdd5f5fc044c1905bdd94f89185f434829"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "c6a98c57bef89dfed2bdb15e9233428452b196c721e1f71f26ec50a2b6e02f85",
          "withoutMetadata": "c6a98c57bef89dfed2bdb15e9233428452b196c721e1f71f26ec50a2b6e02f85",
          "linkedWithoutMetadata": "c6a98c57bef89dfed2bdb15e9233428452b196c721e1f71f26ec50a2b6e02f85"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "4ca7d11f1da4021b2bfb98a6939afa892a0a5ba7a00b9522c32b09aeb0639a53",
          "withoutMetadata": "4ca7d11f1da4021b2bfb98a6939afa892a0a5ba7a00b9522c32b09aeb0639a53",
          "linkedWithoutMetadata": "4ca7d11f1da4021b2bfb98a6939afa892a0a5ba7a00b9522c32b09aeb0639a53"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "4b311968ea1f0a5899e1924d096b4704b126d1e5dcbe328fe6ca60b6926196d5",
          "withoutMetadata": "4b311968ea1f0a5899e1924d096b4704b126d1e5dcbe328fe6ca60b6926196d5",
          "linkedWithoutMetadata": "4b311968ea1f0a5899e1924d096b4704b126d1e5dcbe328fe6ca60b6926196d5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0075bf8f4176a05bdb31e1adb6bdbcb5725715e6688fb168d1f501fdc8ffc0c0",
          "withoutMetadata": "0075bf8f4176a05bdb31e1adb6bdbcb5725715e6688fb168d1f501fdc8ffc0c0",
          "linkedWithoutMetadata": "0075bf8f4176a05bdb31e1adb6bdbcb5725715e6688fb168d1f501fdc8ffc0c0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9271554048fefd111230ade20b6d8a094672f36ea79e38c88853aa61a52fb7d3",
          "withoutMetadata": "9271554048fefd111230ade20b6d8a094672f36ea79e38c88853aa61a52fb7d3",
          "linkedWithoutMetadata": "9271554048fefd111230ade20b6d8a094672f36ea79e38c88853aa61a52fb7d3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "42bf05c6904a8afa4755bf3c32fcbc9f7dbdfb2f638c8f595f7fbac0edff02e7",
          "withoutMetadata": "42bf05c6904a8afa4755bf3c32fcbc9f7dbdfb2f638c8f595f7fbac0edff02e7",
          "linkedWithoutMetadata": "42bf05c6904a8afa4755bf3c32fcbc9f7dbdfb2f638c8f595f7fbac0edff02e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "598f894ac2fa7794336059d112e229ac7d3bbfc042c2217e894aee19f51c4ef2",
          "withoutMetadata": "598f894ac2fa7794336059d112e229ac7d3bbfc042c2217e894aee19f51c4ef2",
          "linkedWithoutMetadata": "598f894ac2fa7794336059d112e229ac7d3bbfc042c2217e894aee19f51c4ef2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "ab1757e7160548f7391e1cc315c406b0b30f1c7e2c04a80faafff8fe6a36fea5",
          "withoutMetadata": "ab1757e7160548f7391e1cc315c406b0b30f1c7e2c04a80faafff8fe6a36fea5",
          "linkedWithoutMetadata": "ab1757e7160548f7391e1cc315c406b0b30f1c7e2c04a80faafff8fe6a36fea5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "cb96a330ba83016dc726ca735ee7b6b3b5701d7ad7e8a080ec9261dd537ce86c",
          "withoutMetadata": "cb96a330ba83016dc726ca735ee7b6b3b5701d7ad7e8a080ec9261dd537ce86c",
          "linkedWithoutMetadata": "cb96a330ba83016dc726ca735ee7b6b3b5701d7ad7e8a080ec9261dd537ce86c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/bridge/NexusBridge.sol:19",
        "version": {
          "withMetadata": "20c8793208f1d5539df2c59a22caf9973d9f4eb65aefdd6037991d679c25f6bb",
          "withoutMetadata": "20c8793208f1d5539df2c59a22caf9973d9f4eb65aefdd6037991d679c25f6bb",
          "linkedWithoutMetadata": "20c8793208f1d5539df2c59a22caf9973d9f4eb65aefdd6037991d679c25f6bb"
        },
        "inherit": [
          "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:30"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:32"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:34"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:36"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10532",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:38"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)20176",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:39"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)24133",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:40"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:41"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:43"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:44"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/bridge/NexusBridge.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)24133": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10532": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)20176": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "03759e19b6e27d0e912af3554513a95bc329ffed0a7f1084c868b4d3ea331db0",
          "withoutMetadata": "03759e19b6e27d0e912af3554513a95bc329ffed0a7f1084c868b4d3ea331db0",
          "linkedWithoutMetadata": "03759e19b6e27d0e912af3554513a95bc329ffed0a7f1084c868b4d3ea331db0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "f3af7ce76cb1ce3cc85c1629156fdbeeee2e76ddbda7b99c833fb8b4ee1da68d",
          "withoutMetadata": "f3af7ce76cb1ce3cc85c1629156fdbeeee2e76ddbda7b99c833fb8b4ee1da68d",
          "linkedWithoutMetadata": "f3af7ce76cb1ce3cc85c1629156fdbeeee2e76ddbda7b99c833fb8b4ee1da68d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "46fb0629603a0b66d60cb616c5a10ea072eac0cdd99bf620d618e50faca3f499",
          "withoutMetadata": "46fb0629603a0b66d60cb616c5a10ea072eac0cdd99bf620d618e50faca3f499",
          "linkedWithoutMetadata": "46fb0629603a0b66d60cb616c5a10ea072eac0cdd99bf620d618e50faca3f499"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NFT.sol:MyNFTMailbox": {
        "src": "contracts/zknft-mailbox/NFT.sol:9",
        "version": {
          "withMetadata": "0bde14552c64e4f9e331d5489c0ec57c51dc1625fcb60933b0835e2184b0b351",
          "withoutMetadata": "0bde14552c64e4f9e331d5489c0ec57c51dc1625fcb60933b0835e2184b0b351",
          "linkedWithoutMetadata": "0bde14552c64e4f9e331d5489c0ec57c51dc1625fcb60933b0835e2184b0b351"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address)",
          "setNftPaymentContractAddress(address)",
          "lockNFT(uint256,uint256,address)",
          "transferNFT(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "onNexusMessage(bytes32,address,bytes)",
          "withdrawNFT(bytes32,bytes)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFTMailbox",
            "src": "contracts/zknft-mailbox/NFT.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentNexusId",
            "src": "contracts/zknft-mailbox/NFT.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nonce",
            "src": "contracts/zknft-mailbox/NFT.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(INexusMailbox)20135",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:10"
            },
            {
              "label": "paymentContractAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:13"
            },
            {
              "label": "lockNFTMap",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_bytes32,t_struct(LockNFT)11397_storage)",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:16"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MyNFTMailbox",
              "src": "contracts/zknft-mailbox/NFT.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusMailbox)20135": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LockNFT)11397_storage)": {
              "label": "mapping(bytes32 => struct LockNFT)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(LockNFT)11397_storage": {
              "label": "struct LockNFT",
              "members": [
                {
                  "label": "from",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "blockNumber",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "nonce",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft-mailbox/NftPayment.sol:NFTPaymentMailbox": {
        "src": "contracts/zknft-mailbox/NftPayment.sol:8",
        "version": {
          "withMetadata": "2a21a5859e57b2bea43e7c40b1d61acf1cb8845fe747af8c507213b39274e46a",
          "withoutMetadata": "2a21a5859e57b2bea43e7c40b1d61acf1cb8845fe747af8c507213b39274e46a",
          "linkedWithoutMetadata": "2a21a5859e57b2bea43e7c40b1d61acf1cb8845fe747af8c507213b39274e46a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32,address)",
          "pay(address,uint256,uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPaymentMailbox",
            "src": "contracts/zknft-mailbox/NftPayment.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftNexusId",
            "src": "contracts/zknft-mailbox/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nftContractAddress",
            "src": "contracts/zknft-mailbox/NftPayment.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "mailbox",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(INexusMailbox)20135",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:9"
            },
            {
              "label": "paymentFrom",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(PendingPayment)11406_storage)",
              "contract": "NFTPaymentMailbox",
              "src": "contracts/zknft-mailbox/NftPayment.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(INexusMailbox)20135": {
              "label": "contract INexusMailbox",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(PendingPayment)11406_storage)": {
              "label": "mapping(uint256 => struct PendingPayment)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11406_storage": {
              "label": "struct PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NFT.sol:MyNFT": {
        "src": "contracts/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "f9623043c64802903fc0735b4d5ac5168077306e27dd28faae396cac92453889",
          "withoutMetadata": "f9623043c64802903fc0735b4d5ac5168077306e27dd28faae396cac92453889",
          "linkedWithoutMetadata": "f9623043c64802903fc0735b4d5ac5168077306e27dd28faae396cac92453889"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/zknft/NFT.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)20176",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)27047",
              "contract": "MyNFT",
              "src": "contracts/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20176": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)27047": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/zknft/NftPayment.sol:9",
        "version": {
          "withMetadata": "c34336522e1bb498a447ee4907382634d14f736d95225980cf9e299fb123215a",
          "withoutMetadata": "c34336522e1bb498a447ee4907382634d14f736d95225980cf9e299fb123215a",
          "linkedWithoutMetadata": "c34336522e1bb498a447ee4907382634d14f736d95225980cf9e299fb123215a"
        },
        "inherit": [
          "nexus/verification/ethereum/Verifier.sol:EthereumVerifier",
          "nexus/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/zknft/NftPayment.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/zknft/NftPayment.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/zknft/NftPayment.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)20176",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:10"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:12"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:15"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11659_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11659_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)20176": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11659_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "contracts/zknft/Payment.sol:Payment": {
        "src": "contracts/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/zknft/Payment.sol:5"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "3b5deb734f1bb5c6d59994ff5c6ec2b7c906a76385e17da57f3c2114918be2fa",
          "withoutMetadata": "3b5deb734f1bb5c6d59994ff5c6ec2b7c906a76385e17da57f3c2114918be2fa",
          "linkedWithoutMetadata": "3b5deb734f1bb5c6d59994ff5c6ec2b7c906a76385e17da57f3c2114918be2fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusMailbox.sol:INexusMailbox": {
        "src": "nexus/interfaces/INexusMailbox.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveMessage(uint256,(bytes32,bytes32[],bytes,address,address[],uint256),bytes)",
          "sendMessage(bytes32[],address[],uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "nexus/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "nexus/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "7db35143dfc4bf918949a47a552b5e82a597475b57532a4fe85d18ab5e070c88",
          "withoutMetadata": "7db35143dfc4bf918949a47a552b5e82a597475b57532a4fe85d18ab5e070c88",
          "linkedWithoutMetadata": "7db35143dfc4bf918949a47a552b5e82a597475b57532a4fe85d18ab5e070c88"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "nexus/lib/external/rlp/Lib_RLPWriter.sol:11",
        "version": {
          "withMetadata": "8fcef790c82d74bc43ac912c0d6875312ea74958fa25eb058709245da8198f24",
          "withoutMetadata": "8fcef790c82d74bc43ac912c0d6875312ea74958fa25eb058709245da8198f24",
          "linkedWithoutMetadata": "8fcef790c82d74bc43ac912c0d6875312ea74958fa25eb058709245da8198f24"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "nexus/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "6ed548f5a33a5ade7a428364980ae736d090d84899e2fb16eec55ec3c76b9af8",
          "withoutMetadata": "6ed548f5a33a5ade7a428364980ae736d090d84899e2fb16eec55ec3c76b9af8",
          "linkedWithoutMetadata": "6ed548f5a33a5ade7a428364980ae736d090d84899e2fb16eec55ec3c76b9af8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "nexus/lib/external/trie/Lib_SecureMerkleTrie.sol:10",
        "version": {
          "withMetadata": "c32957980319beda336ac979204184e6dfa13a2b9c90b45670e29195b8367848",
          "withoutMetadata": "c32957980319beda336ac979204184e6dfa13a2b9c90b45670e29195b8367848",
          "linkedWithoutMetadata": "c32957980319beda336ac979204184e6dfa13a2b9c90b45670e29195b8367848"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "nexus/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "bc4edd0272bb4d7ea6e841f26477a2b635a1856585a815c440f830efb7adb779",
          "withoutMetadata": "bc4edd0272bb4d7ea6e841f26477a2b635a1856585a815c440f830efb7adb779",
          "linkedWithoutMetadata": "bc4edd0272bb4d7ea6e841f26477a2b635a1856585a815c440f830efb7adb779"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "nexus/verification/ethereum/StorageProof.sol:7",
        "version": {
          "withMetadata": "bc9a94d944e00d8ffe782eec11f66d1df0c016fef8a9776bdb53eaeb724b466e",
          "withoutMetadata": "bc9a94d944e00d8ffe782eec11f66d1df0c016fef8a9776bdb53eaeb724b466e",
          "linkedWithoutMetadata": "bc9a94d944e00d8ffe782eec11f66d1df0c016fef8a9776bdb53eaeb724b466e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "nexus/verification/ethereum/Verifier.sol:7",
        "version": {
          "withMetadata": "4f35a4368edb4e01d05196840832a94bde314873ce1fc13eafb7336f050a9347",
          "withoutMetadata": "4f35a4368edb4e01d05196840832a94bde314873ce1fc13eafb7336f050a9347",
          "linkedWithoutMetadata": "4f35a4368edb4e01d05196840832a94bde314873ce1fc13eafb7336f050a9347"
        },
        "inherit": [
          "nexus/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "nexus/verification/ethereum/Verifier.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "nexus/verification/ethereum/Verifier.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "nexus/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "7b530356ba8669dbdfb5247680e192a36684d18a907a45b30d6f7059228acdb0",
          "withoutMetadata": "7b530356ba8669dbdfb5247680e192a36684d18a907a45b30d6f7059228acdb0",
          "linkedWithoutMetadata": "7b530356ba8669dbdfb5247680e192a36684d18a907a45b30d6f7059228acdb0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "nexus/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "aeaa5ca98b667c80a1a745e5c044b7592af563464770c16c74a1f077d519e5fb",
          "withoutMetadata": "aeaa5ca98b667c80a1a745e5c044b7592af563464770c16c74a1f077d519e5fb",
          "linkedWithoutMetadata": "aeaa5ca98b667c80a1a745e5c044b7592af563464770c16c74a1f077d519e5fb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "nexus/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "nexus/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:IZKSyncNexusManagerRouter": {
        "src": "nexus/verification/zksync/StorageProof.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      },
      "nexus/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "nexus/verification/zksync/StorageProof.sol:24",
        "version": {
          "withMetadata": "197b5705986ba54c6247227f1c43560c14a24e1ba5d1e8bf7eab621794fb8b60",
          "withoutMetadata": "197b5705986ba54c6247227f1c43560c14a24e1ba5d1e8bf7eab621794fb8b60",
          "linkedWithoutMetadata": "197b5705986ba54c6247227f1c43560c14a24e1ba5d1e8bf7eab621794fb8b60"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "nexus/verification/zksync/StorageProof.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "nexus/verification/zksync/StorageProof.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)26950",
              "contract": "StorageProofVerifier",
              "src": "nexus/verification/zksync/StorageProof.sol:26"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)26950": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.21"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "427780052f30194f322782a386be025310a2de441231afe505a57f4c9b1c282a",
          "withoutMetadata": "427780052f30194f322782a386be025310a2de441231afe505a57f4c9b1c282a",
          "linkedWithoutMetadata": "427780052f30194f322782a386be025310a2de441231afe505a57f4c9b1c282a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "51d11f87a77bd6636f7c6aa944c2908cd4237b45d20b8b695e3c5eb3d59bdb31",
          "withoutMetadata": "51d11f87a77bd6636f7c6aa944c2908cd4237b45d20b8b695e3c5eb3d59bdb31",
          "linkedWithoutMetadata": "51d11f87a77bd6636f7c6aa944c2908cd4237b45d20b8b695e3c5eb3d59bdb31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "26849ba24ef51c25d75d507c3f39208f81d95a5b436ae06700b4c24804ebe3bc",
          "withoutMetadata": "26849ba24ef51c25d75d507c3f39208f81d95a5b436ae06700b4c24804ebe3bc",
          "linkedWithoutMetadata": "26849ba24ef51c25d75d507c3f39208f81d95a5b436ae06700b4c24804ebe3bc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "f910eb178e980cf1a263fea3e6c26667f0dfae56a0cf1164a5f1299d4921af2f",
          "withoutMetadata": "f910eb178e980cf1a263fea3e6c26667f0dfae56a0cf1164a5f1299d4921af2f",
          "linkedWithoutMetadata": "f910eb178e980cf1a263fea3e6c26667f0dfae56a0cf1164a5f1299d4921af2f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "9268b543400b2c07036abe6eea39e2503802956ebfab9d6aab77c60c6fdce800",
          "withoutMetadata": "9268b543400b2c07036abe6eea39e2503802956ebfab9d6aab77c60c6fdce800",
          "linkedWithoutMetadata": "9268b543400b2c07036abe6eea39e2503802956ebfab9d6aab77c60c6fdce800"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)5536_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)5536_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)5536_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "46861172448643bad8492c0fb8afdf9f1f7663111ccfd81d0d488f8ff0ce3bdc",
          "withoutMetadata": "46861172448643bad8492c0fb8afdf9f1f7663111ccfd81d0d488f8ff0ce3bdc",
          "linkedWithoutMetadata": "46861172448643bad8492c0fb8afdf9f1f7663111ccfd81d0d488f8ff0ce3bdc"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)6862",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)7135",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)11356",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)11356": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)6862": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)7135": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "4fbd4d89280fa2798ec968cb5c7764c81e1332e1495bb5d880b65ef5f438a55f",
          "withoutMetadata": "4fbd4d89280fa2798ec968cb5c7764c81e1332e1495bb5d880b65ef5f438a55f",
          "linkedWithoutMetadata": "4fbd4d89280fa2798ec968cb5c7764c81e1332e1495bb5d880b65ef5f438a55f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "809609a9ad855f15e2bd8e46b8d766bdb62ec897d48358b1bb06bf3fc0906fe7",
          "withoutMetadata": "809609a9ad855f15e2bd8e46b8d766bdb62ec897d48358b1bb06bf3fc0906fe7",
          "linkedWithoutMetadata": "809609a9ad855f15e2bd8e46b8d766bdb62ec897d48358b1bb06bf3fc0906fe7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "40ac88e078f84dd5e64a56e2aabb94173179574b1604bf2bcce7543c020299d5",
          "withoutMetadata": "40ac88e078f84dd5e64a56e2aabb94173179574b1604bf2bcce7543c020299d5",
          "linkedWithoutMetadata": "40ac88e078f84dd5e64a56e2aabb94173179574b1604bf2bcce7543c020299d5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "1a22d130378c79dbe3cbbacc531e39a9635266b81c58279d8c9c04dc041b3b28",
          "withoutMetadata": "1a22d130378c79dbe3cbbacc531e39a9635266b81c58279d8c9c04dc041b3b28",
          "linkedWithoutMetadata": "1a22d130378c79dbe3cbbacc531e39a9635266b81c58279d8c9c04dc041b3b28"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "e870029e5ef121ee83f61057c763eb11fea4137fb7a11b960a3a3c6a28a4b638",
          "withoutMetadata": "e870029e5ef121ee83f61057c763eb11fea4137fb7a11b960a3a3c6a28a4b638",
          "linkedWithoutMetadata": "e870029e5ef121ee83f61057c763eb11fea4137fb7a11b960a3a3c6a28a4b638"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "80f2784e68ca698c16be51389cb9996055b1523f861408c611475a7a8628c631",
          "withoutMetadata": "80f2784e68ca698c16be51389cb9996055b1523f861408c611475a7a8628c631",
          "linkedWithoutMetadata": "80f2784e68ca698c16be51389cb9996055b1523f861408c611475a7a8628c631"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "f5ea5ad9e20d4cdaee186729eadbcae58ddef512897f72e0e3b6fde58e919113",
          "withoutMetadata": "f5ea5ad9e20d4cdaee186729eadbcae58ddef512897f72e0e3b6fde58e919113",
          "linkedWithoutMetadata": "f5ea5ad9e20d4cdaee186729eadbcae58ddef512897f72e0e3b6fde58e919113"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "2e8897eda0a0cad6a82520d817f43258d5371f352099e57d94baae116bcc71aa",
          "withoutMetadata": "2e8897eda0a0cad6a82520d817f43258d5371f352099e57d94baae116bcc71aa",
          "linkedWithoutMetadata": "2e8897eda0a0cad6a82520d817f43258d5371f352099e57d94baae116bcc71aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "27ce6e54f2a521464e497f2fe2f25dda0a9aa67c8ce8841b49a599d6ee0b9d59",
          "withoutMetadata": "27ce6e54f2a521464e497f2fe2f25dda0a9aa67c8ce8841b49a599d6ee0b9d59",
          "linkedWithoutMetadata": "27ce6e54f2a521464e497f2fe2f25dda0a9aa67c8ce8841b49a599d6ee0b9d59"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "cc1c4c1503ef1bb571c02d73ba0dc0c31ad20e3e633424ba14f335f33b63d245",
          "withoutMetadata": "cc1c4c1503ef1bb571c02d73ba0dc0c31ad20e3e633424ba14f335f33b63d245",
          "linkedWithoutMetadata": "cc1c4c1503ef1bb571c02d73ba0dc0c31ad20e3e633424ba14f335f33b63d245"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "e92a80ab472900d7a2e260708779dc98c218cd67a6f59e0594a736f22fce5236",
          "withoutMetadata": "e92a80ab472900d7a2e260708779dc98c218cd67a6f59e0594a736f22fce5236",
          "linkedWithoutMetadata": "e92a80ab472900d7a2e260708779dc98c218cd67a6f59e0594a736f22fce5236"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "924fd18a1b0d311da6167bc9ff15019ae06d4f9b42cb99a7e5cea43bb0224353",
          "withoutMetadata": "924fd18a1b0d311da6167bc9ff15019ae06d4f9b42cb99a7e5cea43bb0224353",
          "linkedWithoutMetadata": "924fd18a1b0d311da6167bc9ff15019ae06d4f9b42cb99a7e5cea43bb0224353"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "2b457487d324e2a8e3f274ffdcc22d7148d725b8998a2b0cb4f289fd189b9fee",
          "withoutMetadata": "2b457487d324e2a8e3f274ffdcc22d7148d725b8998a2b0cb4f289fd189b9fee",
          "linkedWithoutMetadata": "2b457487d324e2a8e3f274ffdcc22d7148d725b8998a2b0cb4f289fd189b9fee"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "c5b2befe02c43641753c603731395b62494cf45663773a28fb241f036f60a1e6",
          "withoutMetadata": "c5b2befe02c43641753c603731395b62494cf45663773a28fb241f036f60a1e6",
          "linkedWithoutMetadata": "c5b2befe02c43641753c603731395b62494cf45663773a28fb241f036f60a1e6"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "4846e4865b5216c948cf21b7d8ad01c2b9b2d20ee4fbe2f285de081036e9eaf8",
          "withoutMetadata": "4846e4865b5216c948cf21b7d8ad01c2b9b2d20ee4fbe2f285de081036e9eaf8",
          "linkedWithoutMetadata": "4846e4865b5216c948cf21b7d8ad01c2b9b2d20ee4fbe2f285de081036e9eaf8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "7c8d09b73b5022755f379941db27861628aebc8aa844bff476aced41edf11c2f",
          "withoutMetadata": "7c8d09b73b5022755f379941db27861628aebc8aa844bff476aced41edf11c2f",
          "linkedWithoutMetadata": "7c8d09b73b5022755f379941db27861628aebc8aa844bff476aced41edf11c2f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "703064313aac679d25a3de4697416ce36bf41543a682313a728a75459a5e7d72",
          "withoutMetadata": "703064313aac679d25a3de4697416ce36bf41543a682313a728a75459a5e7d72",
          "linkedWithoutMetadata": "703064313aac679d25a3de4697416ce36bf41543a682313a728a75459a5e7d72"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "427780052f30194f322782a386be025310a2de441231afe505a57f4c9b1c282a",
          "withoutMetadata": "427780052f30194f322782a386be025310a2de441231afe505a57f4c9b1c282a",
          "linkedWithoutMetadata": "427780052f30194f322782a386be025310a2de441231afe505a57f4c9b1c282a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "51d11f87a77bd6636f7c6aa944c2908cd4237b45d20b8b695e3c5eb3d59bdb31",
          "withoutMetadata": "51d11f87a77bd6636f7c6aa944c2908cd4237b45d20b8b695e3c5eb3d59bdb31",
          "linkedWithoutMetadata": "51d11f87a77bd6636f7c6aa944c2908cd4237b45d20b8b695e3c5eb3d59bdb31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "de79bab275b63daa61fd4cc8e112ab1e35c9fe526f4e4ea49604e4e2e97781ec",
          "withoutMetadata": "de79bab275b63daa61fd4cc8e112ab1e35c9fe526f4e4ea49604e4e2e97781ec",
          "linkedWithoutMetadata": "de79bab275b63daa61fd4cc8e112ab1e35c9fe526f4e4ea49604e4e2e97781ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "26849ba24ef51c25d75d507c3f39208f81d95a5b436ae06700b4c24804ebe3bc",
          "withoutMetadata": "26849ba24ef51c25d75d507c3f39208f81d95a5b436ae06700b4c24804ebe3bc",
          "linkedWithoutMetadata": "26849ba24ef51c25d75d507c3f39208f81d95a5b436ae06700b4c24804ebe3bc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "f910eb178e980cf1a263fea3e6c26667f0dfae56a0cf1164a5f1299d4921af2f",
          "withoutMetadata": "f910eb178e980cf1a263fea3e6c26667f0dfae56a0cf1164a5f1299d4921af2f",
          "linkedWithoutMetadata": "f910eb178e980cf1a263fea3e6c26667f0dfae56a0cf1164a5f1299d4921af2f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "1e702b22e430907b40a5ac924889697a530e0062b5f3a38d5d32a4df784d8c66",
          "withoutMetadata": "1e702b22e430907b40a5ac924889697a530e0062b5f3a38d5d32a4df784d8c66",
          "linkedWithoutMetadata": "1e702b22e430907b40a5ac924889697a530e0062b5f3a38d5d32a4df784d8c66"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "6d6c178e1d978a5277a11e3afebadb2b8dbe91663a15a528d0716b206e823397",
          "withoutMetadata": "6d6c178e1d978a5277a11e3afebadb2b8dbe91663a15a528d0716b206e823397",
          "linkedWithoutMetadata": "6d6c178e1d978a5277a11e3afebadb2b8dbe91663a15a528d0716b206e823397"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:22",
        "version": {
          "withMetadata": "10a123a1fded99ddf6ebe3962c98175307e60cc88bf3d6721867c84fbf1ba125",
          "withoutMetadata": "10a123a1fded99ddf6ebe3962c98175307e60cc88bf3d6721867c84fbf1ba125",
          "linkedWithoutMetadata": "10a123a1fded99ddf6ebe3962c98175307e60cc88bf3d6721867c84fbf1ba125"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:33"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:35"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:37"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:39"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10750",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11863",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)16201",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:47"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)16201": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10750": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11863": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "4fbd4d89280fa2798ec968cb5c7764c81e1332e1495bb5d880b65ef5f438a55f",
          "withoutMetadata": "4fbd4d89280fa2798ec968cb5c7764c81e1332e1495bb5d880b65ef5f438a55f",
          "linkedWithoutMetadata": "4fbd4d89280fa2798ec968cb5c7764c81e1332e1495bb5d880b65ef5f438a55f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "d3e8540b89a52a1dfab1a31173b781a95481fd3be821eaccd91caee76035370c",
          "withoutMetadata": "d3e8540b89a52a1dfab1a31173b781a95481fd3be821eaccd91caee76035370c",
          "linkedWithoutMetadata": "d3e8540b89a52a1dfab1a31173b781a95481fd3be821eaccd91caee76035370c"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "69eef8fccffd8e978d274c7b8559796726b341654cd69eae170f31cc0d66628b",
          "withoutMetadata": "69eef8fccffd8e978d274c7b8559796726b341654cd69eae170f31cc0d66628b",
          "linkedWithoutMetadata": "69eef8fccffd8e978d274c7b8559796726b341654cd69eae170f31cc0d66628b"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "0622fa3d0bbb36d21328f35cce4a175a7d4cade7a6d6a7874c15cdf961cbbfd6",
          "withoutMetadata": "0622fa3d0bbb36d21328f35cce4a175a7d4cade7a6d6a7874c15cdf961cbbfd6",
          "linkedWithoutMetadata": "0622fa3d0bbb36d21328f35cce4a175a7d4cade7a6d6a7874c15cdf961cbbfd6"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11863",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19153",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11863": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19153": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:8",
        "version": {
          "withMetadata": "93c4f41a674d68c188d77d3ccccc69d82da662c190c97f3c4004e299184bc589",
          "withoutMetadata": "93c4f41a674d68c188d77d3ccccc69d82da662c190c97f3c4004e299184bc589",
          "linkedWithoutMetadata": "93c4f41a674d68c188d77d3ccccc69d82da662c190c97f3c4004e299184bc589"
        },
        "inherit": [
          "contracts/verification/ethereum/Verifier.sol:EthereumVerifier",
          "contracts/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11863",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:9"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:11"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:14"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11310_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11310_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11863": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11310_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "809609a9ad855f15e2bd8e46b8d766bdb62ec897d48358b1bb06bf3fc0906fe7",
          "withoutMetadata": "809609a9ad855f15e2bd8e46b8d766bdb62ec897d48358b1bb06bf3fc0906fe7",
          "linkedWithoutMetadata": "809609a9ad855f15e2bd8e46b8d766bdb62ec897d48358b1bb06bf3fc0906fe7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "40ac88e078f84dd5e64a56e2aabb94173179574b1604bf2bcce7543c020299d5",
          "withoutMetadata": "40ac88e078f84dd5e64a56e2aabb94173179574b1604bf2bcce7543c020299d5",
          "linkedWithoutMetadata": "40ac88e078f84dd5e64a56e2aabb94173179574b1604bf2bcce7543c020299d5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "1a22d130378c79dbe3cbbacc531e39a9635266b81c58279d8c9c04dc041b3b28",
          "withoutMetadata": "1a22d130378c79dbe3cbbacc531e39a9635266b81c58279d8c9c04dc041b3b28",
          "linkedWithoutMetadata": "1a22d130378c79dbe3cbbacc531e39a9635266b81c58279d8c9c04dc041b3b28"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "e870029e5ef121ee83f61057c763eb11fea4137fb7a11b960a3a3c6a28a4b638",
          "withoutMetadata": "e870029e5ef121ee83f61057c763eb11fea4137fb7a11b960a3a3c6a28a4b638",
          "linkedWithoutMetadata": "e870029e5ef121ee83f61057c763eb11fea4137fb7a11b960a3a3c6a28a4b638"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "80f2784e68ca698c16be51389cb9996055b1523f861408c611475a7a8628c631",
          "withoutMetadata": "80f2784e68ca698c16be51389cb9996055b1523f861408c611475a7a8628c631",
          "linkedWithoutMetadata": "80f2784e68ca698c16be51389cb9996055b1523f861408c611475a7a8628c631"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "0db7d15453068e564bdff07fdda1b24b44e5d838089cb7ee9883a4a27b04f179",
          "withoutMetadata": "0db7d15453068e564bdff07fdda1b24b44e5d838089cb7ee9883a4a27b04f179",
          "linkedWithoutMetadata": "0db7d15453068e564bdff07fdda1b24b44e5d838089cb7ee9883a4a27b04f179"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "f5ea5ad9e20d4cdaee186729eadbcae58ddef512897f72e0e3b6fde58e919113",
          "withoutMetadata": "f5ea5ad9e20d4cdaee186729eadbcae58ddef512897f72e0e3b6fde58e919113",
          "linkedWithoutMetadata": "f5ea5ad9e20d4cdaee186729eadbcae58ddef512897f72e0e3b6fde58e919113"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "2e8897eda0a0cad6a82520d817f43258d5371f352099e57d94baae116bcc71aa",
          "withoutMetadata": "2e8897eda0a0cad6a82520d817f43258d5371f352099e57d94baae116bcc71aa",
          "linkedWithoutMetadata": "2e8897eda0a0cad6a82520d817f43258d5371f352099e57d94baae116bcc71aa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "27ce6e54f2a521464e497f2fe2f25dda0a9aa67c8ce8841b49a599d6ee0b9d59",
          "withoutMetadata": "27ce6e54f2a521464e497f2fe2f25dda0a9aa67c8ce8841b49a599d6ee0b9d59",
          "linkedWithoutMetadata": "27ce6e54f2a521464e497f2fe2f25dda0a9aa67c8ce8841b49a599d6ee0b9d59"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "e3daf14f36fcbbe10f9fd24ee4df04437a7fdeda4ce28e8fa179bd4e5ffdc3e6",
          "withoutMetadata": "e3daf14f36fcbbe10f9fd24ee4df04437a7fdeda4ce28e8fa179bd4e5ffdc3e6",
          "linkedWithoutMetadata": "e3daf14f36fcbbe10f9fd24ee4df04437a7fdeda4ce28e8fa179bd4e5ffdc3e6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "e38d812d188024f22973a219ecbd8b123a731f3c5774cd5b75fdc8e34262cff8",
          "withoutMetadata": "e38d812d188024f22973a219ecbd8b123a731f3c5774cd5b75fdc8e34262cff8",
          "linkedWithoutMetadata": "e38d812d188024f22973a219ecbd8b123a731f3c5774cd5b75fdc8e34262cff8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "bb3894c676d77dd55f0a9c8c30fe350ad77e0ea307b2c28b97eac3d1109ff4f5",
          "withoutMetadata": "bb3894c676d77dd55f0a9c8c30fe350ad77e0ea307b2c28b97eac3d1109ff4f5",
          "linkedWithoutMetadata": "bb3894c676d77dd55f0a9c8c30fe350ad77e0ea307b2c28b97eac3d1109ff4f5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19018",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19018": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "fbf1797de4530a05c323a24e6173986ab61c19765b4b1d5aa31cf53d03dfecba",
          "withoutMetadata": "fbf1797de4530a05c323a24e6173986ab61c19765b4b1d5aa31cf53d03dfecba",
          "linkedWithoutMetadata": "fbf1797de4530a05c323a24e6173986ab61c19765b4b1d5aa31cf53d03dfecba"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "cc1c4c1503ef1bb571c02d73ba0dc0c31ad20e3e633424ba14f335f33b63d245",
          "withoutMetadata": "cc1c4c1503ef1bb571c02d73ba0dc0c31ad20e3e633424ba14f335f33b63d245",
          "linkedWithoutMetadata": "cc1c4c1503ef1bb571c02d73ba0dc0c31ad20e3e633424ba14f335f33b63d245"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "0c5a2c7cf4790c655f76a71e698b01907c2210d5d65874d494ed40ef68b8e288",
          "withoutMetadata": "0c5a2c7cf4790c655f76a71e698b01907c2210d5d65874d494ed40ef68b8e288",
          "linkedWithoutMetadata": "0c5a2c7cf4790c655f76a71e698b01907c2210d5d65874d494ed40ef68b8e288"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "6dbe968458309c8c1688179002b5f9b7b5eac6c329878db0f77bff80a0a20cae",
          "withoutMetadata": "6dbe968458309c8c1688179002b5f9b7b5eac6c329878db0f77bff80a0a20cae",
          "linkedWithoutMetadata": "6dbe968458309c8c1688179002b5f9b7b5eac6c329878db0f77bff80a0a20cae"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "d8369eb2671b765854d51d7c6e19d8e1ccc478b718a9ac393272475736bab736",
          "withoutMetadata": "d8369eb2671b765854d51d7c6e19d8e1ccc478b718a9ac393272475736bab736",
          "linkedWithoutMetadata": "d8369eb2671b765854d51d7c6e19d8e1ccc478b718a9ac393272475736bab736"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "c43b0b0965b12182f9b80ed44e212362d77d9da1b8d49feb5e259dfb6625b98d",
          "withoutMetadata": "c43b0b0965b12182f9b80ed44e212362d77d9da1b8d49feb5e259dfb6625b98d",
          "linkedWithoutMetadata": "c43b0b0965b12182f9b80ed44e212362d77d9da1b8d49feb5e259dfb6625b98d"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "05872699d02db39ad4b246eda993fc48f31912e4e6165c1cd0b7d3484f562fd9",
          "withoutMetadata": "05872699d02db39ad4b246eda993fc48f31912e4e6165c1cd0b7d3484f562fd9",
          "linkedWithoutMetadata": "05872699d02db39ad4b246eda993fc48f31912e4e6165c1cd0b7d3484f562fd9"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "a7ed274a020b710e4af59570dccb20deaf3df71b02c9b79b36609b3fd06b86de",
          "withoutMetadata": "a7ed274a020b710e4af59570dccb20deaf3df71b02c9b79b36609b3fd06b86de",
          "linkedWithoutMetadata": "a7ed274a020b710e4af59570dccb20deaf3df71b02c9b79b36609b3fd06b86de"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "785b65e8145ed2a9a7d4f805cd2502d87df1e30ddcfa4ee9cc6486f564c00970",
          "withoutMetadata": "785b65e8145ed2a9a7d4f805cd2502d87df1e30ddcfa4ee9cc6486f564c00970",
          "linkedWithoutMetadata": "785b65e8145ed2a9a7d4f805cd2502d87df1e30ddcfa4ee9cc6486f564c00970"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "ca51557984dd4e34687c9a26d1762f1dc0a05d8d39948aef867c7215667127ca",
          "withoutMetadata": "ca51557984dd4e34687c9a26d1762f1dc0a05d8d39948aef867c7215667127ca",
          "linkedWithoutMetadata": "ca51557984dd4e34687c9a26d1762f1dc0a05d8d39948aef867c7215667127ca"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "83ca68cb661244df15578254b3224d04ad6bcf5cb59587493d501a7f6efeace2",
          "withoutMetadata": "83ca68cb661244df15578254b3224d04ad6bcf5cb59587493d501a7f6efeace2",
          "linkedWithoutMetadata": "83ca68cb661244df15578254b3224d04ad6bcf5cb59587493d501a7f6efeace2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "2aea451bf5cb2ecf659544338ebf459ef4af72d65e959a09968379202409ebdc",
          "withoutMetadata": "2aea451bf5cb2ecf659544338ebf459ef4af72d65e959a09968379202409ebdc",
          "linkedWithoutMetadata": "2aea451bf5cb2ecf659544338ebf459ef4af72d65e959a09968379202409ebdc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "7d26002c0c5db252ec4b026748764891d10a414275c9f5174d15926f80626b2f",
          "withoutMetadata": "7d26002c0c5db252ec4b026748764891d10a414275c9f5174d15926f80626b2f",
          "linkedWithoutMetadata": "7d26002c0c5db252ec4b026748764891d10a414275c9f5174d15926f80626b2f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "3ef2f6520fb8a4bab9858d3156ce08d11669e72f512a9057f92963b7e9a683cf",
          "withoutMetadata": "3ef2f6520fb8a4bab9858d3156ce08d11669e72f512a9057f92963b7e9a683cf",
          "linkedWithoutMetadata": "3ef2f6520fb8a4bab9858d3156ce08d11669e72f512a9057f92963b7e9a683cf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "c688357e759b2e869359efcb2bce12634abf4912a0bbff5b580821fcc6e015cb",
          "withoutMetadata": "c688357e759b2e869359efcb2bce12634abf4912a0bbff5b580821fcc6e015cb",
          "linkedWithoutMetadata": "c688357e759b2e869359efcb2bce12634abf4912a0bbff5b580821fcc6e015cb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "0dd106db9e8e995e9f4dcca03d5b87c7ac6295145e39aa1419aa5c518d16eb54",
          "withoutMetadata": "0dd106db9e8e995e9f4dcca03d5b87c7ac6295145e39aa1419aa5c518d16eb54",
          "linkedWithoutMetadata": "0dd106db9e8e995e9f4dcca03d5b87c7ac6295145e39aa1419aa5c518d16eb54"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:22",
        "version": {
          "withMetadata": "26e0bdb6becaeec1d291884ffa285a532aa70bee5204a895c588e34a3ed00f52",
          "withoutMetadata": "26e0bdb6becaeec1d291884ffa285a532aa70bee5204a895c588e34a3ed00f52",
          "linkedWithoutMetadata": "26e0bdb6becaeec1d291884ffa285a532aa70bee5204a895c588e34a3ed00f52"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:33"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:35"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:37"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:39"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10750",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11863",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)16201",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:47"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)16201": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)10750": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11863": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "3a2c6c93a2cd33bbf3848e3db9398965bb81c40e18920f1abb8fd976f3a4dd31",
          "withoutMetadata": "3a2c6c93a2cd33bbf3848e3db9398965bb81c40e18920f1abb8fd976f3a4dd31",
          "linkedWithoutMetadata": "3a2c6c93a2cd33bbf3848e3db9398965bb81c40e18920f1abb8fd976f3a4dd31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "251888b842684442a790cd2ddc426282dac7c07fd0a61d0eaf9269571666891d",
          "withoutMetadata": "251888b842684442a790cd2ddc426282dac7c07fd0a61d0eaf9269571666891d",
          "linkedWithoutMetadata": "251888b842684442a790cd2ddc426282dac7c07fd0a61d0eaf9269571666891d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "81eea7fbbb2fb3252442019a780c54143297047b2feae72f4974306cdb5a1f88",
          "withoutMetadata": "81eea7fbbb2fb3252442019a780c54143297047b2feae72f4974306cdb5a1f88",
          "linkedWithoutMetadata": "81eea7fbbb2fb3252442019a780c54143297047b2feae72f4974306cdb5a1f88"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "94c074feb300b40c874f232f40a3842730c30451f5dacfdba779277df21d62d8",
          "withoutMetadata": "94c074feb300b40c874f232f40a3842730c30451f5dacfdba779277df21d62d8",
          "linkedWithoutMetadata": "94c074feb300b40c874f232f40a3842730c30451f5dacfdba779277df21d62d8"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11863",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19153",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11863": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19153": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:8",
        "version": {
          "withMetadata": "ed1408aa5faab3e95b093f1ebe922a3668ca6c154193cda564fbaa99100fba18",
          "withoutMetadata": "ed1408aa5faab3e95b093f1ebe922a3668ca6c154193cda564fbaa99100fba18",
          "linkedWithoutMetadata": "ed1408aa5faab3e95b093f1ebe922a3668ca6c154193cda564fbaa99100fba18"
        },
        "inherit": [
          "contracts/verification/ethereum/Verifier.sol:EthereumVerifier",
          "contracts/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11863",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:9"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:11"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:14"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11310_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11310_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11863": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11310_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "5ed11fa20ba13e3fd28842d1a988b12220da82c439b20d0d0f9791ad88d43b2e",
          "withoutMetadata": "5ed11fa20ba13e3fd28842d1a988b12220da82c439b20d0d0f9791ad88d43b2e",
          "linkedWithoutMetadata": "5ed11fa20ba13e3fd28842d1a988b12220da82c439b20d0d0f9791ad88d43b2e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "e25fb4b0639b211861a91935f7ffe9eb3da21f231608f3811a584faf7ebaf4a4",
          "withoutMetadata": "e25fb4b0639b211861a91935f7ffe9eb3da21f231608f3811a584faf7ebaf4a4",
          "linkedWithoutMetadata": "e25fb4b0639b211861a91935f7ffe9eb3da21f231608f3811a584faf7ebaf4a4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "7bfada4b4dc481c8017a3e2ebce56a7dfc4cee2447430b70142b147148e14e29",
          "withoutMetadata": "7bfada4b4dc481c8017a3e2ebce56a7dfc4cee2447430b70142b147148e14e29",
          "linkedWithoutMetadata": "7bfada4b4dc481c8017a3e2ebce56a7dfc4cee2447430b70142b147148e14e29"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "d65a02e014c4eeaae2a2956c801b013756871883de6f007b8099f3ec3b5ec5ec",
          "withoutMetadata": "d65a02e014c4eeaae2a2956c801b013756871883de6f007b8099f3ec3b5ec5ec",
          "linkedWithoutMetadata": "d65a02e014c4eeaae2a2956c801b013756871883de6f007b8099f3ec3b5ec5ec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "e97a6d0c203067f44f5029af4845e329006134ffda1e3e9f79f533af7116c771",
          "withoutMetadata": "e97a6d0c203067f44f5029af4845e329006134ffda1e3e9f79f533af7116c771",
          "linkedWithoutMetadata": "e97a6d0c203067f44f5029af4845e329006134ffda1e3e9f79f533af7116c771"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "eb645276b5cdd1dd5d4180dbfd69d9a436f5a05c0f7f7e0a6a57f1a80e4511ba",
          "withoutMetadata": "eb645276b5cdd1dd5d4180dbfd69d9a436f5a05c0f7f7e0a6a57f1a80e4511ba",
          "linkedWithoutMetadata": "eb645276b5cdd1dd5d4180dbfd69d9a436f5a05c0f7f7e0a6a57f1a80e4511ba"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "285ed43f711fb229b71649e982f2cc120e0f805cb18d27798d729807a03d7caf",
          "withoutMetadata": "285ed43f711fb229b71649e982f2cc120e0f805cb18d27798d729807a03d7caf",
          "linkedWithoutMetadata": "285ed43f711fb229b71649e982f2cc120e0f805cb18d27798d729807a03d7caf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "0f52640bb801d291ae62d177a47bbc88cf9a599555a9b933aa58727bdb9e7717",
          "withoutMetadata": "0f52640bb801d291ae62d177a47bbc88cf9a599555a9b933aa58727bdb9e7717",
          "linkedWithoutMetadata": "0f52640bb801d291ae62d177a47bbc88cf9a599555a9b933aa58727bdb9e7717"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "9172562f33a0d66643b22bbc81104ef28fa13ec6a2427b552093e8cec8a13270",
          "withoutMetadata": "9172562f33a0d66643b22bbc81104ef28fa13ec6a2427b552093e8cec8a13270",
          "linkedWithoutMetadata": "9172562f33a0d66643b22bbc81104ef28fa13ec6a2427b552093e8cec8a13270"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "e007f0e8fe908c246bb2857b56d1a37ed9f04bfb395135fc40f905caafd08ecf",
          "withoutMetadata": "e007f0e8fe908c246bb2857b56d1a37ed9f04bfb395135fc40f905caafd08ecf",
          "linkedWithoutMetadata": "e007f0e8fe908c246bb2857b56d1a37ed9f04bfb395135fc40f905caafd08ecf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "d703a6c6f0491bdda5daa4dfe29ff3a116421da7e75efa6f2b011cccdf4fa9a2",
          "withoutMetadata": "d703a6c6f0491bdda5daa4dfe29ff3a116421da7e75efa6f2b011cccdf4fa9a2",
          "linkedWithoutMetadata": "d703a6c6f0491bdda5daa4dfe29ff3a116421da7e75efa6f2b011cccdf4fa9a2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "0a3ceef7ccd85360ef8cf0a92f2e893f6c9a56d12ff06dc4e8d37ed330a437e4",
          "withoutMetadata": "0a3ceef7ccd85360ef8cf0a92f2e893f6c9a56d12ff06dc4e8d37ed330a437e4",
          "linkedWithoutMetadata": "0a3ceef7ccd85360ef8cf0a92f2e893f6c9a56d12ff06dc4e8d37ed330a437e4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19018",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19018": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "d46a7065375a3fba63865197aaf1c0c442d82050d7f760d7bf8da19d25cbc949",
          "withoutMetadata": "d46a7065375a3fba63865197aaf1c0c442d82050d7f760d7bf8da19d25cbc949",
          "linkedWithoutMetadata": "d46a7065375a3fba63865197aaf1c0c442d82050d7f760d7bf8da19d25cbc949"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "e8e6a9b90002d5214fc5ca7c5eb09888836b16eea6e725fae6e62c9af459f474",
          "withoutMetadata": "e8e6a9b90002d5214fc5ca7c5eb09888836b16eea6e725fae6e62c9af459f474",
          "linkedWithoutMetadata": "e8e6a9b90002d5214fc5ca7c5eb09888836b16eea6e725fae6e62c9af459f474"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd",
          "withoutMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd",
          "linkedWithoutMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8",
          "withoutMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8",
          "linkedWithoutMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "withoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "linkedWithoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "withoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "linkedWithoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202",
          "withoutMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202",
          "linkedWithoutMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "withoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "linkedWithoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:22",
        "version": {
          "withMetadata": "704e8dec58205fa316ce35e163012400260ec059fd38e12e7d02a1a35d8e32a0",
          "withoutMetadata": "704e8dec58205fa316ce35e163012400260ec059fd38e12e7d02a1a35d8e32a0",
          "linkedWithoutMetadata": "704e8dec58205fa316ce35e163012400260ec059fd38e12e7d02a1a35d8e32a0"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32,address)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:33"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:35"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:37"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:39"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)8366",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)9404",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "verifier",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(EthereumVerifier)13357",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:47"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "11",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(EthereumVerifier)13357": {
              "label": "contract EthereumVerifier",
              "numberOfBytes": "20"
            },
            "t_contract(IAvail)8366": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)9404": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)25_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21",
          "withoutMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21",
          "linkedWithoutMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "7a6efa8a7bc1932083a991dae46ff30d0d81d0facc6aa43cabb12daaf4a2eb83",
          "withoutMetadata": "7a6efa8a7bc1932083a991dae46ff30d0d81d0facc6aa43cabb12daaf4a2eb83",
          "linkedWithoutMetadata": "7a6efa8a7bc1932083a991dae46ff30d0d81d0facc6aa43cabb12daaf4a2eb83"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)9404",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)16309",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)9404": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)16309": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:8",
        "version": {
          "withMetadata": "1ce76ae8995ff011040063d2a2ed4f8661cfd74cfab6ab5a0ecc2c8bd5cf13b0",
          "withoutMetadata": "1ce76ae8995ff011040063d2a2ed4f8661cfd74cfab6ab5a0ecc2c8bd5cf13b0",
          "linkedWithoutMetadata": "1ce76ae8995ff011040063d2a2ed4f8661cfd74cfab6ab5a0ecc2c8bd5cf13b0"
        },
        "inherit": [
          "contracts/verification/ethereum/Verifier.sol:EthereumVerifier",
          "contracts/verification/ethereum/StorageProof.sol:StorageProof",
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)9404",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:9"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:11"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:14"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)8851_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)8851_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)9404": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)8851_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "nexusAppIDToLatestBlockNumber(bytes32)",
          "nexusAppIDToState(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0",
          "withoutMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0",
          "linkedWithoutMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c",
          "withoutMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c",
          "linkedWithoutMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1",
          "withoutMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1",
          "linkedWithoutMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603",
          "withoutMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603",
          "linkedWithoutMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb",
          "withoutMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb",
          "linkedWithoutMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "cda60690ce85de2832bad93aa30806a8f334c2d4483a1f071c4891c441d85093",
          "withoutMetadata": "cda60690ce85de2832bad93aa30806a8f334c2d4483a1f071c4891c441d85093",
          "linkedWithoutMetadata": "cda60690ce85de2832bad93aa30806a8f334c2d4483a1f071c4891c441d85093"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "f2c7ec4ced7b73826eae57a4988acfc2c3bee7ab2f7a5d1b870c46224fbc04ab",
          "withoutMetadata": "f2c7ec4ced7b73826eae57a4988acfc2c3bee7ab2f7a5d1b870c46224fbc04ab",
          "linkedWithoutMetadata": "f2c7ec4ced7b73826eae57a4988acfc2c3bee7ab2f7a5d1b870c46224fbc04ab"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "withoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "linkedWithoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "withoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "linkedWithoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "withoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "linkedWithoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)16174",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)16174": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "b8b61fe7c9c0c041e59bc2fd556c5b0e0d16182e3fe2601de62b98c979541d20",
          "withoutMetadata": "b8b61fe7c9c0c041e59bc2fd556c5b0e0d16182e3fe2601de62b98c979541d20",
          "linkedWithoutMetadata": "b8b61fe7c9c0c041e59bc2fd556c5b0e0d16182e3fe2601de62b98c979541d20"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "withoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "linkedWithoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "withoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "linkedWithoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "withoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "linkedWithoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "withoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "linkedWithoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "6e610d1bb67d711ced410c354ad16b0e99b9f5f7bfc17b7b1763ba032c021026",
          "withoutMetadata": "6e610d1bb67d711ced410c354ad16b0e99b9f5f7bfc17b7b1763ba032c021026",
          "linkedWithoutMetadata": "6e610d1bb67d711ced410c354ad16b0e99b9f5f7bfc17b7b1763ba032c021026"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)3047",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)5999",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)3047": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)5999": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "withoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "linkedWithoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "withoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "linkedWithoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "withoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "linkedWithoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)5864",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)5864": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "withoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "linkedWithoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "f9e27b3321408a09c43eff5e4192ebc810cba5dd578bb1788419d4c8bb182645",
          "withoutMetadata": "f9e27b3321408a09c43eff5e4192ebc810cba5dd578bb1788419d4c8bb182645",
          "linkedWithoutMetadata": "f9e27b3321408a09c43eff5e4192ebc810cba5dd578bb1788419d4c8bb182645"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "aead8236fe4ec2612ecce550b0300dd4480e20613e281eef089187f620161243",
          "withoutMetadata": "aead8236fe4ec2612ecce550b0300dd4480e20613e281eef089187f620161243",
          "linkedWithoutMetadata": "aead8236fe4ec2612ecce550b0300dd4480e20613e281eef089187f620161243"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "381282c8fc1e8bca04800f059ecb6f97acf75ac5a52ee24f6efd3f878fb1e4f5",
          "withoutMetadata": "381282c8fc1e8bca04800f059ecb6f97acf75ac5a52ee24f6efd3f878fb1e4f5",
          "linkedWithoutMetadata": "381282c8fc1e8bca04800f059ecb6f97acf75ac5a52ee24f6efd3f878fb1e4f5"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "d46c638a291cc445b51815668661000c28ae7489b2ee4b8c5998f2bab5873dbd",
          "withoutMetadata": "d46c638a291cc445b51815668661000c28ae7489b2ee4b8c5998f2bab5873dbd",
          "linkedWithoutMetadata": "d46c638a291cc445b51815668661000c28ae7489b2ee4b8c5998f2bab5873dbd"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "9c63f419d14960f96512e59004ee74baa190c80486a7ac7bf3353f82ff955951",
          "withoutMetadata": "9c63f419d14960f96512e59004ee74baa190c80486a7ac7bf3353f82ff955951",
          "linkedWithoutMetadata": "9c63f419d14960f96512e59004ee74baa190c80486a7ac7bf3353f82ff955951"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "3d02e41d8352840b860197ab0f8c144bccffb51a610c5496c3fc4fc580c9dd23",
          "withoutMetadata": "3d02e41d8352840b860197ab0f8c144bccffb51a610c5496c3fc4fc580c9dd23",
          "linkedWithoutMetadata": "3d02e41d8352840b860197ab0f8c144bccffb51a610c5496c3fc4fc580c9dd23"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "1c2fac3642bab1e94776aedbdd9b2da7cbd5a33c9c52da65f87f5837b547a6e9",
          "withoutMetadata": "1c2fac3642bab1e94776aedbdd9b2da7cbd5a33c9c52da65f87f5837b547a6e9",
          "linkedWithoutMetadata": "1c2fac3642bab1e94776aedbdd9b2da7cbd5a33c9c52da65f87f5837b547a6e9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd",
          "withoutMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd",
          "linkedWithoutMetadata": "b889703ac1e865ca3aa38958224034a02f7c73a8bfe697c0df95a792c66687dd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8",
          "withoutMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8",
          "linkedWithoutMetadata": "63ca5a9e5325e3dab9e7f498bada39ce94e861903c55e3439c891b85d4e234d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "withoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b",
          "linkedWithoutMetadata": "7c698b369a4291e56ea7d3fe832e435cb28aa8557c25689f5331d937257f584b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "withoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c",
          "linkedWithoutMetadata": "5526bd183e1453d4b1cb48fd53ccc561f2b1f0e480d11225483007e72eee860c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202",
          "withoutMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202",
          "linkedWithoutMetadata": "c0735be54d086b3bc76bc66a2d3c44729bb694c4d853a49f1d45b9d0118f3202"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "withoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822",
          "linkedWithoutMetadata": "0cc9d643bafb08fd52dd4c2000de9cb2460912a743bf4571b3ef49f9d89ae822"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "8bf423400db639d5c74f4683cdceab1e79d560a0544a526ac7836a1c821ce364",
          "withoutMetadata": "8bf423400db639d5c74f4683cdceab1e79d560a0544a526ac7836a1c821ce364",
          "linkedWithoutMetadata": "8bf423400db639d5c74f4683cdceab1e79d560a0544a526ac7836a1c821ce364"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "a9525f946c805aa52bddda35976446aa6676363b3530af90432827499fb2d40f",
          "withoutMetadata": "a9525f946c805aa52bddda35976446aa6676363b3530af90432827499fb2d40f",
          "linkedWithoutMetadata": "a9525f946c805aa52bddda35976446aa6676363b3530af90432827499fb2d40f"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10738",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11853",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10738": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11853": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21",
          "withoutMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21",
          "linkedWithoutMetadata": "f296a0b01ad5822dd77dc83653d24adf5b332585ee22c8656c93f6827364aa21"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "759512013ba74d5f61a8ea056d6f19bad9d2829bd92949ccba6ecba6d793b753",
          "withoutMetadata": "759512013ba74d5f61a8ea056d6f19bad9d2829bd92949ccba6ecba6d793b753",
          "linkedWithoutMetadata": "759512013ba74d5f61a8ea056d6f19bad9d2829bd92949ccba6ecba6d793b753"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "b57b2f8a3f29b72d48ad116037b48575153689f55cb21142135bd37f324d6d4b",
          "withoutMetadata": "b57b2f8a3f29b72d48ad116037b48575153689f55cb21142135bd37f324d6d4b",
          "linkedWithoutMetadata": "b57b2f8a3f29b72d48ad116037b48575153689f55cb21142135bd37f324d6d4b"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "f6929ffbd2a9ae15b441acdf36ddef91d9898e1908d74ff23e625e4002757241",
          "withoutMetadata": "f6929ffbd2a9ae15b441acdf36ddef91d9898e1908d74ff23e625e4002757241",
          "linkedWithoutMetadata": "f6929ffbd2a9ae15b441acdf36ddef91d9898e1908d74ff23e625e4002757241"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11853",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19160",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11853": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19160": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "c1b2cc4f8edb497f0147a89e382d961f9024224f2ee90c67b3adfaa77c7334fa",
          "withoutMetadata": "c1b2cc4f8edb497f0147a89e382d961f9024224f2ee90c67b3adfaa77c7334fa",
          "linkedWithoutMetadata": "c1b2cc4f8edb497f0147a89e382d961f9024224f2ee90c67b3adfaa77c7334fa"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11853",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11288_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11288_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11853": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11288_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "e71768ddca23fd927503bb03368bb43fb5d28348a97679ea5d26e2d3e001e881",
          "withoutMetadata": "e71768ddca23fd927503bb03368bb43fb5d28348a97679ea5d26e2d3e001e881",
          "linkedWithoutMetadata": "e71768ddca23fd927503bb03368bb43fb5d28348a97679ea5d26e2d3e001e881"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0",
          "withoutMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0",
          "linkedWithoutMetadata": "074756af578aa742d868142d314734a904cc2fcaac08a589b135073b4c4f1cb0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c",
          "withoutMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c",
          "linkedWithoutMetadata": "cf771fb37736e921a890f7e957129062ffb4cc97cee4e7045c402b160376851c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1",
          "withoutMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1",
          "linkedWithoutMetadata": "a26dc5ef78dc07f752e752d1758230400e9ea3c57f898965726b95ad573e77a1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603",
          "withoutMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603",
          "linkedWithoutMetadata": "310b3987b70182caf4b8b6a21a3260927d01683d4a9f0842a61184b4dc9f6603"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "adb144bb8923d35c4d96b32d735cc596ffb755653c152ab87a9b8fb665fca586",
          "withoutMetadata": "adb144bb8923d35c4d96b32d735cc596ffb755653c152ab87a9b8fb665fca586",
          "linkedWithoutMetadata": "adb144bb8923d35c4d96b32d735cc596ffb755653c152ab87a9b8fb665fca586"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb",
          "withoutMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb",
          "linkedWithoutMetadata": "51c6ea24ff70ad0f6b5ad58d8b792534451b60dfa758629d0a92beb21be2cafb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "678b9afd6545bcc22bf557d9fc030b0562b6b046ad003329bdfd9a38aaebf22c",
          "withoutMetadata": "678b9afd6545bcc22bf557d9fc030b0562b6b046ad003329bdfd9a38aaebf22c",
          "linkedWithoutMetadata": "678b9afd6545bcc22bf557d9fc030b0562b6b046ad003329bdfd9a38aaebf22c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "8b0c83adaaf78a4382fc40bea6821f79dd668f39aa28cdedb88e2e87f5f74aaf",
          "withoutMetadata": "8b0c83adaaf78a4382fc40bea6821f79dd668f39aa28cdedb88e2e87f5f74aaf",
          "linkedWithoutMetadata": "8b0c83adaaf78a4382fc40bea6821f79dd668f39aa28cdedb88e2e87f5f74aaf"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "withoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71",
          "linkedWithoutMetadata": "978f9308736476a1288d6d8164e278b59672a8853da9233957131a3bb5834b71"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "withoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a",
          "linkedWithoutMetadata": "0b137709cda3e824f559ae7c59f009253bc4e72e7d837c7cfeafa34fec1baf8a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "withoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556",
          "linkedWithoutMetadata": "07b29bb4b7cc643ea1513a38d91a5c3a4b177f9728fa10108e89e3ef47c24556"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19025",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19025": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "8b0b614921a2966e7fb6b47952abe0ead04595c1c7ac7ec79804c6fbc2a670e7",
          "withoutMetadata": "8b0b614921a2966e7fb6b47952abe0ead04595c1c7ac7ec79804c6fbc2a670e7",
          "linkedWithoutMetadata": "8b0b614921a2966e7fb6b47952abe0ead04595c1c7ac7ec79804c6fbc2a670e7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "withoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df",
          "linkedWithoutMetadata": "8bdaeb2082c81138faf0a3504dbe2fe456be81413cbb1e54361b6ee60ada88df"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "withoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "linkedWithoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "withoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "linkedWithoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "withoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "linkedWithoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "ccedecff40d630b460c9c17f99b86364bb56eea422e09a43da1dc6a42c82ef41",
          "withoutMetadata": "ccedecff40d630b460c9c17f99b86364bb56eea422e09a43da1dc6a42c82ef41",
          "linkedWithoutMetadata": "ccedecff40d630b460c9c17f99b86364bb56eea422e09a43da1dc6a42c82ef41"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)3041",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)5993",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)3041": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)5993": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "withoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "linkedWithoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "withoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "linkedWithoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "withoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "linkedWithoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)5858",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)5858": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "withoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "linkedWithoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "12d699c574df5164c1910cc09e4916810bc77dfd19473d4e752a59d362b2436c",
          "withoutMetadata": "12d699c574df5164c1910cc09e4916810bc77dfd19473d4e752a59d362b2436c",
          "linkedWithoutMetadata": "12d699c574df5164c1910cc09e4916810bc77dfd19473d4e752a59d362b2436c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)12_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "withoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "linkedWithoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "withoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "linkedWithoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "withoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "linkedWithoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "withoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "linkedWithoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "withoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "linkedWithoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "withoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "linkedWithoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "withoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "linkedWithoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "3bb2a7085aaa07d98c67248f422967f7a480d72663e10d329a1896c614b5d20f",
          "withoutMetadata": "3bb2a7085aaa07d98c67248f422967f7a480d72663e10d329a1896c614b5d20f",
          "linkedWithoutMetadata": "3bb2a7085aaa07d98c67248f422967f7a480d72663e10d329a1896c614b5d20f"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "withoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "linkedWithoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "fbcd3c8990a201c6f2808af107093331521b6d82b59fd68ffab23dfe213377fb",
          "withoutMetadata": "fbcd3c8990a201c6f2808af107093331521b6d82b59fd68ffab23dfe213377fb",
          "linkedWithoutMetadata": "fbcd3c8990a201c6f2808af107093331521b6d82b59fd68ffab23dfe213377fb"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "477c17cf081b12cdc00e62803e4224907e3d4b0cc01a083bcd3c8bec5c9010ef",
          "withoutMetadata": "477c17cf081b12cdc00e62803e4224907e3d4b0cc01a083bcd3c8bec5c9010ef",
          "linkedWithoutMetadata": "477c17cf081b12cdc00e62803e4224907e3d4b0cc01a083bcd3c8bec5c9010ef"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "8ddcb0c21f8255a74593dde10cce70f7afacc5736a90d743a23df1720b17fcef",
          "withoutMetadata": "8ddcb0c21f8255a74593dde10cce70f7afacc5736a90d743a23df1720b17fcef",
          "linkedWithoutMetadata": "8ddcb0c21f8255a74593dde10cce70f7afacc5736a90d743a23df1720b17fcef"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "653193bb04b7e28c629707a437e2b62aadf4ceac3fd679ce72fc10b8822aa943",
          "withoutMetadata": "653193bb04b7e28c629707a437e2b62aadf4ceac3fd679ce72fc10b8822aa943",
          "linkedWithoutMetadata": "653193bb04b7e28c629707a437e2b62aadf4ceac3fd679ce72fc10b8822aa943"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "f338ba5821e6be44fac01174f84d98e4fb48d6e263159013420c8f06119f4d15",
          "withoutMetadata": "f338ba5821e6be44fac01174f84d98e4fb48d6e263159013420c8f06119f4d15",
          "linkedWithoutMetadata": "f338ba5821e6be44fac01174f84d98e4fb48d6e263159013420c8f06119f4d15"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "37fc82e5a28f4c38e2e4ec75b1d2d0988b70878d29168afd0b0f201941e94a15",
          "withoutMetadata": "37fc82e5a28f4c38e2e4ec75b1d2d0988b70878d29168afd0b0f201941e94a15",
          "linkedWithoutMetadata": "37fc82e5a28f4c38e2e4ec75b1d2d0988b70878d29168afd0b0f201941e94a15"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "d32100d5c8206933ddb0f8fc1c89c7a86faa9f95795a9f6274736828cd80cedb",
          "withoutMetadata": "d32100d5c8206933ddb0f8fc1c89c7a86faa9f95795a9f6274736828cd80cedb",
          "linkedWithoutMetadata": "d32100d5c8206933ddb0f8fc1c89c7a86faa9f95795a9f6274736828cd80cedb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1eb05d9c6ca150ec44cca5d8c3948064efe15a0ea6185b331bcb7a664023943f",
          "withoutMetadata": "1eb05d9c6ca150ec44cca5d8c3948064efe15a0ea6185b331bcb7a664023943f",
          "linkedWithoutMetadata": "1eb05d9c6ca150ec44cca5d8c3948064efe15a0ea6185b331bcb7a664023943f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "567616f0b4f328d9291782b37bc41be186b4c54741731ffcaa8309d9e8c0141a",
          "withoutMetadata": "567616f0b4f328d9291782b37bc41be186b4c54741731ffcaa8309d9e8c0141a",
          "linkedWithoutMetadata": "567616f0b4f328d9291782b37bc41be186b4c54741731ffcaa8309d9e8c0141a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "withoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437",
          "linkedWithoutMetadata": "93a5863333fc77c0662725a2cc17e0edafd6c35c441b43fe3b599fb7addf1437"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "withoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4",
          "linkedWithoutMetadata": "631de35de78dda1cf5e81ec889f23b6f70796e2b6d7dfcfed4d29058c15da6b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "b46b65d6e32ebb91df639cecf7378b09c4fd5e130924d3cebd12e4205877fa3f",
          "withoutMetadata": "b46b65d6e32ebb91df639cecf7378b09c4fd5e130924d3cebd12e4205877fa3f",
          "linkedWithoutMetadata": "b46b65d6e32ebb91df639cecf7378b09c4fd5e130924d3cebd12e4205877fa3f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "withoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56",
          "linkedWithoutMetadata": "10df61aad202c63b99236f484fe1e8581708e77ed53a81526757f07c3385ea56"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "1549b770b3e0a7dc15fd282d67cab0531775dc333f5145d9aea92cca6a4469b2",
          "withoutMetadata": "1549b770b3e0a7dc15fd282d67cab0531775dc333f5145d9aea92cca6a4469b2",
          "linkedWithoutMetadata": "1549b770b3e0a7dc15fd282d67cab0531775dc333f5145d9aea92cca6a4469b2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "89190244d619729306e5bba6d3fd088c79d0aa8af53f61c33105ba1f3daf8a0e",
          "withoutMetadata": "89190244d619729306e5bba6d3fd088c79d0aa8af53f61c33105ba1f3daf8a0e",
          "linkedWithoutMetadata": "89190244d619729306e5bba6d3fd088c79d0aa8af53f61c33105ba1f3daf8a0e"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "08c51eda7f7d52ea71c66bb391ddadd7a2d5453c6b754739cd2de6d097d9502f",
          "withoutMetadata": "08c51eda7f7d52ea71c66bb391ddadd7a2d5453c6b754739cd2de6d097d9502f",
          "linkedWithoutMetadata": "08c51eda7f7d52ea71c66bb391ddadd7a2d5453c6b754739cd2de6d097d9502f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "3c83670d70a505b4a5c8a5e8db8cfca87e5b3c1f594b2713396a3cd61be76e0f",
          "withoutMetadata": "3c83670d70a505b4a5c8a5e8db8cfca87e5b3c1f594b2713396a3cd61be76e0f",
          "linkedWithoutMetadata": "3c83670d70a505b4a5c8a5e8db8cfca87e5b3c1f594b2713396a3cd61be76e0f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "0994c93789c95f981a7bb4cf4bc064406bc1df9d04bfab31d2d2edd7842d88a6",
          "withoutMetadata": "0994c93789c95f981a7bb4cf4bc064406bc1df9d04bfab31d2d2edd7842d88a6",
          "linkedWithoutMetadata": "0994c93789c95f981a7bb4cf4bc064406bc1df9d04bfab31d2d2edd7842d88a6"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "babfb1d62263a7a0da236d9f9283a7762aed39ecbbe4517f0c4953260feb24f9",
          "withoutMetadata": "babfb1d62263a7a0da236d9f9283a7762aed39ecbbe4517f0c4953260feb24f9",
          "linkedWithoutMetadata": "babfb1d62263a7a0da236d9f9283a7762aed39ecbbe4517f0c4953260feb24f9"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19165",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19165": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "bec8afc3788f25501ea97dcd8b5fb3195c6a8633329c20b0c868e38e24bbf4f7",
          "withoutMetadata": "bec8afc3788f25501ea97dcd8b5fb3195c6a8633329c20b0c868e38e24bbf4f7",
          "linkedWithoutMetadata": "bec8afc3788f25501ea97dcd8b5fb3195c6a8633329c20b0c868e38e24bbf4f7"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "withoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc",
          "linkedWithoutMetadata": "315b955a59481ca3ebe68130e80bee899dae2dade2639f837edc05e5fd1f85cc"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "withoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3",
          "linkedWithoutMetadata": "d27bf94d63d2358cad5e650edd06372d0f5b2538c60ad47bf567a49ac14c30b3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "withoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef",
          "linkedWithoutMetadata": "700f36d966d3a963c0c08cc41a30054733c15719410394a3e537b1928f8710ef"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "withoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07",
          "linkedWithoutMetadata": "b1d25533c3100479f7714fef504be765d2da8c2e97ec0c26f2ebbdd57fbc3b07"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "withoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78",
          "linkedWithoutMetadata": "30e4ce9bf64b518d9a0bc7f3a3039d765eea0969cb3db87e6bacbcb8b1cdcb78"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "19bd431507bf04ac2fd05d96ff8d39952591a775814f4864cfa361683c57c45f",
          "withoutMetadata": "19bd431507bf04ac2fd05d96ff8d39952591a775814f4864cfa361683c57c45f",
          "linkedWithoutMetadata": "19bd431507bf04ac2fd05d96ff8d39952591a775814f4864cfa361683c57c45f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "withoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f",
          "linkedWithoutMetadata": "84bb426ad7bc01f5b04058a6973ce6f72dc617ca181ab1d04514ffd5dc4d318f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "withoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a",
          "linkedWithoutMetadata": "7062c902e954c203376590ec5f740abd13ed3851f3623259775e1c857e73b59a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "54cd370f7e2000391020b4e5155a770405f7f45af15ac46b28995cce662e2e8c",
          "withoutMetadata": "54cd370f7e2000391020b4e5155a770405f7f45af15ac46b28995cce662e2e8c",
          "linkedWithoutMetadata": "54cd370f7e2000391020b4e5155a770405f7f45af15ac46b28995cce662e2e8c"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "withoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b",
          "linkedWithoutMetadata": "b3426a3aa48af62557141fa74106e65cea57210cd3530eb41c974193158b605b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "withoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356",
          "linkedWithoutMetadata": "7ce76437b7714aa8e974681bdb49770df21c3627aca966e66dcad5f4c84cd356"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "withoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e",
          "linkedWithoutMetadata": "d1da8ef036672d86c9d05d20b3041a72147a4b5aef221e15b51b835cd9c7118e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19030",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19030": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "c5d37d53367bdff0fcc6fceaff868774e7c61b022e8108097ee6b6756493cc93",
          "withoutMetadata": "c5d37d53367bdff0fcc6fceaff868774e7c61b022e8108097ee6b6756493cc93",
          "linkedWithoutMetadata": "c5d37d53367bdff0fcc6fceaff868774e7c61b022e8108097ee6b6756493cc93"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "withoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d",
          "linkedWithoutMetadata": "2016e2c694a3740b74f8041936b4697fc4697268b83ef3764ee1e619ed77f89d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "2a180e2fc3502f5bed96da856ffd47d4e1ffe959330a8e073de218792f51daa1",
          "withoutMetadata": "2a180e2fc3502f5bed96da856ffd47d4e1ffe959330a8e073de218792f51daa1",
          "linkedWithoutMetadata": "2a180e2fc3502f5bed96da856ffd47d4e1ffe959330a8e073de218792f51daa1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)12_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "52358a30de26dc944fdfa3d83dcfa8257850059c625c48b19f1d42e1c3628af4",
          "withoutMetadata": "52358a30de26dc944fdfa3d83dcfa8257850059c625c48b19f1d42e1c3628af4",
          "linkedWithoutMetadata": "52358a30de26dc944fdfa3d83dcfa8257850059c625c48b19f1d42e1c3628af4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "withoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "linkedWithoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "withoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "linkedWithoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "withoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "linkedWithoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "withoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "linkedWithoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "withoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "linkedWithoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "withoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "linkedWithoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "0e9eeaaea4f519c4b81f0c87882b361f9ed071b8fca7d39d55c34f5d80b6f264",
          "withoutMetadata": "0e9eeaaea4f519c4b81f0c87882b361f9ed071b8fca7d39d55c34f5d80b6f264",
          "linkedWithoutMetadata": "0e9eeaaea4f519c4b81f0c87882b361f9ed071b8fca7d39d55c34f5d80b6f264"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "withoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "linkedWithoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "a49cd051b2ec7ac7a39107904c9ff77072fcaef7fff0d23a393dd17c61682111",
          "withoutMetadata": "a49cd051b2ec7ac7a39107904c9ff77072fcaef7fff0d23a393dd17c61682111",
          "linkedWithoutMetadata": "a49cd051b2ec7ac7a39107904c9ff77072fcaef7fff0d23a393dd17c61682111"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "533e822f385068361222dd8608668b7642f58cb52e51ecb65005f78f46c552ac",
          "withoutMetadata": "533e822f385068361222dd8608668b7642f58cb52e51ecb65005f78f46c552ac",
          "linkedWithoutMetadata": "533e822f385068361222dd8608668b7642f58cb52e51ecb65005f78f46c552ac"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "14b1b145f67c21e78dd5fc9faf5572b3733aa8d09b2f685a6257a18b8515ac38",
          "withoutMetadata": "14b1b145f67c21e78dd5fc9faf5572b3733aa8d09b2f685a6257a18b8515ac38",
          "linkedWithoutMetadata": "14b1b145f67c21e78dd5fc9faf5572b3733aa8d09b2f685a6257a18b8515ac38"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "fbe8f5ffa6bc58b65df9e8d3e0b3350bb854358c1384871225cc40c1a30150d8",
          "withoutMetadata": "fbe8f5ffa6bc58b65df9e8d3e0b3350bb854358c1384871225cc40c1a30150d8",
          "linkedWithoutMetadata": "fbe8f5ffa6bc58b65df9e8d3e0b3350bb854358c1384871225cc40c1a30150d8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "668092af79cd5a99594b0786b2f0c186322330500dbefd3666032ddb12249fb2",
          "withoutMetadata": "668092af79cd5a99594b0786b2f0c186322330500dbefd3666032ddb12249fb2",
          "linkedWithoutMetadata": "668092af79cd5a99594b0786b2f0c186322330500dbefd3666032ddb12249fb2"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "0e5ed68f310e0ec1b46308718783102465622d5e53920a21a310ceea115951d8",
          "withoutMetadata": "0e5ed68f310e0ec1b46308718783102465622d5e53920a21a310ceea115951d8",
          "linkedWithoutMetadata": "0e5ed68f310e0ec1b46308718783102465622d5e53920a21a310ceea115951d8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "743d3ace9eb156fececf8b97a40e3bd5546a59b66af31a43bda53ed19ed5341b",
          "withoutMetadata": "743d3ace9eb156fececf8b97a40e3bd5546a59b66af31a43bda53ed19ed5341b",
          "linkedWithoutMetadata": "743d3ace9eb156fececf8b97a40e3bd5546a59b66af31a43bda53ed19ed5341b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "eef05ff5973603ffba048a03db42798c205131bf3bcf24b6df25002ed6633152",
          "withoutMetadata": "eef05ff5973603ffba048a03db42798c205131bf3bcf24b6df25002ed6633152",
          "linkedWithoutMetadata": "eef05ff5973603ffba048a03db42798c205131bf3bcf24b6df25002ed6633152"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "6d5010e677883d42b3dd796803e645ea9b135b828df5165ac185ee3a8554f5c9",
          "withoutMetadata": "6d5010e677883d42b3dd796803e645ea9b135b828df5165ac185ee3a8554f5c9",
          "linkedWithoutMetadata": "6d5010e677883d42b3dd796803e645ea9b135b828df5165ac185ee3a8554f5c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "2f5e83f510768be8e1ee2f5e9bbe5305963f3030f52b6d2c3808fd4bdb22d509",
          "withoutMetadata": "2f5e83f510768be8e1ee2f5e9bbe5305963f3030f52b6d2c3808fd4bdb22d509",
          "linkedWithoutMetadata": "2f5e83f510768be8e1ee2f5e9bbe5305963f3030f52b6d2c3808fd4bdb22d509"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ec51bf0920d7160f9f825eac9be1e92d091b0628eb4f3dd853c767784b4c2ec1",
          "withoutMetadata": "ec51bf0920d7160f9f825eac9be1e92d091b0628eb4f3dd853c767784b4c2ec1",
          "linkedWithoutMetadata": "ec51bf0920d7160f9f825eac9be1e92d091b0628eb4f3dd853c767784b4c2ec1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "8f9b76fd35d070aea38dcb81d8bc3f05c34ef7e9f822147300cd18d6cfc33b59",
          "withoutMetadata": "8f9b76fd35d070aea38dcb81d8bc3f05c34ef7e9f822147300cd18d6cfc33b59",
          "linkedWithoutMetadata": "8f9b76fd35d070aea38dcb81d8bc3f05c34ef7e9f822147300cd18d6cfc33b59"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "5b0d2c1798b2e4a11ce0d039ec946095906efc230338fc69e1eeb6feedd51559",
          "withoutMetadata": "5b0d2c1798b2e4a11ce0d039ec946095906efc230338fc69e1eeb6feedd51559",
          "linkedWithoutMetadata": "5b0d2c1798b2e4a11ce0d039ec946095906efc230338fc69e1eeb6feedd51559"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "0f9cfbef5a2049fa4f9021a8151c089f44be4bf73763e8e9238ca4de12b9d536",
          "withoutMetadata": "0f9cfbef5a2049fa4f9021a8151c089f44be4bf73763e8e9238ca4de12b9d536",
          "linkedWithoutMetadata": "0f9cfbef5a2049fa4f9021a8151c089f44be4bf73763e8e9238ca4de12b9d536"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "4cfeca13d8a319850eaa6e641b9099d1ac309385fd0e1d2206b5f08f58dc7623",
          "withoutMetadata": "4cfeca13d8a319850eaa6e641b9099d1ac309385fd0e1d2206b5f08f58dc7623",
          "linkedWithoutMetadata": "4cfeca13d8a319850eaa6e641b9099d1ac309385fd0e1d2206b5f08f58dc7623"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "30fd96550827116546532b2f46eef7d69affcb5c55e80792f61d40eec6cef0dd",
          "withoutMetadata": "30fd96550827116546532b2f46eef7d69affcb5c55e80792f61d40eec6cef0dd",
          "linkedWithoutMetadata": "30fd96550827116546532b2f46eef7d69affcb5c55e80792f61d40eec6cef0dd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "700fb9369af388c8845307973942522720b28b0ad332cd2cdbc798148c1a086c",
          "withoutMetadata": "700fb9369af388c8845307973942522720b28b0ad332cd2cdbc798148c1a086c",
          "linkedWithoutMetadata": "700fb9369af388c8845307973942522720b28b0ad332cd2cdbc798148c1a086c"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "52eb83ad3b3a7afc800733125cd771ecd86b4c569a7731a81a9e79ee424038da",
          "withoutMetadata": "52eb83ad3b3a7afc800733125cd771ecd86b4c569a7731a81a9e79ee424038da",
          "linkedWithoutMetadata": "52eb83ad3b3a7afc800733125cd771ecd86b4c569a7731a81a9e79ee424038da"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "7502afc376bcab812fcfcf74e2055ebb5698325748ecbe0bf85541a2749a02d6",
          "withoutMetadata": "7502afc376bcab812fcfcf74e2055ebb5698325748ecbe0bf85541a2749a02d6",
          "linkedWithoutMetadata": "7502afc376bcab812fcfcf74e2055ebb5698325748ecbe0bf85541a2749a02d6"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19170",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19170": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "65e6a0106be54dcb3dffbb33c282c910d2cd77433cf1f78964de567fcfd19eea",
          "withoutMetadata": "65e6a0106be54dcb3dffbb33c282c910d2cd77433cf1f78964de567fcfd19eea",
          "linkedWithoutMetadata": "65e6a0106be54dcb3dffbb33c282c910d2cd77433cf1f78964de567fcfd19eea"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "7ffab7cda1a5329a3da175c6a0d9064db5f5e1bdb99a3058a2e4e7ce4772337b",
          "withoutMetadata": "7ffab7cda1a5329a3da175c6a0d9064db5f5e1bdb99a3058a2e4e7ce4772337b",
          "linkedWithoutMetadata": "7ffab7cda1a5329a3da175c6a0d9064db5f5e1bdb99a3058a2e4e7ce4772337b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "withoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67",
          "linkedWithoutMetadata": "28e6c804a63efdd21a072e8e56108cfb9c6446f8b9d4f895093208247df61c67"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "withoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8",
          "linkedWithoutMetadata": "a5cc5e4db57e623da3ab4e3b408fcf97b69c123631b4ff6b67f208976c24a2f8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "withoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57",
          "linkedWithoutMetadata": "e0643f2b843694a48cc6869fb50ee83145c128424f613ee7c8addb4e24500a57"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "withoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb",
          "linkedWithoutMetadata": "6c1d0471fdd80c71cf9d44a7d8c92e01e2af72af7573fb154c25c0d0200f6ebb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "1e10a933c4dd47956fe108f7e0dc3771a8ac74e8d9691bbfcf3e8d1bac914c73",
          "withoutMetadata": "1e10a933c4dd47956fe108f7e0dc3771a8ac74e8d9691bbfcf3e8d1bac914c73",
          "linkedWithoutMetadata": "1e10a933c4dd47956fe108f7e0dc3771a8ac74e8d9691bbfcf3e8d1bac914c73"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "withoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575",
          "linkedWithoutMetadata": "c7240f20f1405d2498e0626d7420c3c9eb04b122e86a810a13c9adfd2e54e575"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "withoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626",
          "linkedWithoutMetadata": "e83faa1cc96419e578f4039ca79def068f7af5d7e7e8adb49f40660747472626"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "2b973b14651d520a9362544b382dd8159010dc24b7cde0b83ed2882dca32b7ef",
          "withoutMetadata": "2b973b14651d520a9362544b382dd8159010dc24b7cde0b83ed2882dca32b7ef",
          "linkedWithoutMetadata": "2b973b14651d520a9362544b382dd8159010dc24b7cde0b83ed2882dca32b7ef"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "db2085365aba0f7b1e3059bf8d55f2cdc8d6a336f0b669b74b2ff9504e3c65ff",
          "withoutMetadata": "db2085365aba0f7b1e3059bf8d55f2cdc8d6a336f0b669b74b2ff9504e3c65ff",
          "linkedWithoutMetadata": "db2085365aba0f7b1e3059bf8d55f2cdc8d6a336f0b669b74b2ff9504e3c65ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "a48e629aa1275d3b218b81700da0ee52fb32c863997e27b2de3c7de9abda2b22",
          "withoutMetadata": "a48e629aa1275d3b218b81700da0ee52fb32c863997e27b2de3c7de9abda2b22",
          "linkedWithoutMetadata": "a48e629aa1275d3b218b81700da0ee52fb32c863997e27b2de3c7de9abda2b22"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "f8dc87d7afccc03d5b084bdb298d8d52628648f3418a1d9696f8676c04a6381b",
          "withoutMetadata": "f8dc87d7afccc03d5b084bdb298d8d52628648f3418a1d9696f8676c04a6381b",
          "linkedWithoutMetadata": "f8dc87d7afccc03d5b084bdb298d8d52628648f3418a1d9696f8676c04a6381b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19035",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19035": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "522ae54bbf81aada25ca33fa602b99abd392617329a47bb2686d9d6137f299a8",
          "withoutMetadata": "522ae54bbf81aada25ca33fa602b99abd392617329a47bb2686d9d6137f299a8",
          "linkedWithoutMetadata": "522ae54bbf81aada25ca33fa602b99abd392617329a47bb2686d9d6137f299a8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "withoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0",
          "linkedWithoutMetadata": "7fb46cd97062516bd4f575a6f9685064c071465e9ba23da53983c87afcb630d0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "c849f0dcb493404292f4f17cfd4f8db5cbec7ff1ebe286659339b9497e317388",
          "withoutMetadata": "c849f0dcb493404292f4f17cfd4f8db5cbec7ff1ebe286659339b9497e317388",
          "linkedWithoutMetadata": "c849f0dcb493404292f4f17cfd4f8db5cbec7ff1ebe286659339b9497e317388"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)12_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)12_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "ba22c3ff683ee32443cc7039267c64534f0f9e599c5b60b1d04bbed3f3fbbf2e",
          "withoutMetadata": "ba22c3ff683ee32443cc7039267c64534f0f9e599c5b60b1d04bbed3f3fbbf2e",
          "linkedWithoutMetadata": "ba22c3ff683ee32443cc7039267c64534f0f9e599c5b60b1d04bbed3f3fbbf2e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "withoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "linkedWithoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "withoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "linkedWithoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "withoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "linkedWithoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "withoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "linkedWithoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "withoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "linkedWithoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "withoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "linkedWithoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "cf6da2900cba269b789866b37ddc97593b5bd7d01bcb401b70af3650f6957cee",
          "withoutMetadata": "cf6da2900cba269b789866b37ddc97593b5bd7d01bcb401b70af3650f6957cee",
          "linkedWithoutMetadata": "cf6da2900cba269b789866b37ddc97593b5bd7d01bcb401b70af3650f6957cee"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "withoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "linkedWithoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "0710adccd6186c508b3337d7143b4b3676a411badb522a15680b50d553b3b280",
          "withoutMetadata": "0710adccd6186c508b3337d7143b4b3676a411badb522a15680b50d553b3b280",
          "linkedWithoutMetadata": "0710adccd6186c508b3337d7143b4b3676a411badb522a15680b50d553b3b280"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "927aa28e79593d46bc8a38916e88b25e91cde0654b7b3f93b503480c5df768c8",
          "withoutMetadata": "927aa28e79593d46bc8a38916e88b25e91cde0654b7b3f93b503480c5df768c8",
          "linkedWithoutMetadata": "927aa28e79593d46bc8a38916e88b25e91cde0654b7b3f93b503480c5df768c8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "52bd137a7612d59219f9127f090e8b543d1349b0dba17e6476bd28d2c139a4ef",
          "withoutMetadata": "52bd137a7612d59219f9127f090e8b543d1349b0dba17e6476bd28d2c139a4ef",
          "linkedWithoutMetadata": "52bd137a7612d59219f9127f090e8b543d1349b0dba17e6476bd28d2c139a4ef"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "4dadc566b524f3b8fc1999b2f5585fe31c311e59431fdd3efda53415f9b4b766",
          "withoutMetadata": "4dadc566b524f3b8fc1999b2f5585fe31c311e59431fdd3efda53415f9b4b766",
          "linkedWithoutMetadata": "4dadc566b524f3b8fc1999b2f5585fe31c311e59431fdd3efda53415f9b4b766"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "847d7b56ab607bf2df6f9e69c7c731e65814a5ca9137e4dcd80179b657966f9e",
          "withoutMetadata": "847d7b56ab607bf2df6f9e69c7c731e65814a5ca9137e4dcd80179b657966f9e",
          "linkedWithoutMetadata": "847d7b56ab607bf2df6f9e69c7c731e65814a5ca9137e4dcd80179b657966f9e"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "ed43d693d6a2d13d434d29b7c77b2a251887b7b78fb30fb9c7bf396838b95e8d",
          "withoutMetadata": "ed43d693d6a2d13d434d29b7c77b2a251887b7b78fb30fb9c7bf396838b95e8d",
          "linkedWithoutMetadata": "ed43d693d6a2d13d434d29b7c77b2a251887b7b78fb30fb9c7bf396838b95e8d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "ae8c5e2fc06e12c838668b2d2ea5e626956fd76e63aaa32fb25f4bdb772ef0b9",
          "withoutMetadata": "ae8c5e2fc06e12c838668b2d2ea5e626956fd76e63aaa32fb25f4bdb772ef0b9",
          "linkedWithoutMetadata": "ae8c5e2fc06e12c838668b2d2ea5e626956fd76e63aaa32fb25f4bdb772ef0b9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "10db1687118500a3ec4dfb6e05dad345de42973a375bb3d132d3aa672dfc7b27",
          "withoutMetadata": "10db1687118500a3ec4dfb6e05dad345de42973a375bb3d132d3aa672dfc7b27",
          "linkedWithoutMetadata": "10db1687118500a3ec4dfb6e05dad345de42973a375bb3d132d3aa672dfc7b27"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "515c830f11581c656ff241a05f9860cd349a382362bfa89f0d10ed5cc6d910b1",
          "withoutMetadata": "515c830f11581c656ff241a05f9860cd349a382362bfa89f0d10ed5cc6d910b1",
          "linkedWithoutMetadata": "515c830f11581c656ff241a05f9860cd349a382362bfa89f0d10ed5cc6d910b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "12a997715372c977a84503f3d648cc870a1f69f10a603076c9f21b8dd4b42ed8",
          "withoutMetadata": "12a997715372c977a84503f3d648cc870a1f69f10a603076c9f21b8dd4b42ed8",
          "linkedWithoutMetadata": "12a997715372c977a84503f3d648cc870a1f69f10a603076c9f21b8dd4b42ed8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "bebfe0cf8af24d35753eb9ea3263b3e2d2cbb10001284ea48c091ff92a4f5bc1",
          "withoutMetadata": "bebfe0cf8af24d35753eb9ea3263b3e2d2cbb10001284ea48c091ff92a4f5bc1",
          "linkedWithoutMetadata": "bebfe0cf8af24d35753eb9ea3263b3e2d2cbb10001284ea48c091ff92a4f5bc1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "4d3c89e086da114952b7c939c29b97acedbad2e8913983677bf007476d8f89a2",
          "withoutMetadata": "4d3c89e086da114952b7c939c29b97acedbad2e8913983677bf007476d8f89a2",
          "linkedWithoutMetadata": "4d3c89e086da114952b7c939c29b97acedbad2e8913983677bf007476d8f89a2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "1094e707e064a77c8c38fd68eb37173187285193d143130179f031e608c28b11",
          "withoutMetadata": "1094e707e064a77c8c38fd68eb37173187285193d143130179f031e608c28b11",
          "linkedWithoutMetadata": "1094e707e064a77c8c38fd68eb37173187285193d143130179f031e608c28b11"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "f70bc225e4c0871d106f023949bd8ac5803e02d38717aa249c3e0e528eb18b2e",
          "withoutMetadata": "f70bc225e4c0871d106f023949bd8ac5803e02d38717aa249c3e0e528eb18b2e",
          "linkedWithoutMetadata": "f70bc225e4c0871d106f023949bd8ac5803e02d38717aa249c3e0e528eb18b2e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "fcc34dd3f255262fe78c0522218047a13af5c49c93d7bbb703c72ba2b3c0c163",
          "withoutMetadata": "fcc34dd3f255262fe78c0522218047a13af5c49c93d7bbb703c72ba2b3c0c163",
          "linkedWithoutMetadata": "fcc34dd3f255262fe78c0522218047a13af5c49c93d7bbb703c72ba2b3c0c163"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "45fa643382659cb24b5d7fc9b5e9c04a715686c69bc7b1bdc9dcaf7a4d77afa0",
          "withoutMetadata": "45fa643382659cb24b5d7fc9b5e9c04a715686c69bc7b1bdc9dcaf7a4d77afa0",
          "linkedWithoutMetadata": "45fa643382659cb24b5d7fc9b5e9c04a715686c69bc7b1bdc9dcaf7a4d77afa0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "11b0b1a57bdde15590430e6494064ce55c5fc51a51618d6eba0e454a0f941b06",
          "withoutMetadata": "11b0b1a57bdde15590430e6494064ce55c5fc51a51618d6eba0e454a0f941b06",
          "linkedWithoutMetadata": "11b0b1a57bdde15590430e6494064ce55c5fc51a51618d6eba0e454a0f941b06"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "f34e61cd1ba2ec82951fec8c5853b4eabf390567a28df9551f6ac3940e592633",
          "withoutMetadata": "f34e61cd1ba2ec82951fec8c5853b4eabf390567a28df9551f6ac3940e592633",
          "linkedWithoutMetadata": "f34e61cd1ba2ec82951fec8c5853b4eabf390567a28df9551f6ac3940e592633"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "5b6ecd574680290761a23f8a411e360c77aae3803b261c8fc7d894cc9ecd1370",
          "withoutMetadata": "5b6ecd574680290761a23f8a411e360c77aae3803b261c8fc7d894cc9ecd1370",
          "linkedWithoutMetadata": "5b6ecd574680290761a23f8a411e360c77aae3803b261c8fc7d894cc9ecd1370"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19170",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19170": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "34e02621f83a906d8f2b65fb71bae1e01249daef7341c8cb8f6d1f4bf33ec8ae",
          "withoutMetadata": "34e02621f83a906d8f2b65fb71bae1e01249daef7341c8cb8f6d1f4bf33ec8ae",
          "linkedWithoutMetadata": "34e02621f83a906d8f2b65fb71bae1e01249daef7341c8cb8f6d1f4bf33ec8ae"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "16a47f24ee374d5270428e69a3ad3bc925dfc761c07d7a15b4a90ad823daa8e2",
          "withoutMetadata": "16a47f24ee374d5270428e69a3ad3bc925dfc761c07d7a15b4a90ad823daa8e2",
          "linkedWithoutMetadata": "16a47f24ee374d5270428e69a3ad3bc925dfc761c07d7a15b4a90ad823daa8e2"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "withoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636",
          "linkedWithoutMetadata": "cb1d49916344842d666c3f3823b022def6199694b79e507277202840d6daf636"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "withoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9",
          "linkedWithoutMetadata": "4a95ded910a9e63ae1d70cf58ba9104f6ef66945a05e6a19e4038e13a4d5f9c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "withoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4",
          "linkedWithoutMetadata": "ffe2ef0a6b38bd1da40045014b8c5dfcc87eb4a7665d31252a69b95ee9e8e0b4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "withoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7",
          "linkedWithoutMetadata": "4c767ceb10e8f7215ab8f66101a0e934e92884243f994b98ef50c546e04fb6c7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "225f69651a5d33e5c6bf34c274a73eafa74b3ae9b8656a865186f9fd0743bb3c",
          "withoutMetadata": "225f69651a5d33e5c6bf34c274a73eafa74b3ae9b8656a865186f9fd0743bb3c",
          "linkedWithoutMetadata": "225f69651a5d33e5c6bf34c274a73eafa74b3ae9b8656a865186f9fd0743bb3c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "withoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa",
          "linkedWithoutMetadata": "e5b78159c2f708c8bcd6bd9ba6a005fbe63b03a125e11b3ea591ce86df0b08fa"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "withoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63",
          "linkedWithoutMetadata": "c636079013904a386a9727a3619a98e01cb767e0eb623486f1afcd7568c22a63"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "dbb61400f62bfe38959fef9b7639ec55b325025ce141ba2f35ce252a9a2beb7f",
          "withoutMetadata": "dbb61400f62bfe38959fef9b7639ec55b325025ce141ba2f35ce252a9a2beb7f",
          "linkedWithoutMetadata": "dbb61400f62bfe38959fef9b7639ec55b325025ce141ba2f35ce252a9a2beb7f"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "1f7cfca7739481b0dda1ccdc8d21d2fd3f6334cb130f99dc7964bba030d7322b",
          "withoutMetadata": "1f7cfca7739481b0dda1ccdc8d21d2fd3f6334cb130f99dc7964bba030d7322b",
          "linkedWithoutMetadata": "1f7cfca7739481b0dda1ccdc8d21d2fd3f6334cb130f99dc7964bba030d7322b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "81163243e6e3c6294d2b3f3b97b28092ef88a5b38100abf9eb0059981cd6b544",
          "withoutMetadata": "81163243e6e3c6294d2b3f3b97b28092ef88a5b38100abf9eb0059981cd6b544",
          "linkedWithoutMetadata": "81163243e6e3c6294d2b3f3b97b28092ef88a5b38100abf9eb0059981cd6b544"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "76207e21fe5b4c49479b5e9389403d2c03a336917eb6e8792b3fce6f2d9e2947",
          "withoutMetadata": "76207e21fe5b4c49479b5e9389403d2c03a336917eb6e8792b3fce6f2d9e2947",
          "linkedWithoutMetadata": "76207e21fe5b4c49479b5e9389403d2c03a336917eb6e8792b3fce6f2d9e2947"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19035",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19035": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "a82309266cf6fd516fa7936072a1617fef5e84774ded0089cf72ec97616cf4be",
          "withoutMetadata": "a82309266cf6fd516fa7936072a1617fef5e84774ded0089cf72ec97616cf4be",
          "linkedWithoutMetadata": "a82309266cf6fd516fa7936072a1617fef5e84774ded0089cf72ec97616cf4be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "withoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8",
          "linkedWithoutMetadata": "087667531ed45e6e5c4dc531e242e750d61f0fa3330b00ca00be1c0bcdd83fc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "ac7e6c0433957bc658a90ff2e215ba4e9e449143a9c7e714507ffb09f644c847",
          "withoutMetadata": "ac7e6c0433957bc658a90ff2e215ba4e9e449143a9c7e714507ffb09f644c847",
          "linkedWithoutMetadata": "ac7e6c0433957bc658a90ff2e215ba4e9e449143a9c7e714507ffb09f644c847"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:18",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:18",
        "version": {
          "withMetadata": "a514322f1639bc4b0521469e10e8dd9e284213a8788d25246b9955dfc4a282f8",
          "withoutMetadata": "a514322f1639bc4b0521469e10e8dd9e284213a8788d25246b9955dfc4a282f8",
          "linkedWithoutMetadata": "a514322f1639bc4b0521469e10e8dd9e284213a8788d25246b9955dfc4a282f8"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/BeaconProxy.sol:30"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:UpgradeableBeacon": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:16",
        "version": {
          "withMetadata": "1d0c9bd8cfa041e3917040270eed70ba2650ec847f559a04b81e309eeb2251eb",
          "withoutMetadata": "1d0c9bd8cfa041e3917040270eed70ba2650ec847f559a04b81e309eeb2251eb",
          "linkedWithoutMetadata": "1d0c9bd8cfa041e3917040270eed70ba2650ec847f559a04b81e309eeb2251eb"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/IBeacon.sol:IBeacon"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/beacon/UpgradeableBeacon.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:ProxyAdmin": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/ProxyAdmin.sol:13",
        "version": {
          "withMetadata": "78bd3de320cfc6475cba81b745516bc69373cdadee83f96f74347e5d6dce9dc9",
          "withoutMetadata": "78bd3de320cfc6475cba81b745516bc69373cdadee83f96f74347e5d6dce9dc9",
          "linkedWithoutMetadata": "78bd3de320cfc6475cba81b745516bc69373cdadee83f96f74347e5d6dce9dc9"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:ITransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:14",
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [],
        "methods": [
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:58",
        "version": {
          "withMetadata": "129eca0b34578371e0808c816677a27e68d9819d862f480e372a98decfda58a4",
          "withoutMetadata": "129eca0b34578371e0808c816677a27e68d9819d862f480e372a98decfda58a4",
          "linkedWithoutMetadata": "129eca0b34578371e0808c816677a27e68d9819d862f480e372a98decfda58a4"
        },
        "inherit": [
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/proxy/transparent/TransparentUpgradeableProxy.sol:63"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:9",
        "version": {
          "withMetadata": "f41de9c960fd88725b28484d2882c608d253cf260329d7da7448de0ed99e16b5",
          "withoutMetadata": "f41de9c960fd88725b28484d2882c608d253cf260329d7da7448de0ed99e16b5",
          "linkedWithoutMetadata": "f41de9c960fd88725b28484d2882c608d253cf260329d7da7448de0ed99e16b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts-hardhat-zksync-upgradable/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "be935565ca117b6e01764b7ce535db17dd1a3d2cff52171e2e82bb1eb939f788",
          "withoutMetadata": "be935565ca117b6e01764b7ce535db17dd1a3d2cff52171e2e82bb1eb939f788",
          "linkedWithoutMetadata": "be935565ca117b6e01764b7ce535db17dd1a3d2cff52171e2e82bb1eb939f788"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:41",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "owner()",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)",
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules": {
        "src": "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "defaultAdmin()",
          "pendingDefaultAdmin()",
          "defaultAdminDelay()",
          "pendingDefaultAdminDelay()",
          "beginDefaultAdminTransfer(address)",
          "cancelDefaultAdminTransfer()",
          "acceptDefaultAdminTransfer()",
          "changeDefaultAdminDelay(uint48)",
          "rollbackDefaultAdminDelay()",
          "defaultAdminDelayIncreaseWait()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313": {
        "src": "@openzeppelin/contracts/interfaces/IERC5313.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1fba65b62b7f848468255d674549926e4f471e31c57dc38a57204627c5442429",
          "withoutMetadata": "1fba65b62b7f848468255d674549926e4f471e31c57dc38a57204627c5442429",
          "linkedWithoutMetadata": "1fba65b62b7f848468255d674549926e4f471e31c57dc38a57204627c5442429"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "0b1e6e3fc5e107fb580a728d258341854f5dbf140b46573d7ec00827644fd0e6",
          "withoutMetadata": "0b1e6e3fc5e107fb580a728d258341854f5dbf140b46573d7ec00827644fd0e6",
          "linkedWithoutMetadata": "0b1e6e3fc5e107fb580a728d258341854f5dbf140b46573d7ec00827644fd0e6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:105"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "dc857da215ab19569e7c951b18fa0b5b96415e353a33378c7357cecc91f310c3",
          "withoutMetadata": "dc857da215ab19569e7c951b18fa0b5b96415e353a33378c7357cecc91f310c3",
          "linkedWithoutMetadata": "dc857da215ab19569e7c951b18fa0b5b96415e353a33378c7357cecc91f310c3"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "0c8032689c89b7b3ce4d74698be2cb3160b61765a856d12e655bdcac1e757f83",
          "withoutMetadata": "0c8032689c89b7b3ce4d74698be2cb3160b61765a856d12e655bdcac1e757f83",
          "linkedWithoutMetadata": "0c8032689c89b7b3ce4d74698be2cb3160b61765a856d12e655bdcac1e757f83"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "92e90ce2ebc518dbb08f142c34e3762786e9fa343d4642305a03547eb2d385a0",
          "withoutMetadata": "92e90ce2ebc518dbb08f142c34e3762786e9fa343d4642305a03547eb2d385a0",
          "linkedWithoutMetadata": "92e90ce2ebc518dbb08f142c34e3762786e9fa343d4642305a03547eb2d385a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "a71c2b670659aa057781bb4e908933fbcad2f0449d07342636da8a9886bebc6c",
          "withoutMetadata": "a71c2b670659aa057781bb4e908933fbcad2f0449d07342636da8a9886bebc6c",
          "linkedWithoutMetadata": "a71c2b670659aa057781bb4e908933fbcad2f0449d07342636da8a9886bebc6c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/NexusProofManager.sol:NexusProofManager": {
        "src": "contracts/NexusProofManager.sol:6",
        "version": {
          "withMetadata": "84f921fc81e578586dd06c084d2cd3efa338d2f38a1ba1abcd1d7ad2b9e11c15",
          "withoutMetadata": "84f921fc81e578586dd06c084d2cd3efa338d2f38a1ba1abcd1d7ad2b9e11c15",
          "linkedWithoutMetadata": "84f921fc81e578586dd06c084d2cd3efa338d2f38a1ba1abcd1d7ad2b9e11c15"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "updateNexusBlock(uint256,(bytes32,bytes32))",
          "updateChainState(uint256,bytes32[],bytes32,(bytes32,bytes32,bytes32,uint128,uint128))",
          "verifyRollupState(bytes32,((bytes32,bytes32),bytes32[]),(bytes32,bytes32))",
          "getChainState(uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "latestNexusBlockNumber",
            "src": "contracts/NexusProofManager.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "latestNexusBlockNumber",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:7"
            },
            {
              "label": "nexusBlock",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:14"
            },
            {
              "label": "nexusAppIDToLatestBlockNumber",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:15"
            },
            {
              "label": "nexusAppIDToState",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))",
              "contract": "NexusProofManager",
              "src": "contracts/NexusProofManager.sol:16"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
              "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(NexusBlock)9417_storage)": {
              "label": "mapping(uint256 => struct NexusProofManager.NexusBlock)",
              "numberOfBytes": "32"
            },
            "t_struct(NexusBlock)9417_storage": {
              "label": "struct NexusProofManager.NexusBlock",
              "members": [
                {
                  "label": "stateRoot",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "blockHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/NexusBridge.sol:NexusBridge": {
        "src": "contracts/example/bridge/NexusBridge.sol:21",
        "version": {
          "withMetadata": "713b9e53aad5b9cfc76131e2bb021be5b4f818e5a52cdbb83f6e07c42c8284aa",
          "withoutMetadata": "713b9e53aad5b9cfc76131e2bb021be5b4f818e5a52cdbb83f6e07c42c8284aa",
          "linkedWithoutMetadata": "713b9e53aad5b9cfc76131e2bb021be5b4f818e5a52cdbb83f6e07c42c8284aa"
        },
        "inherit": [
          "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge",
          "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:AccessControlDefaultAdminRulesUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/interfaces/IERC5313.sol:IERC5313",
          "@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol:IAccessControlDefaultAdminRules",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,address,address,address,address,address,bytes32)",
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateNexusTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)",
          "getFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "isSent",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:32"
            },
            {
              "label": "isBridged",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_bool)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:34"
            },
            {
              "label": "tokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:36"
            },
            {
              "label": "nexusTokens",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:38"
            },
            {
              "label": "avail",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IAvail)10743",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:40"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:41"
            },
            {
              "label": "feeRecipient",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:42"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:43"
            },
            {
              "label": "feePerByte",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:44"
            },
            {
              "label": "messageId",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:45"
            },
            {
              "label": "chainId",
              "offset": 0,
              "slot": "10",
              "type": "t_bytes32",
              "contract": "NexusBridge",
              "src": "contracts/example/bridge/NexusBridge.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IAvail)10743": {
              "label": "contract IAvail",
              "numberOfBytes": "20"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_bool)": {
              "label": "mapping(bytes32 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint48": {
              "label": "uint48"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
            },
            "t_struct(RoleData)1642_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.AccessControlDefaultAdminRules": [
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:45"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDefaultAdminSchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:46"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:48"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_currentDefaultAdmin",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:49"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelay",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:52"
              },
              {
                "contract": "AccessControlDefaultAdminRulesUpgradeable",
                "label": "_pendingDelaySchedule",
                "type": "t_uint48",
                "src": "@openzeppelin/contracts-upgradeable/access/extensions/AccessControlDefaultAdminRulesUpgradeable.sol:53"
              }
            ],
            "erc7201:openzeppelin.storage.AccessControl": [
              {
                "contract": "AccessControlUpgradeable",
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)1642_storage)",
                "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IAvail.sol:IAvail": {
        "src": "contracts/example/bridge/interfaces/IAvail.sol:6",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IMessageReceiver.sol:IMessageReceiver": {
        "src": "contracts/example/bridge/interfaces/IMessageReceiver.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onAvailMessage(bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/INexusBridge.sol:INexusBridge": {
        "src": "contracts/example/bridge/interfaces/INexusBridge.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPaused(bool)",
          "updateTokens(bytes32[],address[])",
          "updateFeePerByte(uint256)",
          "updateFeeRecipient(address)",
          "withdrawFees()",
          "receiveMessage((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveETH((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "receiveERC20((bytes1,bytes32,bytes32,bytes,uint64,bytes,bytes32),bytes)",
          "sendMessage(bytes32,bytes)",
          "sendETH(bytes32)",
          "sendERC20(bytes32,bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/interfaces/IVectorx.sol:IVectorx": {
        "src": "contracts/example/bridge/interfaces/IVectorx.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dataRootCommitments(bytes32)",
          "rangeStartBlocks(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/bridge/lib/Merkle.sol:Merkle": {
        "src": "contracts/example/bridge/lib/Merkle.sol:11",
        "version": {
          "withMetadata": "f9b7c25a237c9994064e1ff7504b51da3294b691a3b45fd931b267f1aba2680b",
          "withoutMetadata": "f9b7c25a237c9994064e1ff7504b51da3294b691a3b45fd931b267f1aba2680b",
          "linkedWithoutMetadata": "f9b7c25a237c9994064e1ff7504b51da3294b691a3b45fd931b267f1aba2680b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC20.sol:ERC20Token": {
        "src": "contracts/example/mock/ERC20.sol:6",
        "version": {
          "withMetadata": "7d6c9934d7c4859c831ec234ab72ad33cf2895577df043554c0d2406a67e7eff",
          "withoutMetadata": "7d6c9934d7c4859c831ec234ab72ad33cf2895577df043554c0d2406a67e7eff",
          "linkedWithoutMetadata": "7d6c9934d7c4859c831ec234ab72ad33cf2895577df043554c0d2406a67e7eff"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Token",
            "src": "contracts/example/mock/ERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/mock/ERC721.sol:ERC721Token": {
        "src": "contracts/example/mock/ERC721.sol:6",
        "version": {
          "withMetadata": "e496651af5675bb3209b7ccbd52078bc48e44cbb8315f5d3dacf52dd421db361",
          "withoutMetadata": "e496651af5675bb3209b7ccbd52078bc48e44cbb8315f5d3dacf52dd421db361",
          "linkedWithoutMetadata": "e496651af5675bb3209b7ccbd52078bc48e44cbb8315f5d3dacf52dd421db361"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Token",
            "src": "contracts/example/mock/ERC721.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NFT.sol:MyNFT": {
        "src": "contracts/example/zknft/NFT.sol:9",
        "version": {
          "withMetadata": "b8efd4d80abf9adc1ec7d03b072acab0657d3bbbf40e903b4c5bdfac32e3d285",
          "withoutMetadata": "b8efd4d80abf9adc1ec7d03b072acab0657d3bbbf40e903b4c5bdfac32e3d285",
          "linkedWithoutMetadata": "b8efd4d80abf9adc1ec7d03b072acab0657d3bbbf40e903b4c5bdfac32e3d285"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,bytes32,address,address)",
          "mintNFT(address,(bytes1,bytes32,bytes,uint256,uint256),(uint64,address,uint256,bytes32,bytes32[],uint64))",
          "verifyPayment((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/example/zknft/NFT.sol:33"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/example/zknft/NFT.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "paymentChainID",
            "src": "contracts/example/zknft/NFT.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "confirmationReceipts",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:10"
            },
            {
              "label": "usedMessageid",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:11"
            },
            {
              "label": "_tokenIds",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:13"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:14"
            },
            {
              "label": "storageProof",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(StorageProofVerifier)19170",
              "contract": "MyNFT",
              "src": "contracts/example/zknft/NFT.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_contract(StorageProofVerifier)19170": {
              "label": "contract StorageProofVerifier",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/NftPayment.sol:NFTPayment": {
        "src": "contracts/example/zknft/NftPayment.sol:7",
        "version": {
          "withMetadata": "d876b48112bfed7581289bb919c335df42593bfe4912a7f452d9512fa0402a84",
          "withoutMetadata": "d876b48112bfed7581289bb919c335df42593bfe4912a7f452d9512fa0402a84",
          "linkedWithoutMetadata": "d876b48112bfed7581289bb919c335df42593bfe4912a7f452d9512fa0402a84"
        },
        "inherit": [
          "contracts/example/zknft/Payment.sol:Payment"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "paymentWithoutFallback(bytes1,uint256,uint256,address)",
          "paymentWithFallback(bytes1,uint256,uint256,address)",
          "claimPayment(uint256)",
          "verifyPayment(bytes32,bytes,bytes32,bytes)",
          "updatePrice(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "NFTPayment",
            "src": "contracts/example/zknft/NftPayment.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "CLAIM_TIME",
            "src": "contracts/example/zknft/NftPayment.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FIXED_PAYOUT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "TARGET_CONTRACT_ADDRESS",
            "src": "contracts/example/zknft/NftPayment.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "claimCounter",
            "src": "contracts/example/zknft/NftPayment.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            },
            {
              "label": "nexus",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(INexusProofManager)11858",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:8"
            },
            {
              "label": "CLAIM_TIME",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:10"
            },
            {
              "label": "claimCounter",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:13"
            },
            {
              "label": "payoutPrice",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:19"
            },
            {
              "label": "pendingPayouts",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_struct(PendingPayment)11293_storage)dyn_storage",
              "contract": "NFTPayment",
              "src": "contracts/example/zknft/NftPayment.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PendingPayment)11293_storage)dyn_storage": {
              "label": "struct NFTPayment.PendingPayment[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(INexusProofManager)11858": {
              "label": "contract INexusProofManager",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_struct(PendingPayment)11293_storage": {
              "label": "struct NFTPayment.PendingPayment",
              "members": [
                {
                  "label": "to",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/example/zknft/Payment.sol:Payment": {
        "src": "contracts/example/zknft/Payment.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getValueFromId(uint256)",
          "getStorageLocationForKey(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "idToHash",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "Payment",
              "src": "contracts/example/zknft/Payment.sol:6"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interfaces/INexusProofManager.sol:INexusProofManager": {
        "src": "contracts/interfaces/INexusProofManager.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageRoot(bytes32,uint256,address,bytes)",
          "getChainState(uint256,bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/JellyfishMerkleTreeVerifier.sol:JellyfishMerkleTreeVerifier": {
        "src": "contracts/lib/JellyfishMerkleTreeVerifier.sol:5",
        "version": {
          "withMetadata": "8481950e5acc67792d672555e46b98e40ea67bea3a7e0cb30f2f9d6f75be5b2a",
          "withoutMetadata": "8481950e5acc67792d672555e46b98e40ea67bea3a7e0cb30f2f9d6f75be5b2a",
          "linkedWithoutMetadata": "8481950e5acc67792d672555e46b98e40ea67bea3a7e0cb30f2f9d6f75be5b2a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "verifyProof(bytes32,(bytes32,bytes32),((bytes32,bytes32),bytes32[]))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPReader.sol:Lib_RLPReader": {
        "src": "contracts/lib/external/rlp/Lib_RLPReader.sol:8",
        "version": {
          "withMetadata": "5c55c9e04e4ce8caa8a0c9c85afc6633ce5ea4c303b55e8bf18d4fc3abf9fc9c",
          "withoutMetadata": "5c55c9e04e4ce8caa8a0c9c85afc6633ce5ea4c303b55e8bf18d4fc3abf9fc9c",
          "linkedWithoutMetadata": "5c55c9e04e4ce8caa8a0c9c85afc6633ce5ea4c303b55e8bf18d4fc3abf9fc9c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/rlp/Lib_RLPWriter.sol:Lib_RLPWriter": {
        "src": "contracts/lib/external/rlp/Lib_RLPWriter.sol:12",
        "version": {
          "withMetadata": "885b74a88c82f4796d64235258d4ab014d765b960c07c27078d9c3e9ee3eb7b5",
          "withoutMetadata": "885b74a88c82f4796d64235258d4ab014d765b960c07c27078d9c3e9ee3eb7b5",
          "linkedWithoutMetadata": "885b74a88c82f4796d64235258d4ab014d765b960c07c27078d9c3e9ee3eb7b5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_MerkleTrie.sol:Lib_MerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_MerkleTrie.sol:12",
        "version": {
          "withMetadata": "100f81aeecebd66276c299a39de6dd14a35af899a574c7500c454784b4f27d31",
          "withoutMetadata": "100f81aeecebd66276c299a39de6dd14a35af899a574c7500c454784b4f27d31",
          "linkedWithoutMetadata": "100f81aeecebd66276c299a39de6dd14a35af899a574c7500c454784b4f27d31"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:Lib_SecureMerkleTrie": {
        "src": "contracts/lib/external/trie/Lib_SecureMerkleTrie.sol:11",
        "version": {
          "withMetadata": "4ef307f33e839aa5a86a6c2b066da6e4689195a2be1018d48d1d0f64472fe401",
          "withoutMetadata": "4ef307f33e839aa5a86a6c2b066da6e4689195a2be1018d48d1d0f64472fe401",
          "linkedWithoutMetadata": "4ef307f33e839aa5a86a6c2b066da6e4689195a2be1018d48d1d0f64472fe401"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Bytes.sol:Bytes": {
        "src": "contracts/lib/external/utils/Bytes.sol:6",
        "version": {
          "withMetadata": "73d4b30486d6861250f5a62180f65ff54495979be5f4f4073cb8c0ebe1a247c0",
          "withoutMetadata": "73d4b30486d6861250f5a62180f65ff54495979be5f4f4073cb8c0ebe1a247c0",
          "linkedWithoutMetadata": "73d4b30486d6861250f5a62180f65ff54495979be5f4f4073cb8c0ebe1a247c0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/lib/external/utils/Lib_BytesUtils.sol:Lib_BytesUtils": {
        "src": "contracts/lib/external/utils/Lib_BytesUtils.sol:7",
        "version": {
          "withMetadata": "c1a6d125b3ad9d8f0d84c91881c476c593acdb8c98c11745d5712b37be0b38e5",
          "withoutMetadata": "c1a6d125b3ad9d8f0d84c91881c476c593acdb8c98c11745d5712b37be0b38e5",
          "linkedWithoutMetadata": "c1a6d125b3ad9d8f0d84c91881c476c593acdb8c98c11745d5712b37be0b38e5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/StorageProof.sol:StorageProof": {
        "src": "contracts/verification/ethereum/StorageProof.sol:8",
        "version": {
          "withMetadata": "da5b86fa53bfc88f45b27e20c2e8acd83c206fbe218784d024ec5829de9261be",
          "withoutMetadata": "da5b86fa53bfc88f45b27e20c2e8acd83c206fbe218784d024ec5829de9261be",
          "linkedWithoutMetadata": "da5b86fa53bfc88f45b27e20c2e8acd83c206fbe218784d024ec5829de9261be"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(bytes32)",
          "verifyAccount(bytes32,bytes,address)",
          "verifyStorage(bytes32,bytes32,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProof",
            "src": "contracts/verification/ethereum/StorageProof.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "selfChainId",
            "src": "contracts/verification/ethereum/StorageProof.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/ethereum/Verifier.sol:EthereumVerifier": {
        "src": "contracts/verification/ethereum/Verifier.sol:6",
        "version": {
          "withMetadata": "50b5a707d0d3a4343e671bc204a6f512fe64b3ef39f1f3a669b063bdfde73040",
          "withoutMetadata": "50b5a707d0d3a4343e671bc204a6f512fe64b3ef39f1f3a669b063bdfde73040",
          "linkedWithoutMetadata": "50b5a707d0d3a4343e671bc204a6f512fe64b3ef39f1f3a669b063bdfde73040"
        },
        "inherit": [
          "contracts/verification/ethereum/StorageProof.sol:StorageProof"
        ],
        "libraries": [],
        "methods": [
          "(bytes32,address)",
          "getStorageRoot(bytes32,uint256,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EthereumVerifier",
            "src": "contracts/verification/ethereum/Verifier.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nexusStateManager",
            "src": "contracts/verification/ethereum/Verifier.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/Blask2s.sol:Blake2S": {
        "src": "contracts/verification/zksync/Blask2s.sol:13",
        "version": {
          "withMetadata": "569be4d8a8cf230068064e09586bb72810a9121ef435efad88cfa02b245343c7",
          "withoutMetadata": "569be4d8a8cf230068064e09586bb72810a9121ef435efad88cfa02b245343c7",
          "linkedWithoutMetadata": "569be4d8a8cf230068064e09586bb72810a9121ef435efad88cfa02b245343c7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "toDigest(bytes)",
          "toDigest(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/SparseMerkleTree.sol:SparseMerkleTree": {
        "src": "contracts/verification/zksync/SparseMerkleTree.sol:26",
        "version": {
          "withMetadata": "4b6f793df2646a91f222066a8352d59f5aae1103b6a4e23c7be0850f72edc50b",
          "withoutMetadata": "4b6f793df2646a91f222066a8352d59f5aae1103b6a4e23c7be0850f72edc50b",
          "linkedWithoutMetadata": "4b6f793df2646a91f222066a8352d59f5aae1103b6a4e23c7be0850f72edc50b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getRootHash(bytes32[],(uint256,bytes32,uint64),address)",
          "hashBranch(bytes32,bytes32)",
          "hashLeaf(uint64,bytes32)",
          "bit(uint256,uint256)",
          "reverse(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SparseMerkleTree",
            "src": "contracts/verification/zksync/SparseMerkleTree.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "emptyTreeHashes_",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SparseMerkleTree",
              "src": "contracts/verification/zksync/SparseMerkleTree.sol:27"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:IZkSyncDiamond": {
        "src": "contracts/verification/zksync/StorageProof.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/StorageProof.sol:StorageProofVerifier": {
        "src": "contracts/verification/zksync/StorageProof.sol:46",
        "version": {
          "withMetadata": "e7ba52d32c1fb30761b6980e710b1cf9ff6d7729034da03203c9ab98c29a1b11",
          "withoutMetadata": "e7ba52d32c1fb30761b6980e710b1cf9ff6d7729034da03203c9ab98c29a1b11",
          "linkedWithoutMetadata": "e7ba52d32c1fb30761b6980e710b1cf9ff6d7729034da03203c9ab98c29a1b11"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "verify((uint64,address,uint256,bytes32,bytes32[],uint64))"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StorageProofVerifier",
            "src": "contracts/verification/zksync/StorageProof.sol:50"
          },
          {
            "kind": "state-variable-immutable",
            "name": "zksyncDiamondAddress",
            "src": "contracts/verification/zksync/StorageProof.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "smt",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(SparseMerkleTree)19035",
              "contract": "StorageProofVerifier",
              "src": "contracts/verification/zksync/StorageProof.sol:48"
            }
          ],
          "types": {
            "t_contract(SparseMerkleTree)19035": {
              "label": "contract SparseMerkleTree",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/verification/zksync/ZKSyncDiamond.sol:ZKSyncDiamond": {
        "src": "contracts/verification/zksync/ZKSyncDiamond.sol:6",
        "version": {
          "withMetadata": "89fcebbc7824b161948803f2213af53c9545f614125a1f413b0819c32fd7250c",
          "withoutMetadata": "89fcebbc7824b161948803f2213af53c9545f614125a1f413b0819c32fd7250c",
          "linkedWithoutMetadata": "89fcebbc7824b161948803f2213af53c9545f614125a1f413b0819c32fd7250c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,bytes32)",
          "storedBatchHash(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ZKSyncDiamond",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "proofManager",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:8"
          },
          {
            "kind": "state-variable-immutable",
            "name": "chainId",
            "src": "contracts/verification/zksync/ZKSyncDiamond.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "forge-std/console.sol:console": {
        "src": "forge-std/console.sol:4",
        "version": {
          "withMetadata": "96079867502464858bfed5f5dfbef291a9bfcc7c0271e95ca579773b35004708",
          "withoutMetadata": "96079867502464858bfed5f5dfbef291a9bfcc7c0271e95ca579773b35004708",
          "linkedWithoutMetadata": "96079867502464858bfed5f5dfbef291a9bfcc7c0271e95ca579773b35004708"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}