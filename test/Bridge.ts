import { expect } from "chai";
//import { ethers } from "ethers";
import { ethers } from "hardhat";

import { encode } from "@ethereumjs/rlp";
import { BaseTrie } from "merkle-patricia-tree";

describe("NexusBridge", function () {
  let nexusBridge: any;
  let nexusProofManager: any;
  const chainId = 1;
  let accountTrieProof =
    "0xf90d7eb90214f90211a0044e301800f1f81306d9ad3bc8a84fe4a028a0716139d275810a43e607dfc687a00d78f13aef599abea3a4e74e4a13c6ccda76d2393a9e05c5c199987e54576dfca0b8d77b0b81ea51e639ef187e36206f0b2a09839d24600c2d1e0c31518d47c7c1a0a440462e848734b151684056360ee30c95b511cec5cddde4992835e730e683c0a022551b4fa7a02030bbb719471b76a3a5274a2f98a7788ded850796042c780364a021dfe5948b91b0e9e068efcfea10a8c216586f68bb7d31eb2dd54102904db105a05aed8c86987688cd26edcfd8057128ea2a63263ae54e00d4c8cf08c171bb1daca06e264e0eb2aa18a58f16e6703eaed0eb7e51f90e6f731fc8438b497ed22e0a3da05657ea1819c445faa5c95ebe1f541a118d0a9507d80ebcb767c75c7d31b220e7a03cbc4a6db7d4105722c22acbc02c103505a0bee8d7396879e9b7d4da6da8c0d0a08a9007363eefbd320d49de4fb68bb3b8544d76ed3bc0500d34529f27a23960f6a096776df9c0de111c08115350348f76b0be80202eb22b6d1d37f43ecb351ba30ba00ecad754967bd171f85b677ef48aeed71e19e28322c8abe60821737ee580003da0d5c8ed1975a8e80f24454b4ad3383444c9d131204f79350f1624044bf7b43fa2a0e8a50f8a20c14621e3ee16fba4379f6dc50ab765c384b79ac873cbb83d62992fa0b7b44fbe6b9a904b32e4b56020a46395906999366e908e80c9bd69c1ef60bfa480b90214f90211a07526a3dff9d878d542aa32e55bc7bb8eeaf36b51a13c00bad9861e43207a4c0aa06883e70a6563ba7d763c3b60b3d6f32416bfdd813f4c694338f406855bb6f53aa0bbe7b2c58982163645e3b1bd4aba40490619e6b95c22a8207f69c618acb174f7a0d8d26e144e5be8ee4191ebcd3790987885e6807ba7ed3d1babf8d1a73e792d37a0797b7c9a60f7e7b294c422d6d24f580e1083b7af9049d5498e97c643ec83bf0ba07758dcb03b85d70357fda346ef513eb36f65cf618df88c54da22429a954bb95ca0aced10253f6ac66077ec4d2e782e7f5f13cacb532aa83c32d06c5efa88700cb8a0d5f7526f2d700481434b420f9427f0f533b5c2a1f2c86236022624ed62107206a0e3688de747a05e1dc312b800742400172c91c1a5584bd373a0407f9bcdfd4c99a00365eaf5e3857f63c16ebc028c06723175f436b0c40dc1734a21fb61b1024c79a0ee84a49f4628ce81b886823d17f60d0bd2c07549c57b245e51ef90ac72ec9ac7a063a36ea951c1c662cd144eb58fdc6fce5526872124049f79bf7784e0ebbc3533a0de25107d6a05a3f47200aa4fdf1391c996ab1a50e411a936c527476a73c31a7ba0e19286616c16d3f1518e25900719581af8a2e9a2d4d377a5b805ceb721a25127a0b65075ab2143961452e9ff411237694b6fcfcf2005dc4ddd5e8036822664bd81a0b132ac853c0cc574274e58d0b1a47d1007950ea83d97ed0269feff2933b1adf380b90214f90211a05d28c8c6cb4a75b5b0219580c1958e903e996d3f5d3c49888c491cc5ddd3a873a0595cfce944c69331457df17d5f029dea634af81d02c848ef0b0793c6394001f0a07ede6dfaafbcffca17c78a525b4665b929ef1b91592723333a13b9047dffdad3a0b5a654d0d8c9016c34ebb71967ae22507a421a1eaefe78914991c3d0decaebd5a06b75e7df129a47e34357593103757b78dcd3f0b5809d375f5a9b87cfcb9a9a31a04b5dca6fa144db0754bc584f5607ef3e5380932c2f6867bc3988eddb3aadaad3a0e0c4df78bc162a9049787a81e80e27ded4434e158f3db8e83c63aa7ae949641ca082c401b0849e0ad2b23fe5f23745de16d97898bcf8cd0629c89bf044cb1b1dc8a0420d0187407ed7658d5506c6d6c0ad86b51201900f956a7ccc6878376d86ffeba0647a5b6ccac968e3237803d881ec602f7b35c9909e7ba7be729e09ce232d1fe2a0483990f0d5ed889ac2b4554feec89959dddc12305511bae0f07568c845c69835a0797c69a17d75e12869e4370bece18eeec4b7e592377a5075590e984a21e2f504a0906ba1e10ddfe5743f24ea41e771e3c865aa21aa26f512ae9a2721403c51b658a0c3ec10cb88faf1e9a685f4c15af37731e5dd14bed0371bb78cd15af849726187a09f2f555b01e930204fa2fc1421d72d59209fd1124a6cda50a656afce04911ec4a0dc0d8cb1c1041f5febc21779847c76436c301049aa23b869a3d36b9d925262bd80b90214f90211a0253f54b1b2bde5b6feac5290856f41e6b435886b4956394c8d260294dc804e0ea0183683b72604a766b0719153a776cdd96302e733de008d963bac6975d0ff595ba07a4a650b8fd388eb54747d440ab30029c5cce6447639b865641cdbcc327609d1a07b77e4a9e184913f56361895efab48ba26be7175268d42c2bb488b92837e1531a07c227a14bd11c9ef173e13231796bb75869b55f1d5dc125a3183a3d8493a5951a0dc3fa2d0f42e788a6511d791cac4643d12f8c45309d6de60f7f9d29df50ab5e0a0ead498f2017d3cf271e8599fe298c47a8f9f523b756e762e8bcad2d5f4f35a2da084bcf3d0c392af878169f7313258520f6a19f2a7f54226fb722778553f43d214a0c5124ce8daa5f5746bc0d07c10de1573f28d6aacfb192387345e7f9fbac485b9a00ee5ff83d377c2917ba4e589744b7b77c05187ff8dfd75e78e645639add6fb3aa041875b862be4ed0c6ea18c4cbe49884efe16cec6b45a2758264fa77e49417894a00c0d9cbd76f2326ef020608540c9478e605b736103380c66ec539722dc529c2aa02b343efb9bdd6f1ff95328ec5e45370e9e131f4705a511f4f723b07297dc4da0a030cf02887608fdf2e50c786604d8544d2fb9119a187c5699782ed1de9103bfcda04609fc1f4a2499b24ddc9f65e9e66f64a62653bd3292c47bb118ab072177b3bda02709136903470810db0e978e8857104a159ccc9b1454c7e6c40faae4ed35c3bb80b90214f90211a04a8ccc2ec5afc6c5da9485fa1ebcac419cacb996ee9bf94006197ed5dfd06c4da013f355d1af79fb58f3f4bf01a9976ef9693bae62db3e4847aab13ea9b2af02cca000f0107330a430ba9aa3da839ce7ab0dccd32cd2a8ffeed612d68150b3310ad9a05287e00dec0391eaae6830d4da55b520129312b5011bedc0bbcc65068f7b1352a0f3fd35edfe43ae44a42f2dd4e63a86516e80344871b0c21198bde7d1885de008a0b0652c18117d89694b7dd42bb68a8137c178fbda28f3ae56c4b3b234ce1edca5a0305382460be19a237bf47b130cd883680af219ae9bfc8021771401d31f6df513a091effbb8c34d2341a3d7baaf175d64d181cf3c2bc31dbfa86115fd303d13ef4ba0f92322f3053479898debf10deb674493352e6411a052ee3992a5cf50d95a6c51a0d347ac3d5ef28a95a3def9bf79a60646917ee33fedf3e0550a283334c87e36d0a0a8d14f8979f42ef35dc4c2164e28b3f80dab204a9815221a4222ca77a075e5b5a0c15bc3e238ab88ff675a6155781bdb868139489e2eac66436fc80ce4dd1353f5a09479eac5d1756de360a7d0aac49ccaaf419898003c783dfb9eb73c4cd37100a3a0e4393f433361a1399306cf1339c1fb4d7d1b3a583f1847c5096e2f25d99b3b4ca018e8d51b192bbd0b75117bcc3ed1e4a697ef28ac7b0a1698594273a0d56190aba0adfed68c2960800342c605ae666f32058e80f0318256924a877525cb36a6d60e80b901b4f901b1a0ae53f7f05ed67450f034a404573b14828d5e26f205e03202b21c0d009cc41c39a0fed967180ff2df450f158284794c95792505e46b35a3d1624d708e170cb870e18080a0d494080c6a5d11a888be5d58fa901f4d896035b5360204f8803edd8ed90144d0a0a76a94211dc56d3bab1814758fa12a638e9dd81c2fa8130f874aad88026d684280a0ca113124ae08a1a3be8ddb365c565447463c7f1d8a758250999c9726f443f017a0355d1513c1024a9e8f85c900376909ad62fd321f4222c494f87e0a464c679dfca0465854cd775cca0765b2d401202341ea16d07204458cc8ca46e137c97859b852a0515537f5b83a7722c42c2771d67d3aa53b9f8f5e50159652da42afbbb4fadc32a0bd9adbd050d35742e746859de98cc3f169e9cbcb637b0e973d0fdc4ed761074da065242077bdbdc9b0ecaaa3e5374cb614fc7a2fb95773c9ade701ce1d643bc64da0f0009c45c1e2cd8f31ab8dc5f34dbe3d009584a0bd40af764c8c29c27a5e1654a0708a4ba43d5457bc9dd5fc6f1d7a1a92bf2b6af127e8b9434e8589138ecdea68a0efc76f04a89068f5ec6c85659bd3ee7f69e6903be9d2bd3e08b1884d50bd69ad80b893f891808080808080a0f8c326ec4d160380b93fd45b787db1d663e3d1f88aba62874f1980820453fa798080a08a95ff01e1249c3d20a7445f70b1e0fd6c9633c9781d7d7f8fddf75295dde95da056037ed3821970c0d62691029c1557666edeb1205db64608384d417bb8f4fec580a04bb38e688ff577188baee67e48d5770ed91f506f5f2d4c2b9bef9094e265429580808080b853f851a0d4ebb208e969a7f053a148cb37dee0a918d0eccadb3e7df98ffc7d7870ff5cc280808080808080a08f1eac43c27c7c268e8f5890e0f15d4689b7ef7be6a41a2c0b8422e4c5ed36eb8080808080808080b868f8669d20da0e97e8e524f925f312d3e230ecc62336ac2f613f65c56bc40e7e9bb846f8440180a0ed339d10818912537ecff9846d024bbb91f43c025e0cf6bd9776170b11a77233a0850871722e2668923ca15a53bcb6c4d9c78d4edfc83de3556ac3e0cf7f4692be";
  let stateRoot =
    "0xcad699ccb4d1e3d295e8e19a14e7197f0aeb84b99a6ee85b7030674d2b3ca8ef";
  let blockHash =
    "0x5f574db327c747d944da576c21506ac2a90dc8f19bbc55791642c5e40d3b100e";
  let address = "0x2C032Aa43D119D7bf4Adc42583F1f94f3bf3023a";

  const storageProof =
    "0xf9032cb90214f90211a0fa5e2fd2d6e72c8e43b0ecbeb17a319100e1afbbdb29b63a697bcdbd4a76a2c9a06eb6224a9564b438ad325d0488179f5030a4326eef2ed1ac2d7519d4294174aba061ef152c381b12802824b71a91afc98c04a5b6e51d389fb9f2c05e5abe31b3e5a04e89079af75d215b6bc8b9da9d4004924c10f630376ad15c0a38aca26f72181aa041546186685e7844b9eb3e9aae302edd9e4bea2623126f7b6d1c960eb40c011ca0edd7174916748bfa8745eb7c7ae6d918407122e59528613c45378c4fb2ce754fa0fbcd97095a84dca96a677c8cecc8c896dc30873b04f26c75e9c178d0ca37e6aca0e0c78dc9d094e0862de0a5c9c985baf6559e2c40bec51992680b214bc6bb4f35a057ff5978a35d5ec99f026666883f5f027fde694459680ec6e57fc298e2e98186a0c9d21353484f8b32ef324257ad91a3ec3c38a7b8406e8a4f8ee4df36db357af9a0e6d922b0ba239623bb6e760dca22188040f4cc5a0ec67956f7a150caf572c960a0e8d15b5addd823945cf6fc4bfbbad157509404495f1837252b0ee02218968373a0d3296997569db72f2d654f637d919044d60780c9dd0b0991cfa7643d342a3923a0829e3a88a6375481ab9af6f12a2aacf1ce623d271db7aee004d554a0614429aaa0e1fbeb68483387d5bc0b5c55ed390b8fe3eeb317e1529ccaa9c7a41f0446d7a4a079f4c602db086d596a7a47dbcaaa6a0d6e75f1ccc8165907610e76c93abfbfe580b893f891a09f74f37bdf07e2d73e875c821a01a72ec9e3e5362cddcfa3521296476e6da1f880808080a038d9d8c71f2ce4639e7da19dc4c9d007e8b899611eea89b30c58963958b9e1a08080a0c50af823ddd4cfc519ce820f15c121ca41cdebf06b1c3ef90f864120f4aefc468080808080a0eb10e85ce708885e53342a886ef11efbe1d3594a12fa790df637d075eac860b18080b853f8518080808080a06faf57464a2fd95b0ab5ca730e0bcb746ddf4998391c1f0c25a1c7aecd71b4c8808080808080808080a070498144d3ce4caf58f156fda7f3056e5cb58bfca06621a384d441c6c691a2ae80aae99f3787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace88872386f26fc10000";
  const storgeAccount = "0xd35CCeEAD182dcee0F148EbaC9447DA2c4D449c4";
  const storageHash =
    "0xed339d10818912537ecff9846d024bbb91f43c025e0cf6bd9776170b11a77233";
  const storageSlot =
    "0x0000000000000000000000000000000000000000000000000000000000000002";

  before(async function () {
    const EVMStorageproof = await ethers.getContractFactory(
      "NexusProofManager"
    );
    nexusProofManager = await EVMStorageproof.deploy(chainId);
    const AvailToken = await ethers.getContractFactory("AvailToken");
    const availToken = await AvailToken.deploy();
    const NexusBridge = await ethers.getContractFactory("NexusBridge");
    nexusBridge = await NexusBridge.deploy();

    await nexusBridge.initialize(
      10,
      ethers.ZeroAddress,
      await availToken.getAddress(),
      address,
      address,
      await nexusProofManager.getAddress(),
      137
    );
  });

  it("Pass: receiveMessage()", async () => {
    await expect(
      nexusProofManager.updateChainState(
        137,
        15000,
        2,
        accountTrieProof,
        stateRoot
      )
    ).to.not.reverted;

    await expect(
      nexusBridge.receiveMessage(
        {
          messageType: "0x01",
          from: ethers.zeroPadValue(address, 32),
          to: ethers.zeroPadValue(address, 32),
          originDomain: 1,
          destinationDomain: 2,
          data: "0x",
          messageId: "2",
        },
        accountTrieProof
      )
    ).to.not.reverted;
  });

  it("Pass: receiveETH()", async () => {
    // mock transaction to send eth to contract

    await expect(
      nexusBridge.sendETH(ethers.zeroPadValue(address, 32), {
        value: ethers.parseEther("1"),
      })
    );

    await expect(
      nexusBridge.receiveETH(
        {
          messageType: "0x02",
          from: ethers.zeroPadValue(address, 32),
          to: ethers.zeroPadValue(address, 32),
          originDomain: 1,
          destinationDomain: 2,
          data: ethers.AbiCoder.defaultAbiCoder().encode(
            ["bytes32", "uint256"],
            [
              "0x4554480000000000000000000000000000000000000000000000000000000000",
              1000,
            ]
          ),
          messageId: "2",
        },
        accountTrieProof
      )
    ).to.not.reverted;
  });

  it("Pass: receiveAVAIL()", async () => {
    await expect(
      nexusBridge.receiveAVAIL(
        {
          messageType: "0x02",
          from: ethers.zeroPadValue(address, 32),
          to: ethers.zeroPadValue(address, 32),
          originDomain: 1,
          destinationDomain: 2,
          data: ethers.AbiCoder.defaultAbiCoder().encode(
            ["bytes32", "uint256"],
            [ethers.ZeroHash, 1000]
          ),
          messageId: "0x0",
        },
        accountTrieProof
      )
    ).to.not.reverted;
  });
  it("Pass: sendMessage()", async () => {
    await expect(
      nexusBridge.sendMessage(
        ethers.zeroPadValue(address, 32),
        ethers.AbiCoder.defaultAbiCoder().encode(
          ["bytes32", "uint256"],
          [ethers.ZeroHash, 1000]
        )
      )
    );
  });
});
